diff -urw xine-lib-1.1.11.1-ubuntu/src/demuxers/demux_matroska.c xine-lib-1.1.11.1-reel/src/demuxers/demux_matroska.c
--- xine-lib-1.1.11.1-ubuntu/src/demuxers/demux_matroska.c	2009-10-02 15:28:05.000000000 +0200
+++ xine-lib-1.1.11.1-reel/src/demuxers/demux_matroska.c	2009-10-07 10:50:41.436065553 +0200
@@ -1866,7 +1866,7 @@
   uint8_t          *data;
   uint8_t           flags;
   int               gap, lacing, num_len;
-  int               timecode_diff;
+  int16_t           timecode_diff;
   int64_t           pts, xduration;
   int               decoder_flags = 0;
 
diff -urw xine-lib-1.1.11.1-ubuntu/src/demuxers/demux_ts.c xine-lib-1.1.11.1-reel/src/demuxers/demux_ts.c
--- xine-lib-1.1.11.1-ubuntu/src/demuxers/demux_ts.c	2009-10-02 15:28:05.000000000 +0200
+++ xine-lib-1.1.11.1-reel/src/demuxers/demux_ts.c	2009-10-07 11:00:07.943088612 +0200
@@ -159,11 +159,12 @@
   #define TS_READ_STATS // activates read statistics generation
   #define TS_HEADER_LOG // prints out the Transport packet header.
 */
-
+#define AVCHD_EXTENSIONS "mts m2ts"
 /*
  *  The maximum number of PIDs we are prepared to handle in a single program
  *  is the number that fits in a single-packet PMT.
  */
+#define AVCHD_SIZE 4
 #define PKT_SIZE 188
 #define BODY_SIZE (188 - 4)
 /* more PIDS are needed due "auto-detection". 40 spare media entries  */
@@ -174,7 +175,7 @@
 #define MIN_SYNCS 3
 #define NPKT_PER_READ 100
 
-#define BUF_SIZE (NPKT_PER_READ * PKT_SIZE)
+#define BUF_SIZE (NPKT_PER_READ * (PKT_SIZE+AVCHD_SIZE))
 
 #define MAX_PES_BUF_SIZE 2048
 
@@ -342,7 +343,7 @@
   uint8_t buf[BUF_SIZE]; /* == PKT_SIZE * NPKT_PER_READ */
   
   int numPreview;
-
+  int is_avchd;
 } demux_ts_t;
 
 typedef struct {
@@ -741,7 +742,9 @@
   p += header_len + 9;
   packet_len -= header_len + 3;
 
-  if (stream_id == 0xbd) {
+  if ((stream_id == 0xbd) ||
+      (stream_id == 0xfd)) // pes id for ac3 with avchd
+  {
 
     int spu_id;
       
@@ -773,12 +776,15 @@
     } else if ((p[0] & 0xE0) == 0x20) {
       spu_id = (p[0] & 0x1f);
 
+      if(packet_len < 1)
+        return 0;
       m->content   = p+1;
       m->size      = packet_len-1;
       m->type      = BUF_SPU_DVD + spu_id;
       return 1;
     } else if ((p[0] & 0xF0) == 0x80) {
-
+      if(packet_len < 4)
+        return 0;
       m->content   = p+4;
       m->size      = packet_len - 4;
       m->type      |= BUF_AUDIO_A52;
@@ -1337,6 +1343,11 @@
       printf ("demux_ts: PMT streamtype 13818_TYPE_C, pid: 0x%.4x type %2.2x\n", pid, stream[0]);
 #endif
       break;
+    case 0x90:
+#ifdef TS_PMT_LOG
+      printf ("demux_ts: PMT subtitle pid 0x%.4x type %2.2x IGNORED!\n", pid, stream[0]);
+#endif
+      break;
     case ISO_13818_PES_PRIVATE:
       for (i = 5; i < coded_length; i += stream[i+1] + 2) {
           if ((stream[i] == 0x6a) && (this->audio_tracks_count < MAX_AUDIO_TRACKS)) {
@@ -1489,6 +1500,51 @@
   xine_event_send( this->stream, &ui_event );
 }
 
+static int read_block(demux_ts_t*this, uint8_t *buf, int32_t npkt_read, int bytes) {
+	if(this->is_avchd) {
+#if 0
+		int read_length = this->input->read(this->input, buf, npkt_read * (PKT_SIZE+AVCHD_SIZE));
+		int i, count = read_length / (PKT_SIZE+AVCHD_SIZE);
+		for(i=0;i<count;i++)
+			memcpy(&buf[i*PKT_SIZE], &buf[i*(PKT_SIZE+AVCHD_SIZE)+AVCHD_SIZE], PKT_SIZE);
+		return count*PKT_SIZE + (read_length % (PKT_SIZE+AVCHD_SIZE));
+#else
+		int read_length = this->input->read(this->input, buf, npkt_read * (PKT_SIZE+AVCHD_SIZE));
+		uint8_t *src = buf;
+		int count = 0;
+		int fill = 0;
+		int valid=0;
+		while(!valid && (read_length >= PKT_SIZE+AVCHD_SIZE)) {
+			int i;
+			valid = 1;
+			for(i=0;(i<10*(PKT_SIZE+AVCHD_SIZE)) && valid && (read_length >= (i+PKT_SIZE+AVCHD_SIZE));i+=PKT_SIZE+AVCHD_SIZE)
+				if(src[AVCHD_SIZE+i]!= 0x47)
+					valid=0;
+			if(!valid) {
+				src++;
+				read_length--;
+				fill++;
+			} // if
+		} // if
+		if(fill) {
+			memcpy(buf, src, read_length);
+			read_length += this->input->read(this->input, &buf[read_length], fill);
+			src=buf;
+		} // if
+		if((read_length < PKT_SIZE+AVCHD_SIZE) || (src[AVCHD_SIZE]!= 0x47)) // really bad....no sync
+			return 0;
+		while(read_length >= (PKT_SIZE+AVCHD_SIZE)) {
+			memcpy(&buf[count*PKT_SIZE], &src[AVCHD_SIZE], PKT_SIZE);
+			count++;
+			src += PKT_SIZE+AVCHD_SIZE;
+			read_length -= PKT_SIZE+AVCHD_SIZE;
+		} // while
+		return count*PKT_SIZE + (read_length % (PKT_SIZE+AVCHD_SIZE));
+#endif
+	} // if
+	return this->input->read(this->input, buf, bytes + npkt_read * PKT_SIZE);
+}
+
 static int sync_correct(demux_ts_t*this, uint8_t *buf, int32_t npkt_read) {
 
   int p = 0;
@@ -1517,9 +1573,7 @@
     /* Found sync, fill in */
     memmove(&buf[0], &buf[n + p * PKT_SIZE],
 	    ((PKT_SIZE * (npkt_read - p)) - n));
-    read_length = this->input->read(this->input,
-				    &buf[(PKT_SIZE * (npkt_read - p)) - n],
-				    n + p * PKT_SIZE);
+    read_length = read_block(this, &buf[(PKT_SIZE * (npkt_read - p)) - n], p, n);
     /* FIXME: when read_length is not as required... we now stop demuxing */
     if (read_length != (n + p * PKT_SIZE)) {
       xprintf (this->stream->xine, XINE_VERBOSITY_DEBUG, 
@@ -1562,9 +1616,8 @@
 
     /* NEW: handle read returning less packets than NPKT_PER_READ... */
     do {
-      read_length = this->input->read(this->input, this->buf,
-				      PKT_SIZE * NPKT_PER_READ);
-      if (read_length < 0 || read_length % PKT_SIZE) {
+      read_length = read_block(this, this->buf, NPKT_PER_READ, 0);
+      if (read_length % PKT_SIZE) {
 	xprintf (this->stream->xine, XINE_VERBOSITY_DEBUG, 
 		 "demux_ts: read returned %d bytes (not a multiple of %d!)\n",
 		 read_length, PKT_SIZE);
@@ -2156,40 +2209,45 @@
     }
 }
 
+static int check_sync(uint8_t *buf, int size) {
+  int i;
+  for (i = 1; i <= 10; i++)
+    if (buf[i*size] != 0x47)
+      return 0;
+  return 1;
+}
 
 static demux_plugin_t *open_plugin (demux_class_t *class_gen, 
 				    xine_stream_t *stream, 
 				    input_plugin_t *input) {
   
-  demux_ts_t *this;
+  demux_ts_t *this = 0;
   int         i;
-
+  int is_avchd=0;
   switch (stream->content_detection_method) {
 
   case METHOD_BY_CONTENT: {
-    uint8_t buf[2069];
-    int     i, j;
-    int     try_again, ts_detected;
+//    uint8_t buf[2069];
+    uint8_t buf[188+10*(PKT_SIZE+AVCHD_SIZE)];
+    int     ts_detected = 0;
 
-    if (!_x_demux_read_header(input, buf, 2069))
+//    if (!_x_demux_read_header(input, buf, 2069))
+    if (!_x_demux_read_header(input, buf, sizeof(buf)))
       return NULL;
 
-    ts_detected = 0;
-
-    for (i = 0; i < 188; i++) {
-      try_again = 0;
+    for (i = 0; (i < 188) && !ts_detected; i++) {
       if (buf[i] == 0x47) {
-	for (j = 1; j <= 10; j++) {
-	  if (buf[i + j*188] != 0x47) {
-	    try_again = 1;
-	    break;
-	  }
-	}
-	if (try_again == 0) {
+	if(check_sync(&buf[i], 188)) {
 #ifdef TS_LOG
-	  printf ("demux_ts: found 0x47 pattern at offset %d\n", i);
+          printf ("demux_ts: found 0x47 pattern at offset %d for size 188\n", i);
 #endif
 	  ts_detected = 1;
+        } else if (check_sync(&buf[i], 192)) {
+#ifdef TS_LOG
+          printf ("demux_ts: found 0x47 pattern at offset %d for size 192\n", i);
+#endif
+          ts_detected    = 1;
+          is_avchd       = 1;
 	}
       }
     }
@@ -2205,6 +2263,10 @@
     /* check extension */
     const char *const extensions = class_gen->get_extensions (class_gen);
 
+    if (_x_demux_check_extension (mrl, AVCHD_EXTENSIONS)) {
+        is_avchd=1;
+        break;
+    }
     if (_x_demux_check_extension (mrl, extensions))
       break;
 
@@ -2242,6 +2304,7 @@
   this->stream    = stream;
   this->input     = input;
   this->blockSize = PKT_SIZE;
+  this->is_avchd  = is_avchd;
 
   this->demux_plugin.send_headers      = demux_ts_send_headers;
   this->demux_plugin.send_chunk        = demux_ts_send_chunk;
@@ -2311,7 +2374,7 @@
 }
 
 static const char *get_extensions (demux_class_t *this_gen) {
-  return "ts m2t trp";
+  return "ts m2t trp "AVCHD_EXTENSIONS;
 }
 
 static const char *get_mimetypes (demux_class_t *this_gen) {
diff -urw xine-lib-1.1.11.1-ubuntu/src/demuxers/demux_wav.c xine-lib-1.1.11.1-reel/src/demuxers/demux_wav.c
--- xine-lib-1.1.11.1-ubuntu/src/demuxers/demux_wav.c	2008-03-28 23:50:47.000000000 +0100
+++ xine-lib-1.1.11.1-reel/src/demuxers/demux_wav.c	2009-10-07 12:10:38.561830625 +0200
@@ -115,6 +115,7 @@
   uint32_t chunk_size;
   uint8_t chunk_preamble[8];
   off_t wave_pos;
+  uint32_t wave_size;
 
   /* check the signature */
   if (_x_demux_read_header(this->input, signature, WAV_SIGNATURE_SIZE) != WAV_SIGNATURE_SIZE)
@@ -210,11 +211,16 @@
       buf->size = remaining_sample_bytes;
     remaining_sample_bytes -= buf->size;
 
-    if (this->input->read(this->input, buf->content, buf->size) !=
+    off_t read;
+    if ((read = this->input->read(this->input, buf->content, buf->size)) !=
       buf->size) {
+      if (read == 0) {
       buf->free_buffer(buf);
       this->status = DEMUX_FINISHED;
       break;
+      } else {
+        buf->size = read;
+      }
     }
 
 #if 0
Nur in xine-lib-1.1.11.1-reel/src/demuxers: demux_wav.c~.
Nur in xine-lib-1.1.11.1-reel/src/demuxers: demux_wav.c.orig.
Nur in xine-lib-1.1.11.1-reel/src/demuxers: demux_wav.c.rej.
Nur in xine-lib-1.1.11.1-reel/src/input: input_http.c.orig.
diff -urw xine-lib-1.1.11.1-ubuntu/src/xine-engine/audio_out.h xine-lib-1.1.11.1-reel/src/xine-engine/audio_out.h
--- xine-lib-1.1.11.1-ubuntu/src/xine-engine/audio_out.h	2008-01-23 06:11:54.000000000 +0100
+++ xine-lib-1.1.11.1-reel/src/xine-engine/audio_out.h	2009-10-07 10:50:41.440065140 +0200
@@ -334,7 +334,7 @@
 #define AO_CTRL_FLUSH_BUFFERS	2      
 
 /* above that value audio frames are discarded */
-#define AO_MAX_GAP              15000
+#define AO_MAX_GAP              150000
 
 #ifdef __cplusplus
 }
Nur in xine-lib-1.1.11.1-reel/src/xine-engine: audio_out.h.orig.
diff -urw xine-lib-1.1.11.1-ubuntu/src/xine-engine/load_plugins.c xine-lib-1.1.11.1-reel/src/xine-engine/load_plugins.c
--- xine-lib-1.1.11.1-ubuntu/src/xine-engine/load_plugins.c	2008-03-28 15:24:50.000000000 +0100
+++ xine-lib-1.1.11.1-reel/src/xine-engine/load_plugins.c	2009-10-07 10:50:41.440065140 +0200
@@ -187,7 +187,10 @@
     plugin_node_t *node = xine_sarray_get(decoder_list, list_id);
     const uint32_t *type = ((decoder_info_t *)node->info->special_info)->supported_types;
     int priority = get_decoder_priority(this, node);
-
+    if(priority < 0) {
+      lprintf ("decoder %s disabled\n", node->info->id);
+      continue;
+    }
     lprintf ("mapping decoder %s\n", node->info->id);
 
     while (type && (*type)) {
Nur in xine-lib-1.1.11.1-reel/src/xine-engine: load_plugins.c.orig.
diff -urw xine-lib-1.1.11.1-ubuntu/src/xine-engine/xine.c xine-lib-1.1.11.1-reel/src/xine-engine/xine.c
--- xine-lib-1.1.11.1-ubuntu/src/xine-engine/xine.c	2008-03-28 15:24:50.000000000 +0100
+++ xine-lib-1.1.11.1-reel/src/xine-engine/xine.c	2009-10-07 10:50:41.444071939 +0200
@@ -1384,7 +1384,7 @@
   /* Wait until the first frame produced is displayed
    * see video_out.c
    */
-  wait_first_frame (stream);
+  //wait_first_frame (stream);
   
   xprintf (stream->xine, XINE_VERBOSITY_DEBUG, "play_internal ...done\n");
 
Nur in xine-lib-1.1.11.1-reel/src/xine-engine: xine.c.orig.
