#ifndef SEC_REGOFFS_H
#define SEC_REGOFFS_H 1
/*

  This file is provided under a dual BSD/GPLv2 license.  When using or 
  redistributing this file, you may do so under either license.

  GPL LICENSE SUMMARY

  Copyright(c) 2007-2009 Intel Corporation. All rights reserved.

  This program is free software; you can redistribute it and/or modify 
  it under the terms of version 2 of the GNU General Public License as
  published by the Free Software Foundation.

  This program is distributed in the hope that it will be useful, but 
  WITHOUT ANY WARRANTY; without even the implied warranty of 
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
  General Public License for more details.

  You should have received a copy of the GNU General Public License 
  along with this program; if not, write to the Free Software 
  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
  The full GNU General Public License is included in this distribution 
  in the file called LICENSE.GPL.

  Contact Information:
    Intel Corporation
    2200 Mission College Blvd.
    Santa Clara, CA  97052

  BSD LICENSE 

  Copyright(c) 2007-2009 Intel Corporation. All rights reserved.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions 
  are met:

    * Redistributions of source code must retain the above copyright 
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in 
      the documentation and/or other materials provided with the 
      distribution.
    * Neither the name of Intel Corporation nor the names of its 
      contributors may be used to endorse or promote products derived 
      from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/


/* Module SEC CSR Definitions */
/* WARNING: This file is Machine Generated using sven_csr.c */


#define ROFF_SEC_SEC_STATUS	0x800 /* SEC Status Register */ 
	#define BITFIELD_SEC_SEC_STATUS	 0x0800, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_STATUS */
	#define BLSB_SEC_SEC_STATUS_Reserved0	0
	#define BLSB_SEC_SEC_STATUS_HCU_BUSY	2
	#define BLSB_SEC_SEC_STATUS_CSS_BUSY	3
	#define BLSB_SEC_SEC_STATUS_C2_BUSY	4
	#define BLSB_SEC_SEC_STATUS_AES_BUSY	5
	#define BLSB_SEC_SEC_STATUS_DES_BUSY	6
	#define BLSB_SEC_SEC_STATUS_Reserved1	7
	/* Register Bit Widths for SEC_SEC_STATUS */
	#define BWID_SEC_SEC_STATUS_Reserved0	2
	#define BWID_SEC_SEC_STATUS_HCU_BUSY	1
	#define BWID_SEC_SEC_STATUS_CSS_BUSY	1
	#define BWID_SEC_SEC_STATUS_C2_BUSY	1
	#define BWID_SEC_SEC_STATUS_AES_BUSY	1
	#define BWID_SEC_SEC_STATUS_DES_BUSY	1
	#define BWID_SEC_SEC_STATUS_Reserved1	25
	/* Register Bit MASKS for SEC_SEC_STATUS */
	#define BMSK_SEC_SEC_STATUS_Reserved0	0x00000003 /*  */
	#define BMSK_SEC_SEC_STATUS_HCU_BUSY	(1<<2) /* == 0x00000004:  */
	#define BMSK_SEC_SEC_STATUS_CSS_BUSY	(1<<3) /* == 0x00000008:  */
	#define BMSK_SEC_SEC_STATUS_C2_BUSY	(1<<4) /* == 0x00000010:  */
	#define BMSK_SEC_SEC_STATUS_AES_BUSY	(1<<5) /* == 0x00000020:  */
	#define BMSK_SEC_SEC_STATUS_DES_BUSY	(1<<6) /* == 0x00000040:  */
	#define BMSK_SEC_SEC_STATUS_Reserved1	0xffffff80 /*  */
	/* Register BITFIELD for SEC_SEC_STATUS - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_STATUS_Reserved0	 0x0800, 0, 2, 0x00000003
	#define BITFIELD_SEC_SEC_STATUS_HCU_BUSY	 0x0800, 2, 1, 0x00000004
	#define BITFIELD_SEC_SEC_STATUS_CSS_BUSY	 0x0800, 3, 1, 0x00000008
	#define BITFIELD_SEC_SEC_STATUS_C2_BUSY	 0x0800, 4, 1, 0x00000010
	#define BITFIELD_SEC_SEC_STATUS_AES_BUSY	 0x0800, 5, 1, 0x00000020
	#define BITFIELD_SEC_SEC_STATUS_DES_BUSY	 0x0800, 6, 1, 0x00000040
	#define BITFIELD_SEC_SEC_STATUS_Reserved1	 0x0800, 7, 25, 0xffffff80
#define ROFF_SEC_SEC_CONTROL	0x804 /* SEC Control Register */ 
	#define BITFIELD_SEC_SEC_CONTROL	 0x0804, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_CONTROL */
	#define BLSB_SEC_SEC_CONTROL_HOST_ENABLE	0
	#define BLSB_SEC_SEC_CONTROL_Reserved0	1
	#define BLSB_SEC_SEC_CONTROL_EXP_WR_ENABLE	3
	#define BLSB_SEC_SEC_CONTROL_Reserved1	4
	/* Register Bit Widths for SEC_SEC_CONTROL */
	#define BWID_SEC_SEC_CONTROL_HOST_ENABLE	1
	#define BWID_SEC_SEC_CONTROL_Reserved0	2
	#define BWID_SEC_SEC_CONTROL_EXP_WR_ENABLE	1
	#define BWID_SEC_SEC_CONTROL_Reserved1	28
	/* Register Bit MASKS for SEC_SEC_CONTROL */
	#define BMSK_SEC_SEC_CONTROL_HOST_ENABLE	(1<<0) /* == 0x00000001:  */
	#define BMSK_SEC_SEC_CONTROL_Reserved0	0x00000006 /*  */
	#define BMSK_SEC_SEC_CONTROL_EXP_WR_ENABLE	(1<<3) /* == 0x00000008:  */
	#define BMSK_SEC_SEC_CONTROL_Reserved1	0xfffffff0 /*  */
	/* Register BITFIELD for SEC_SEC_CONTROL - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_CONTROL_HOST_ENABLE	 0x0804, 0, 1, 0x00000001
	#define BITFIELD_SEC_SEC_CONTROL_Reserved0	 0x0804, 1, 2, 0x00000006
	#define BITFIELD_SEC_SEC_CONTROL_EXP_WR_ENABLE	 0x0804, 3, 1, 0x00000008
	#define BITFIELD_SEC_SEC_CONTROL_Reserved1	 0x0804, 4, 28, 0xfffffff0
#define ROFF_SEC_SEC_CONFIG	0x80c /* SEC Config Register */ 
	#define BITFIELD_SEC_SEC_CONFIG	 0x080c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_CONFIG */
	#define BLSB_SEC_SEC_CONFIG_EAU_PARITY_ODD	0
	#define BLSB_SEC_SEC_CONFIG_Reserved2	1
	/* Register Bit Widths for SEC_SEC_CONFIG */
	#define BWID_SEC_SEC_CONFIG_EAU_PARITY_ODD	1
	#define BWID_SEC_SEC_CONFIG_Reserved2	31
	/* Register Bit MASKS for SEC_SEC_CONFIG */
	#define BMSK_SEC_SEC_CONFIG_EAU_PARITY_ODD	(1<<0) /* == 0x00000001:  */
	#define BMSK_SEC_SEC_CONFIG_Reserved2	0xfffffffe /*  */
	/* Register BITFIELD for SEC_SEC_CONFIG - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_CONFIG_EAU_PARITY_ODD	 0x080c, 0, 1, 0x00000001
	#define BITFIELD_SEC_SEC_CONFIG_Reserved2	 0x080c, 1, 31, 0xfffffffe
#define ROFF_SEC_SEC_THREAT	0x810 /* SEC Threat Register */ 
	#define BITFIELD_SEC_SEC_THREAT	 0x0810, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_THREAT */
	#define BLSB_SEC_SEC_THREAT_SYSTEM_RESET	0
	#define BLSB_SEC_SEC_THREAT_Reserved3	1
	/* Register Bit Widths for SEC_SEC_THREAT */
	#define BWID_SEC_SEC_THREAT_SYSTEM_RESET	1
	#define BWID_SEC_SEC_THREAT_Reserved3	31
	/* Register Bit MASKS for SEC_SEC_THREAT */
	#define BMSK_SEC_SEC_THREAT_SYSTEM_RESET	(1<<0) /* == 0x00000001:  */
	#define BMSK_SEC_SEC_THREAT_Reserved3	0xfffffffe /*  */
	/* Register BITFIELD for SEC_SEC_THREAT - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_THREAT_SYSTEM_RESET	 0x0810, 0, 1, 0x00000001
	#define BITFIELD_SEC_SEC_THREAT_Reserved3	 0x0810, 1, 31, 0xfffffffe
#define ROFF_SEC_SEC_INT_MASK	0xa00 /* SEC Interrupt Mask */ 
	#define BITFIELD_SEC_SEC_INT_MASK	 0x0a00, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_INT_MASK */
	#define BLSB_SEC_SEC_INT_MASK_Reserved4	0
	#define BLSB_SEC_SEC_INT_MASK_INT_MASK	1
	#define BLSB_SEC_SEC_INT_MASK_Reserved5	16
	/* Register Bit Widths for SEC_SEC_INT_MASK */
	#define BWID_SEC_SEC_INT_MASK_Reserved4	1
	#define BWID_SEC_SEC_INT_MASK_INT_MASK	15
	#define BWID_SEC_SEC_INT_MASK_Reserved5	16
	/* Register Bit MASKS for SEC_SEC_INT_MASK */
	#define BMSK_SEC_SEC_INT_MASK_Reserved4	(1<<0) /* == 0x00000001:  */
	#define BMSK_SEC_SEC_INT_MASK_INT_MASK	0x0000fffe /*  */
	#define BMSK_SEC_SEC_INT_MASK_Reserved5	0xffff0000 /*  */
	/* Register BITFIELD for SEC_SEC_INT_MASK - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_INT_MASK_Reserved4	 0x0a00, 0, 1, 0x00000001
	#define BITFIELD_SEC_SEC_INT_MASK_INT_MASK	 0x0a00, 1, 15, 0x0000fffe
	#define BITFIELD_SEC_SEC_INT_MASK_Reserved5	 0x0a00, 16, 16, 0xffff0000
#define ROFF_SEC_SEC_INT_PENDING	0xa04 /* SEC Interrupt Pending */ 
	#define BITFIELD_SEC_SEC_INT_PENDING	 0x0a04, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_INT_PENDING */
	#define BLSB_SEC_SEC_INT_PENDING_Reserved6	0
	#define BLSB_SEC_SEC_INT_PENDING_INT_PENDING	1
	#define BLSB_SEC_SEC_INT_PENDING_Reserved7	16
	/* Register Bit Widths for SEC_SEC_INT_PENDING */
	#define BWID_SEC_SEC_INT_PENDING_Reserved6	1
	#define BWID_SEC_SEC_INT_PENDING_INT_PENDING	15
	#define BWID_SEC_SEC_INT_PENDING_Reserved7	16
	/* Register Bit MASKS for SEC_SEC_INT_PENDING */
	#define BMSK_SEC_SEC_INT_PENDING_Reserved6	(1<<0) /* == 0x00000001:  */
	#define BMSK_SEC_SEC_INT_PENDING_INT_PENDING	0x0000fffe /*  */
	#define BMSK_SEC_SEC_INT_PENDING_Reserved7	0xffff0000 /*  */
	/* Register BITFIELD for SEC_SEC_INT_PENDING - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_INT_PENDING_Reserved6	 0x0a04, 0, 1, 0x00000001
	#define BITFIELD_SEC_SEC_INT_PENDING_INT_PENDING	 0x0a04, 1, 15, 0x0000fffe
	#define BITFIELD_SEC_SEC_INT_PENDING_Reserved7	 0x0a04, 16, 16, 0xffff0000
#define ROFF_SEC_SEC_INT_FORCE	0xa08 /* SEC Interrupt Force */ 
	#define BITFIELD_SEC_SEC_INT_FORCE	 0x0a08, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_INT_FORCE */
	#define BLSB_SEC_SEC_INT_FORCE_Reserved8	0
	#define BLSB_SEC_SEC_INT_FORCE_INT_FORCE	1
	#define BLSB_SEC_SEC_INT_FORCE_Reserved9	16
	/* Register Bit Widths for SEC_SEC_INT_FORCE */
	#define BWID_SEC_SEC_INT_FORCE_Reserved8	1
	#define BWID_SEC_SEC_INT_FORCE_INT_FORCE	15
	#define BWID_SEC_SEC_INT_FORCE_Reserved9	16
	/* Register Bit MASKS for SEC_SEC_INT_FORCE */
	#define BMSK_SEC_SEC_INT_FORCE_Reserved8	(1<<0) /* == 0x00000001:  */
	#define BMSK_SEC_SEC_INT_FORCE_INT_FORCE	0x0000fffe /*  */
	#define BMSK_SEC_SEC_INT_FORCE_Reserved9	0xffff0000 /*  */
	/* Register BITFIELD for SEC_SEC_INT_FORCE - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_INT_FORCE_Reserved8	 0x0a08, 0, 1, 0x00000001
	#define BITFIELD_SEC_SEC_INT_FORCE_INT_FORCE	 0x0a08, 1, 15, 0x0000fffe
	#define BITFIELD_SEC_SEC_INT_FORCE_Reserved9	 0x0a08, 16, 16, 0xffff0000
#define ROFF_SEC_SEC_INT_CLEAR_PENDING	0xa0c /* SEC Interrupt Clear Pending */ 
	#define BITFIELD_SEC_SEC_INT_CLEAR_PENDING	 0x0a0c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_INT_CLEAR_PENDING */
	#define BLSB_SEC_SEC_INT_CLEAR_PENDING_INT_CLEAR_PENDING	0
	/* Register Bit Widths for SEC_SEC_INT_CLEAR_PENDING */
	#define BWID_SEC_SEC_INT_CLEAR_PENDING_INT_CLEAR_PENDING	32
	/* Register Bit MASKS for SEC_SEC_INT_CLEAR_PENDING */
	#define BMSK_SEC_SEC_INT_CLEAR_PENDING_INT_CLEAR_PENDING	0x00000000 /*  */
	/* Register BITFIELD for SEC_SEC_INT_CLEAR_PENDING - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_INT_CLEAR_PENDING_INT_CLEAR_PENDING	 0x0a0c, 0, 32, 0x00000000
#define ROFF_SEC_SEC_INT_STATUS	0xa10 /* SEC Interrupt Status */ 
	#define BITFIELD_SEC_SEC_INT_STATUS	 0x0a10, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_INT_STATUS */
	#define BLSB_SEC_SEC_INT_STATUS_TMR_MTB_INT	31
	#define BLSB_SEC_SEC_INT_STATUS_TMR1_INT	30
	#define BLSB_SEC_SEC_INT_STATUS_TMR0_INT	29
	#define BLSB_SEC_SEC_INT_STATUS_EAU_PERR	28
	#define BLSB_SEC_SEC_INT_STATUS_RNG_FIFO_FULL	27
	#define BLSB_SEC_SEC_INT_STATUS_Reserved10	26
	#define BLSB_SEC_SEC_INT_STATUS_EAU_INT	25
	#define BLSB_SEC_SEC_INT_STATUS_HCU_DONE	24
	#define BLSB_SEC_SEC_INT_STATUS_CSS_DONE	23
	#define BLSB_SEC_SEC_INT_STATUS_C2_DONE	22
	#define BLSB_SEC_SEC_INT_STATUS_AES_DONE	21
	#define BLSB_SEC_SEC_INT_STATUS_DES_DONE	20
	#define BLSB_SEC_SEC_INT_STATUS_Reserved11	17
	#define BLSB_SEC_SEC_INT_STATUS_SRC_HCU_INT	16
	#define BLSB_SEC_SEC_INT_STATUS_SRC_CSS_INT	15
	#define BLSB_SEC_SEC_INT_STATUS_SRC_C2_INT	14
	#define BLSB_SEC_SEC_INT_STATUS_SRC_AES_INT	13
	#define BLSB_SEC_SEC_INT_STATUS_SRC_DES_INT	12
	#define BLSB_SEC_SEC_INT_STATUS_Reserved12	9
	#define BLSB_SEC_SEC_INT_STATUS_DST_HCU_INT	8
	#define BLSB_SEC_SEC_INT_STATUS_DST_CSS_INT	7
	#define BLSB_SEC_SEC_INT_STATUS_DST_C2_INT	6
	#define BLSB_SEC_SEC_INT_STATUS_DST_AES_INT	5
	#define BLSB_SEC_SEC_INT_STATUS_DST_DES_INT	4
	#define BLSB_SEC_SEC_INT_STATUS_Reserved13	2
	#define BLSB_SEC_SEC_INT_STATUS_IPC_OUTPUT_READY_INT	1
	#define BLSB_SEC_SEC_INT_STATUS_IPC_INPUT_DOORBELL_INT	0
	/* Register Bit Widths for SEC_SEC_INT_STATUS */
	#define BWID_SEC_SEC_INT_STATUS_TMR_MTB_INT	1
	#define BWID_SEC_SEC_INT_STATUS_TMR1_INT	1
	#define BWID_SEC_SEC_INT_STATUS_TMR0_INT	1
	#define BWID_SEC_SEC_INT_STATUS_EAU_PERR	1
	#define BWID_SEC_SEC_INT_STATUS_RNG_FIFO_FULL	1
	#define BWID_SEC_SEC_INT_STATUS_Reserved10	1
	#define BWID_SEC_SEC_INT_STATUS_EAU_INT	1
	#define BWID_SEC_SEC_INT_STATUS_HCU_DONE	1
	#define BWID_SEC_SEC_INT_STATUS_CSS_DONE	1
	#define BWID_SEC_SEC_INT_STATUS_C2_DONE	1
	#define BWID_SEC_SEC_INT_STATUS_AES_DONE	1
	#define BWID_SEC_SEC_INT_STATUS_DES_DONE	1
	#define BWID_SEC_SEC_INT_STATUS_Reserved11	3
	#define BWID_SEC_SEC_INT_STATUS_SRC_HCU_INT	1
	#define BWID_SEC_SEC_INT_STATUS_SRC_CSS_INT	1
	#define BWID_SEC_SEC_INT_STATUS_SRC_C2_INT	1
	#define BWID_SEC_SEC_INT_STATUS_SRC_AES_INT	1
	#define BWID_SEC_SEC_INT_STATUS_SRC_DES_INT	1
	#define BWID_SEC_SEC_INT_STATUS_Reserved12	3
	#define BWID_SEC_SEC_INT_STATUS_DST_HCU_INT	1
	#define BWID_SEC_SEC_INT_STATUS_DST_CSS_INT	1
	#define BWID_SEC_SEC_INT_STATUS_DST_C2_INT	1
	#define BWID_SEC_SEC_INT_STATUS_DST_AES_INT	1
	#define BWID_SEC_SEC_INT_STATUS_DST_DES_INT	1
	#define BWID_SEC_SEC_INT_STATUS_Reserved13	2
	#define BWID_SEC_SEC_INT_STATUS_IPC_OUTPUT_READY_INT	1
	#define BWID_SEC_SEC_INT_STATUS_IPC_INPUT_DOORBELL_INT	1
	/* Register Bit MASKS for SEC_SEC_INT_STATUS */
	#define BMSK_SEC_SEC_INT_STATUS_TMR_MTB_INT	(1<<31) /* == 0x80000000:  */
	#define BMSK_SEC_SEC_INT_STATUS_TMR1_INT	(1<<30) /* == 0x40000000:  */
	#define BMSK_SEC_SEC_INT_STATUS_TMR0_INT	(1<<29) /* == 0x20000000:  */
	#define BMSK_SEC_SEC_INT_STATUS_EAU_PERR	(1<<28) /* == 0x10000000:  */
	#define BMSK_SEC_SEC_INT_STATUS_RNG_FIFO_FULL	(1<<27) /* == 0x08000000:  */
	#define BMSK_SEC_SEC_INT_STATUS_Reserved10	(1<<26) /* == 0x04000000:  */
	#define BMSK_SEC_SEC_INT_STATUS_EAU_INT	(1<<25) /* == 0x02000000:  */
	#define BMSK_SEC_SEC_INT_STATUS_HCU_DONE	(1<<24) /* == 0x01000000:  */
	#define BMSK_SEC_SEC_INT_STATUS_CSS_DONE	(1<<23) /* == 0x00800000:  */
	#define BMSK_SEC_SEC_INT_STATUS_C2_DONE	(1<<22) /* == 0x00400000:  */
	#define BMSK_SEC_SEC_INT_STATUS_AES_DONE	(1<<21) /* == 0x00200000:  */
	#define BMSK_SEC_SEC_INT_STATUS_DES_DONE	(1<<20) /* == 0x00100000:  */
	#define BMSK_SEC_SEC_INT_STATUS_Reserved11	0x000e0000 /*  */
	#define BMSK_SEC_SEC_INT_STATUS_SRC_HCU_INT	(1<<16) /* == 0x00010000:  */
	#define BMSK_SEC_SEC_INT_STATUS_SRC_CSS_INT	(1<<15) /* == 0x00008000:  */
	#define BMSK_SEC_SEC_INT_STATUS_SRC_C2_INT	(1<<14) /* == 0x00004000:  */
	#define BMSK_SEC_SEC_INT_STATUS_SRC_AES_INT	(1<<13) /* == 0x00002000:  */
	#define BMSK_SEC_SEC_INT_STATUS_SRC_DES_INT	(1<<12) /* == 0x00001000:  */
	#define BMSK_SEC_SEC_INT_STATUS_Reserved12	0x00000e00 /*  */
	#define BMSK_SEC_SEC_INT_STATUS_DST_HCU_INT	(1<<8) /* == 0x00000100:  */
	#define BMSK_SEC_SEC_INT_STATUS_DST_CSS_INT	(1<<7) /* == 0x00000080:  */
	#define BMSK_SEC_SEC_INT_STATUS_DST_C2_INT	(1<<6) /* == 0x00000040:  */
	#define BMSK_SEC_SEC_INT_STATUS_DST_AES_INT	(1<<5) /* == 0x00000020:  */
	#define BMSK_SEC_SEC_INT_STATUS_DST_DES_INT	(1<<4) /* == 0x00000010:  */
	#define BMSK_SEC_SEC_INT_STATUS_Reserved13	0x0000000c /*  */
	#define BMSK_SEC_SEC_INT_STATUS_IPC_OUTPUT_READY_INT	(1<<1) /* == 0x00000002:  */
	#define BMSK_SEC_SEC_INT_STATUS_IPC_INPUT_DOORBELL_INT	(1<<0) /* == 0x00000001:  */
	/* Register BITFIELD for SEC_SEC_INT_STATUS - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_INT_STATUS_TMR_MTB_INT	 0x0a10, 31, 1, 0x80000000
	#define BITFIELD_SEC_SEC_INT_STATUS_TMR1_INT	 0x0a10, 30, 1, 0x40000000
	#define BITFIELD_SEC_SEC_INT_STATUS_TMR0_INT	 0x0a10, 29, 1, 0x20000000
	#define BITFIELD_SEC_SEC_INT_STATUS_EAU_PERR	 0x0a10, 28, 1, 0x10000000
	#define BITFIELD_SEC_SEC_INT_STATUS_RNG_FIFO_FULL	 0x0a10, 27, 1, 0x08000000
	#define BITFIELD_SEC_SEC_INT_STATUS_Reserved10	 0x0a10, 26, 1, 0x04000000
	#define BITFIELD_SEC_SEC_INT_STATUS_EAU_INT	 0x0a10, 25, 1, 0x02000000
	#define BITFIELD_SEC_SEC_INT_STATUS_HCU_DONE	 0x0a10, 24, 1, 0x01000000
	#define BITFIELD_SEC_SEC_INT_STATUS_CSS_DONE	 0x0a10, 23, 1, 0x00800000
	#define BITFIELD_SEC_SEC_INT_STATUS_C2_DONE	 0x0a10, 22, 1, 0x00400000
	#define BITFIELD_SEC_SEC_INT_STATUS_AES_DONE	 0x0a10, 21, 1, 0x00200000
	#define BITFIELD_SEC_SEC_INT_STATUS_DES_DONE	 0x0a10, 20, 1, 0x00100000
	#define BITFIELD_SEC_SEC_INT_STATUS_Reserved11	 0x0a10, 17, 3, 0x000e0000
	#define BITFIELD_SEC_SEC_INT_STATUS_SRC_HCU_INT	 0x0a10, 16, 1, 0x00010000
	#define BITFIELD_SEC_SEC_INT_STATUS_SRC_CSS_INT	 0x0a10, 15, 1, 0x00008000
	#define BITFIELD_SEC_SEC_INT_STATUS_SRC_C2_INT	 0x0a10, 14, 1, 0x00004000
	#define BITFIELD_SEC_SEC_INT_STATUS_SRC_AES_INT	 0x0a10, 13, 1, 0x00002000
	#define BITFIELD_SEC_SEC_INT_STATUS_SRC_DES_INT	 0x0a10, 12, 1, 0x00001000
	#define BITFIELD_SEC_SEC_INT_STATUS_Reserved12	 0x0a10, 9, 3, 0x00000e00
	#define BITFIELD_SEC_SEC_INT_STATUS_DST_HCU_INT	 0x0a10, 8, 1, 0x00000100
	#define BITFIELD_SEC_SEC_INT_STATUS_DST_CSS_INT	 0x0a10, 7, 1, 0x00000080
	#define BITFIELD_SEC_SEC_INT_STATUS_DST_C2_INT	 0x0a10, 6, 1, 0x00000040
	#define BITFIELD_SEC_SEC_INT_STATUS_DST_AES_INT	 0x0a10, 5, 1, 0x00000020
	#define BITFIELD_SEC_SEC_INT_STATUS_DST_DES_INT	 0x0a10, 4, 1, 0x00000010
	#define BITFIELD_SEC_SEC_INT_STATUS_Reserved13	 0x0a10, 2, 2, 0x0000000c
	#define BITFIELD_SEC_SEC_INT_STATUS_IPC_OUTPUT_READY_INT	 0x0a10, 1, 1, 0x00000002
	#define BITFIELD_SEC_SEC_INT_STATUS_IPC_INPUT_DOORBELL_INT	 0x0a10, 0, 1, 0x00000001
#define ROFF_SEC_SEC_INT_STATUS_MASK	0xa14 /* SEC Interrupt Status Mask */ 
	#define BITFIELD_SEC_SEC_INT_STATUS_MASK	 0x0a14, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_INT_STATUS_MASK */
	#define BLSB_SEC_SEC_INT_STATUS_MASK_INT_STATUS_MASK	0
	/* Register Bit Widths for SEC_SEC_INT_STATUS_MASK */
	#define BWID_SEC_SEC_INT_STATUS_MASK_INT_STATUS_MASK	32
	/* Register Bit MASKS for SEC_SEC_INT_STATUS_MASK */
	#define BMSK_SEC_SEC_INT_STATUS_MASK_INT_STATUS_MASK	0x00000000 /*  */
	/* Register BITFIELD for SEC_SEC_INT_STATUS_MASK - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_INT_STATUS_MASK_INT_STATUS_MASK	 0x0a14, 0, 32, 0x00000000
#define ROFF_SEC_SEC_INT_NM_STATUS	0xa18 /* SEC Interrupt NM Status */ 
	#define BITFIELD_SEC_SEC_INT_NM_STATUS	 0x0a18, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_INT_NM_STATUS */
	#define BLSB_SEC_SEC_INT_NM_STATUS_Reserved14	6
	#define BLSB_SEC_SEC_INT_NM_STATUS_TMR_WDOG_TIMEOUT	5
	#define BLSB_SEC_SEC_INT_NM_STATUS_TMR_MTB_OVERFLOW	4
	#define BLSB_SEC_SEC_INT_NM_STATUS_Reserved15	3
	#define BLSB_SEC_SEC_INT_NM_STATUS_DES_HKEY_ERROR	2
	#define BLSB_SEC_SEC_INT_NM_STATUS_AES_HKEY_ERROR	1
	#define BLSB_SEC_SEC_INT_NM_STATUS_ILLEGAL_MEM_ACCESS	0
	/* Register Bit Widths for SEC_SEC_INT_NM_STATUS */
	#define BWID_SEC_SEC_INT_NM_STATUS_Reserved14	26
	#define BWID_SEC_SEC_INT_NM_STATUS_TMR_WDOG_TIMEOUT	1
	#define BWID_SEC_SEC_INT_NM_STATUS_TMR_MTB_OVERFLOW	1
	#define BWID_SEC_SEC_INT_NM_STATUS_Reserved15	1
	#define BWID_SEC_SEC_INT_NM_STATUS_DES_HKEY_ERROR	1
	#define BWID_SEC_SEC_INT_NM_STATUS_AES_HKEY_ERROR	1
	#define BWID_SEC_SEC_INT_NM_STATUS_ILLEGAL_MEM_ACCESS	1
	/* Register Bit MASKS for SEC_SEC_INT_NM_STATUS */
	#define BMSK_SEC_SEC_INT_NM_STATUS_Reserved14	0xffffffc0 /*  */
	#define BMSK_SEC_SEC_INT_NM_STATUS_TMR_WDOG_TIMEOUT	(1<<5) /* == 0x00000020:  */
	#define BMSK_SEC_SEC_INT_NM_STATUS_TMR_MTB_OVERFLOW	(1<<4) /* == 0x00000010:  */
	#define BMSK_SEC_SEC_INT_NM_STATUS_Reserved15	(1<<3) /* == 0x00000008:  */
	#define BMSK_SEC_SEC_INT_NM_STATUS_DES_HKEY_ERROR	(1<<2) /* == 0x00000004:  */
	#define BMSK_SEC_SEC_INT_NM_STATUS_AES_HKEY_ERROR	(1<<1) /* == 0x00000002:  */
	#define BMSK_SEC_SEC_INT_NM_STATUS_ILLEGAL_MEM_ACCESS	(1<<0) /* == 0x00000001:  */
	/* Register BITFIELD for SEC_SEC_INT_NM_STATUS - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_INT_NM_STATUS_Reserved14	 0x0a18, 6, 26, 0xffffffc0
	#define BITFIELD_SEC_SEC_INT_NM_STATUS_TMR_WDOG_TIMEOUT	 0x0a18, 5, 1, 0x00000020
	#define BITFIELD_SEC_SEC_INT_NM_STATUS_TMR_MTB_OVERFLOW	 0x0a18, 4, 1, 0x00000010
	#define BITFIELD_SEC_SEC_INT_NM_STATUS_Reserved15	 0x0a18, 3, 1, 0x00000008
	#define BITFIELD_SEC_SEC_INT_NM_STATUS_DES_HKEY_ERROR	 0x0a18, 2, 1, 0x00000004
	#define BITFIELD_SEC_SEC_INT_NM_STATUS_AES_HKEY_ERROR	 0x0a18, 1, 1, 0x00000002
	#define BITFIELD_SEC_SEC_INT_NM_STATUS_ILLEGAL_MEM_ACCESS	 0x0a18, 0, 1, 0x00000001
#define ROFF_SEC_SEC_INT_NM_STATUS_MASK	0xa18 /* SEC Interrupt NM Status Mask */ 
	#define BITFIELD_SEC_SEC_INT_NM_STATUS_MASK	 0x0a18, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_INT_NM_STATUS_MASK */
	#define BLSB_SEC_SEC_INT_NM_STATUS_MASK_INT_NM_STATUS_MASK	0
	/* Register Bit Widths for SEC_SEC_INT_NM_STATUS_MASK */
	#define BWID_SEC_SEC_INT_NM_STATUS_MASK_INT_NM_STATUS_MASK	32
	/* Register Bit MASKS for SEC_SEC_INT_NM_STATUS_MASK */
	#define BMSK_SEC_SEC_INT_NM_STATUS_MASK_INT_NM_STATUS_MASK	0x00000000 /*  */
	/* Register BITFIELD for SEC_SEC_INT_NM_STATUS_MASK - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_INT_NM_STATUS_MASK_INT_NM_STATUS_MASK	 0x0a18, 0, 32, 0x00000000
#define ROFF_SEC_SEC_IPC_INPUT_DOORBELL	0x400 /* IPC Input Doorbell */ 
	#define BITFIELD_SEC_SEC_IPC_INPUT_DOORBELL	 0x0400, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_IPC_INPUT_DOORBELL */
	#define BLSB_SEC_SEC_IPC_INPUT_DOORBELL_IPC_INPUT_DOORBELL	0
	/* Register Bit Widths for SEC_SEC_IPC_INPUT_DOORBELL */
	#define BWID_SEC_SEC_IPC_INPUT_DOORBELL_IPC_INPUT_DOORBELL	32
	/* Register Bit MASKS for SEC_SEC_IPC_INPUT_DOORBELL */
	#define BMSK_SEC_SEC_IPC_INPUT_DOORBELL_IPC_INPUT_DOORBELL	0x00000000 /*  */
	/* Register BITFIELD for SEC_SEC_IPC_INPUT_DOORBELL - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_IPC_INPUT_DOORBELL_IPC_INPUT_DOORBELL	 0x0400, 0, 32, 0x00000000
#define ROFF_SEC_SEC_IPC_OUTPUT_DOORBELL	0x404 /* IPC Output Doorbell */ 
	#define BITFIELD_SEC_SEC_IPC_OUTPUT_DOORBELL	 0x0404, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_IPC_OUTPUT_DOORBELL */
	#define BLSB_SEC_SEC_IPC_OUTPUT_DOORBELL_IPC_OUTPUT_DOORBELL	0
	/* Register Bit Widths for SEC_SEC_IPC_OUTPUT_DOORBELL */
	#define BWID_SEC_SEC_IPC_OUTPUT_DOORBELL_IPC_OUTPUT_DOORBELL	32
	/* Register Bit MASKS for SEC_SEC_IPC_OUTPUT_DOORBELL */
	#define BMSK_SEC_SEC_IPC_OUTPUT_DOORBELL_IPC_OUTPUT_DOORBELL	0x00000000 /*  */
	/* Register BITFIELD for SEC_SEC_IPC_OUTPUT_DOORBELL - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_IPC_OUTPUT_DOORBELL_IPC_OUTPUT_DOORBELL	 0x0404, 0, 32, 0x00000000
#define ROFF_SEC_SEC_IPC_INPUT_STATUS	0x408 /* IPC Input Status */ 
	#define BITFIELD_SEC_SEC_IPC_INPUT_STATUS	 0x0408, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_IPC_INPUT_STATUS */
	#define BLSB_SEC_SEC_IPC_INPUT_STATUS_IPC_INPUT_READY	0
	#define BLSB_SEC_SEC_IPC_INPUT_STATUS_Reserved16	1
	/* Register Bit Widths for SEC_SEC_IPC_INPUT_STATUS */
	#define BWID_SEC_SEC_IPC_INPUT_STATUS_IPC_INPUT_READY	1
	#define BWID_SEC_SEC_IPC_INPUT_STATUS_Reserved16	31
	/* Register Bit MASKS for SEC_SEC_IPC_INPUT_STATUS */
	#define BMSK_SEC_SEC_IPC_INPUT_STATUS_IPC_INPUT_READY	(1<<0) /* == 0x00000001:  */
	#define BMSK_SEC_SEC_IPC_INPUT_STATUS_Reserved16	0xfffffffe /*  */
	/* Register BITFIELD for SEC_SEC_IPC_INPUT_STATUS - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_IPC_INPUT_STATUS_IPC_INPUT_READY	 0x0408, 0, 1, 0x00000001
	#define BITFIELD_SEC_SEC_IPC_INPUT_STATUS_Reserved16	 0x0408, 1, 31, 0xfffffffe
#define ROFF_SEC_SEC_IPC_OUTPUT_STATUS	0x40c /* IPC Output Status */ 
	#define BITFIELD_SEC_SEC_IPC_OUTPUT_STATUS	 0x040c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_IPC_OUTPUT_STATUS */
	#define BLSB_SEC_SEC_IPC_OUTPUT_STATUS_IPC_OUTPUT_READY	0
	#define BLSB_SEC_SEC_IPC_OUTPUT_STATUS_Reserved17	1
	/* Register Bit Widths for SEC_SEC_IPC_OUTPUT_STATUS */
	#define BWID_SEC_SEC_IPC_OUTPUT_STATUS_IPC_OUTPUT_READY	1
	#define BWID_SEC_SEC_IPC_OUTPUT_STATUS_Reserved17	31
	/* Register Bit MASKS for SEC_SEC_IPC_OUTPUT_STATUS */
	#define BMSK_SEC_SEC_IPC_OUTPUT_STATUS_IPC_OUTPUT_READY	(1<<0) /* == 0x00000001:  */
	#define BMSK_SEC_SEC_IPC_OUTPUT_STATUS_Reserved17	0xfffffffe /*  */
	/* Register BITFIELD for SEC_SEC_IPC_OUTPUT_STATUS - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_IPC_OUTPUT_STATUS_IPC_OUTPUT_READY	 0x040c, 0, 1, 0x00000001
	#define BITFIELD_SEC_SEC_IPC_OUTPUT_STATUS_Reserved17	 0x040c, 1, 31, 0xfffffffe
#define ROFF_SEC_SEC_IPC_HOST_INT_STATUS	0x410 /* IPC Host Interrupt Status */ 
	#define BITFIELD_SEC_SEC_IPC_HOST_INT_STATUS	 0x0410, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_IPC_HOST_INT_STATUS */
	#define BLSB_SEC_SEC_IPC_HOST_INT_STATUS_Reserved18	22
	#define BLSB_SEC_SEC_IPC_HOST_INT_STATUS_TMR_WDOG_TIMEOUT	21
	#define BLSB_SEC_SEC_IPC_HOST_INT_STATUS_TMR_MTB_OVERFLOW	20
	#define BLSB_SEC_SEC_IPC_HOST_INT_STATUS_Reserved19	19
	#define BLSB_SEC_SEC_IPC_HOST_INT_STATUS_DES_HKEY_ERROR	18
	#define BLSB_SEC_SEC_IPC_HOST_INT_STATUS_AES_HKEY_ERROR	17
	#define BLSB_SEC_SEC_IPC_HOST_INT_STATUS_ILLEGAL_MEM_ACCESS	16
	#define BLSB_SEC_SEC_IPC_HOST_INT_STATUS_Reserved20	2
	#define BLSB_SEC_SEC_IPC_HOST_INT_STATUS_IPC_INPUT_READY_INT	1
	#define BLSB_SEC_SEC_IPC_HOST_INT_STATUS_IPC_OUTPUT_DOORBELL_INT	0
	/* Register Bit Widths for SEC_SEC_IPC_HOST_INT_STATUS */
	#define BWID_SEC_SEC_IPC_HOST_INT_STATUS_Reserved18	10
	#define BWID_SEC_SEC_IPC_HOST_INT_STATUS_TMR_WDOG_TIMEOUT	1
	#define BWID_SEC_SEC_IPC_HOST_INT_STATUS_TMR_MTB_OVERFLOW	1
	#define BWID_SEC_SEC_IPC_HOST_INT_STATUS_Reserved19	1
	#define BWID_SEC_SEC_IPC_HOST_INT_STATUS_DES_HKEY_ERROR	1
	#define BWID_SEC_SEC_IPC_HOST_INT_STATUS_AES_HKEY_ERROR	1
	#define BWID_SEC_SEC_IPC_HOST_INT_STATUS_ILLEGAL_MEM_ACCESS	1
	#define BWID_SEC_SEC_IPC_HOST_INT_STATUS_Reserved20	14
	#define BWID_SEC_SEC_IPC_HOST_INT_STATUS_IPC_INPUT_READY_INT	1
	#define BWID_SEC_SEC_IPC_HOST_INT_STATUS_IPC_OUTPUT_DOORBELL_INT	1
	/* Register Bit MASKS for SEC_SEC_IPC_HOST_INT_STATUS */
	#define BMSK_SEC_SEC_IPC_HOST_INT_STATUS_Reserved18	0xffc00000 /*  */
	#define BMSK_SEC_SEC_IPC_HOST_INT_STATUS_TMR_WDOG_TIMEOUT	(1<<21) /* == 0x00200000:  */
	#define BMSK_SEC_SEC_IPC_HOST_INT_STATUS_TMR_MTB_OVERFLOW	(1<<20) /* == 0x00100000:  */
	#define BMSK_SEC_SEC_IPC_HOST_INT_STATUS_Reserved19	(1<<19) /* == 0x00080000:  */
	#define BMSK_SEC_SEC_IPC_HOST_INT_STATUS_DES_HKEY_ERROR	(1<<18) /* == 0x00040000:  */
	#define BMSK_SEC_SEC_IPC_HOST_INT_STATUS_AES_HKEY_ERROR	(1<<17) /* == 0x00020000:  */
	#define BMSK_SEC_SEC_IPC_HOST_INT_STATUS_ILLEGAL_MEM_ACCESS	(1<<16) /* == 0x00010000:  */
	#define BMSK_SEC_SEC_IPC_HOST_INT_STATUS_Reserved20	0x0000fffc /*  */
	#define BMSK_SEC_SEC_IPC_HOST_INT_STATUS_IPC_INPUT_READY_INT	(1<<1) /* == 0x00000002:  */
	#define BMSK_SEC_SEC_IPC_HOST_INT_STATUS_IPC_OUTPUT_DOORBELL_INT	(1<<0) /* == 0x00000001:  */
	/* Register BITFIELD for SEC_SEC_IPC_HOST_INT_STATUS - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_IPC_HOST_INT_STATUS_Reserved18	 0x0410, 22, 10, 0xffc00000
	#define BITFIELD_SEC_SEC_IPC_HOST_INT_STATUS_TMR_WDOG_TIMEOUT	 0x0410, 21, 1, 0x00200000
	#define BITFIELD_SEC_SEC_IPC_HOST_INT_STATUS_TMR_MTB_OVERFLOW	 0x0410, 20, 1, 0x00100000
	#define BITFIELD_SEC_SEC_IPC_HOST_INT_STATUS_Reserved19	 0x0410, 19, 1, 0x00080000
	#define BITFIELD_SEC_SEC_IPC_HOST_INT_STATUS_DES_HKEY_ERROR	 0x0410, 18, 1, 0x00040000
	#define BITFIELD_SEC_SEC_IPC_HOST_INT_STATUS_AES_HKEY_ERROR	 0x0410, 17, 1, 0x00020000
	#define BITFIELD_SEC_SEC_IPC_HOST_INT_STATUS_ILLEGAL_MEM_ACCESS	 0x0410, 16, 1, 0x00010000
	#define BITFIELD_SEC_SEC_IPC_HOST_INT_STATUS_Reserved20	 0x0410, 2, 14, 0x0000fffc
	#define BITFIELD_SEC_SEC_IPC_HOST_INT_STATUS_IPC_INPUT_READY_INT	 0x0410, 1, 1, 0x00000002
	#define BITFIELD_SEC_SEC_IPC_HOST_INT_STATUS_IPC_OUTPUT_DOORBELL_INT	 0x0410, 0, 1, 0x00000001
#define ROFF_SEC_SEC_IPC_HOST_INT_MASK	0x414 /* IPC Host Interrupt Mask */ 
	#define BITFIELD_SEC_SEC_IPC_HOST_INT_MASK	 0x0414, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_IPC_HOST_INT_MASK */
	#define BLSB_SEC_SEC_IPC_HOST_INT_MASK_Reserved21	2
	#define BLSB_SEC_SEC_IPC_HOST_INT_MASK_IPC_INPUT_READY_INT_MASK	1
	#define BLSB_SEC_SEC_IPC_HOST_INT_MASK_IPC_OUTPUT_DOORBELL_INT_MASK	0
	/* Register Bit Widths for SEC_SEC_IPC_HOST_INT_MASK */
	#define BWID_SEC_SEC_IPC_HOST_INT_MASK_Reserved21	30
	#define BWID_SEC_SEC_IPC_HOST_INT_MASK_IPC_INPUT_READY_INT_MASK	1
	#define BWID_SEC_SEC_IPC_HOST_INT_MASK_IPC_OUTPUT_DOORBELL_INT_MASK	1
	/* Register Bit MASKS for SEC_SEC_IPC_HOST_INT_MASK */
	#define BMSK_SEC_SEC_IPC_HOST_INT_MASK_Reserved21	0xfffffffc /*  */
	#define BMSK_SEC_SEC_IPC_HOST_INT_MASK_IPC_INPUT_READY_INT_MASK	(1<<1) /* == 0x00000002:  */
	#define BMSK_SEC_SEC_IPC_HOST_INT_MASK_IPC_OUTPUT_DOORBELL_INT_MASK	(1<<0) /* == 0x00000001:  */
	/* Register BITFIELD for SEC_SEC_IPC_HOST_INT_MASK - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_IPC_HOST_INT_MASK_Reserved21	 0x0414, 2, 30, 0xfffffffc
	#define BITFIELD_SEC_SEC_IPC_HOST_INT_MASK_IPC_INPUT_READY_INT_MASK	 0x0414, 1, 1, 0x00000002
	#define BITFIELD_SEC_SEC_IPC_HOST_INT_MASK_IPC_OUTPUT_DOORBELL_INT_MASK	 0x0414, 0, 1, 0x00000001
#define ROFF_SEC_SEC_IPC_INPUT_PAYLOAD	0x500 /* IPC Input Payload */ 
	#define BITFIELD_SEC_SEC_IPC_INPUT_PAYLOAD	 0x0500, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_IPC_INPUT_PAYLOAD */
	#define BLSB_SEC_SEC_IPC_INPUT_PAYLOAD_IPC_INPUT_PAYLOAD	0
	/* Register Bit Widths for SEC_SEC_IPC_INPUT_PAYLOAD */
	#define BWID_SEC_SEC_IPC_INPUT_PAYLOAD_IPC_INPUT_PAYLOAD	512
	/* Register Bit MASKS for SEC_SEC_IPC_INPUT_PAYLOAD */
	#define BMSK_SEC_SEC_IPC_INPUT_PAYLOAD_IPC_INPUT_PAYLOAD	0x00000000 /*  */
	/* Register BITFIELD for SEC_SEC_IPC_INPUT_PAYLOAD - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_IPC_INPUT_PAYLOAD_IPC_INPUT_PAYLOAD	 0x0500, 0, 512, 0x00000000
#define ROFF_SEC_SEC_IPC_OUTPUT_PAYLOAD	0x580 /* IPC Output Payload */ 
	#define BITFIELD_SEC_SEC_IPC_OUTPUT_PAYLOAD	 0x0580, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_IPC_OUTPUT_PAYLOAD */
	#define BLSB_SEC_SEC_IPC_OUTPUT_PAYLOAD_IPC_OUTPUT_PAYLOAD	0
	/* Register Bit Widths for SEC_SEC_IPC_OUTPUT_PAYLOAD */
	#define BWID_SEC_SEC_IPC_OUTPUT_PAYLOAD_IPC_OUTPUT_PAYLOAD	512
	/* Register Bit MASKS for SEC_SEC_IPC_OUTPUT_PAYLOAD */
	#define BMSK_SEC_SEC_IPC_OUTPUT_PAYLOAD_IPC_OUTPUT_PAYLOAD	0x00000000 /*  */
	/* Register BITFIELD for SEC_SEC_IPC_OUTPUT_PAYLOAD - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_IPC_OUTPUT_PAYLOAD_IPC_OUTPUT_PAYLOAD	 0x0580, 0, 512, 0x00000000
#define ROFF_SEC_SEC_IPC_SHARED_PAYLOAD	0x600 /* IPC Shared Payload */ 
	#define BITFIELD_SEC_SEC_IPC_SHARED_PAYLOAD	 0x0600, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_IPC_SHARED_PAYLOAD */
	#define BLSB_SEC_SEC_IPC_SHARED_PAYLOAD_IPC_SHARED_PAYLOAD	0
	/* Register Bit Widths for SEC_SEC_IPC_SHARED_PAYLOAD */
	#define BWID_SEC_SEC_IPC_SHARED_PAYLOAD_IPC_SHARED_PAYLOAD	2048
	/* Register Bit MASKS for SEC_SEC_IPC_SHARED_PAYLOAD */
	#define BMSK_SEC_SEC_IPC_SHARED_PAYLOAD_IPC_SHARED_PAYLOAD	0x00000000 /*  */
	/* Register BITFIELD for SEC_SEC_IPC_SHARED_PAYLOAD - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_IPC_SHARED_PAYLOAD_IPC_SHARED_PAYLOAD	 0x0600, 0, 2048, 0x00000000
#define ROFF_SEC_SEC_DEBUG_CONFIG	0x4e0 /* SEC Debug Config */ 
	#define BITFIELD_SEC_SEC_DEBUG_CONFIG	 0x04e0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_DEBUG_CONFIG */
	#define BLSB_SEC_SEC_DEBUG_CONFIG_SEC_RISC_SYNC_RESET	31
	#define BLSB_SEC_SEC_DEBUG_CONFIG_SEC_RISC_PERIPH_SYNC_RESET	30
	#define BLSB_SEC_SEC_DEBUG_CONFIG_Reserved22	2
	#define BLSB_SEC_SEC_DEBUG_CONFIG_SYS_PMODE	0
	/* Register Bit Widths for SEC_SEC_DEBUG_CONFIG */
	#define BWID_SEC_SEC_DEBUG_CONFIG_SEC_RISC_SYNC_RESET	1
	#define BWID_SEC_SEC_DEBUG_CONFIG_SEC_RISC_PERIPH_SYNC_RESET	1
	#define BWID_SEC_SEC_DEBUG_CONFIG_Reserved22	28
	#define BWID_SEC_SEC_DEBUG_CONFIG_SYS_PMODE	2
	/* Register Bit MASKS for SEC_SEC_DEBUG_CONFIG */
	#define BMSK_SEC_SEC_DEBUG_CONFIG_SEC_RISC_SYNC_RESET	(1<<31) /* == 0x80000000:  */
	#define BMSK_SEC_SEC_DEBUG_CONFIG_SEC_RISC_PERIPH_SYNC_RESET	(1<<30) /* == 0x40000000:  */
	#define BMSK_SEC_SEC_DEBUG_CONFIG_Reserved22	0x3ffffffc /*  */
	#define BMSK_SEC_SEC_DEBUG_CONFIG_SYS_PMODE	0x00000003 /*  */
	/* Register BITFIELD for SEC_SEC_DEBUG_CONFIG - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_DEBUG_CONFIG_SEC_RISC_SYNC_RESET	 0x04e0, 31, 1, 0x80000000
	#define BITFIELD_SEC_SEC_DEBUG_CONFIG_SEC_RISC_PERIPH_SYNC_RESET	 0x04e0, 30, 1, 0x40000000
	#define BITFIELD_SEC_SEC_DEBUG_CONFIG_Reserved22	 0x04e0, 2, 28, 0x3ffffffc
	#define BITFIELD_SEC_SEC_DEBUG_CONFIG_SYS_PMODE	 0x04e0, 0, 2, 0x00000003
#define ROFF_SEC_SEC_PMU_SEL	0x4e4 /* SEC PMU Select Register */ 
	#define BITFIELD_SEC_SEC_PMU_SEL	 0x04e4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_PMU_SEL */
	#define BLSB_SEC_SEC_PMU_SEL_Reserved23	6
	#define BLSB_SEC_SEC_PMU_SEL_SEL1	3
	#define BLSB_SEC_SEC_PMU_SEL_SEL0	0
	/* Register Bit Widths for SEC_SEC_PMU_SEL */
	#define BWID_SEC_SEC_PMU_SEL_Reserved23	26
	#define BWID_SEC_SEC_PMU_SEL_SEL1	3
	#define BWID_SEC_SEC_PMU_SEL_SEL0	3
	/* Register Bit MASKS for SEC_SEC_PMU_SEL */
	#define BMSK_SEC_SEC_PMU_SEL_Reserved23	0xffffffc0 /*  */
	#define BMSK_SEC_SEC_PMU_SEL_SEL1	0x00000038 /*  */
	#define BMSK_SEC_SEC_PMU_SEL_SEL0	0x00000007 /*  */
	/* Register BITFIELD for SEC_SEC_PMU_SEL - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_PMU_SEL_Reserved23	 0x04e4, 6, 26, 0xffffffc0
	#define BITFIELD_SEC_SEC_PMU_SEL_SEL1	 0x04e4, 3, 3, 0x00000038
	#define BITFIELD_SEC_SEC_PMU_SEL_SEL0	 0x04e4, 0, 3, 0x00000007
#define ROFF_SEC_SEC_OMAR_SEL	0x4e8 /* SEC OMAR Select Register */ 
	#define BITFIELD_SEC_SEC_OMAR_SEL	 0x04e8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_OMAR_SEL */
	#define BLSB_SEC_SEC_OMAR_SEL_Reserved24	3
	#define BLSB_SEC_SEC_OMAR_SEL_SEL	0
	/* Register Bit Widths for SEC_SEC_OMAR_SEL */
	#define BWID_SEC_SEC_OMAR_SEL_Reserved24	29
	#define BWID_SEC_SEC_OMAR_SEL_SEL	3
	/* Register Bit MASKS for SEC_SEC_OMAR_SEL */
	#define BMSK_SEC_SEC_OMAR_SEL_Reserved24	0xfffffff8 /*  */
	#define BMSK_SEC_SEC_OMAR_SEL_SEL	0x00000007 /*  */
	/* Register BITFIELD for SEC_SEC_OMAR_SEL - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_OMAR_SEL_Reserved24	 0x04e8, 3, 29, 0xfffffff8
	#define BITFIELD_SEC_SEC_OMAR_SEL_SEL	 0x04e8, 0, 3, 0x00000007
#define ROFF_SEC_SEC_OMAR_SCRATCH	0x4ec /* SEC OMAR Scratch Register */ 
	#define BITFIELD_SEC_SEC_OMAR_SCRATCH	 0x04ec, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_OMAR_SCRATCH */
	#define BLSB_SEC_SEC_OMAR_SCRATCH_Reserved25	16
	#define BLSB_SEC_SEC_OMAR_SCRATCH_OMAR_SCRATCH	0
	/* Register Bit Widths for SEC_SEC_OMAR_SCRATCH */
	#define BWID_SEC_SEC_OMAR_SCRATCH_Reserved25	16
	#define BWID_SEC_SEC_OMAR_SCRATCH_OMAR_SCRATCH	16
	/* Register Bit MASKS for SEC_SEC_OMAR_SCRATCH */
	#define BMSK_SEC_SEC_OMAR_SCRATCH_Reserved25	0xffff0000 /*  */
	#define BMSK_SEC_SEC_OMAR_SCRATCH_OMAR_SCRATCH	0x0000ffff /*  */
	/* Register BITFIELD for SEC_SEC_OMAR_SCRATCH - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_OMAR_SCRATCH_Reserved25	 0x04ec, 16, 16, 0xffff0000
	#define BITFIELD_SEC_SEC_OMAR_SCRATCH_OMAR_SCRATCH	 0x04ec, 0, 16, 0x0000ffff
#define ROFF_SEC_SEC_FUSE_CONFIG0	0x4f0 /* SEC Fuse Config0 */ 
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0	 0x04f0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_FUSE_CONFIG0 */
	#define BLSB_SEC_SEC_FUSE_CONFIG0_DEVELOPMENT_MODE	31
	#define BLSB_SEC_SEC_FUSE_CONFIG0_REMAP_BOOT	30
	#define BLSB_SEC_SEC_FUSE_CONFIG0_SHUTDOWN_MODE	28
	#define BLSB_SEC_SEC_FUSE_CONFIG0_WDOG_SYS_RESET_ENABLE	27
	#define BLSB_SEC_SEC_FUSE_CONFIG0_LO_8K_ROM_IMAGE	26
	#define BLSB_SEC_SEC_FUSE_CONFIG0_HI_8K_ROM_IMAGE	25
	#define BLSB_SEC_SEC_FUSE_CONFIG0_OTP_SELECT	24
	#define BLSB_SEC_SEC_FUSE_CONFIG0_Reserved26	22
	#define BLSB_SEC_SEC_FUSE_CONFIG0_FLASH_AUTH_SIZE	20
	#define BLSB_SEC_SEC_FUSE_CONFIG0_KERNEL_OVERRIDE	19
	#define BLSB_SEC_SEC_FUSE_CONFIG0_JTAG_PASSWORD_XOR	18
	#define BLSB_SEC_SEC_FUSE_CONFIG0_JTAG_PASSWORD_ENABLE	17
	#define BLSB_SEC_SEC_FUSE_CONFIG0_JTAG_PERM_XOR	16
	#define BLSB_SEC_SEC_FUSE_CONFIG0_Reserved27	15
	#define BLSB_SEC_SEC_FUSE_CONFIG0_DTV_ENABLE	14
	#define BLSB_SEC_SEC_FUSE_CONFIG0_HKEY1_ALT_ENABLE	13
	#define BLSB_SEC_SEC_FUSE_CONFIG0_HKEY0_ALT_ENABLE	12
	#define BLSB_SEC_SEC_FUSE_CONFIG0_HKEY1_DERIVATIVE_ENABLE	11
	#define BLSB_SEC_SEC_FUSE_CONFIG0_HKEY0_DERIVATIVE_ENABLE	10
	#define BLSB_SEC_SEC_FUSE_CONFIG0_HKEY1_FW_ENABLE	9
	#define BLSB_SEC_SEC_FUSE_CONFIG0_FKEY_ENABLE	8
	#define BLSB_SEC_SEC_FUSE_CONFIG0_HKEY1_USE_PSK	7
	#define BLSB_SEC_SEC_FUSE_CONFIG0_HKEY0_USE_SSK	6
	#define BLSB_SEC_SEC_FUSE_CONFIG0_HKEY1_USE_AES	5
	#define BLSB_SEC_SEC_FUSE_CONFIG0_HKEY0_USE_AES	4
	#define BLSB_SEC_SEC_FUSE_CONFIG0_VGS_ENABLE	3
	#define BLSB_SEC_SEC_FUSE_CONFIG0_RNG_HW_ENABLE	2
	#define BLSB_SEC_SEC_FUSE_CONFIG0_HOSTACCESS_EN	1
	#define BLSB_SEC_SEC_FUSE_CONFIG0_SECTUREBOOT_EN	0
	/* Register Bit Widths for SEC_SEC_FUSE_CONFIG0 */
	#define BWID_SEC_SEC_FUSE_CONFIG0_DEVELOPMENT_MODE	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_REMAP_BOOT	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_SHUTDOWN_MODE	2
	#define BWID_SEC_SEC_FUSE_CONFIG0_WDOG_SYS_RESET_ENABLE	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_LO_8K_ROM_IMAGE	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_HI_8K_ROM_IMAGE	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_OTP_SELECT	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_Reserved26	2
	#define BWID_SEC_SEC_FUSE_CONFIG0_FLASH_AUTH_SIZE	2
	#define BWID_SEC_SEC_FUSE_CONFIG0_KERNEL_OVERRIDE	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_JTAG_PASSWORD_XOR	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_JTAG_PASSWORD_ENABLE	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_JTAG_PERM_XOR	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_Reserved27	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_DTV_ENABLE	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_HKEY1_ALT_ENABLE	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_HKEY0_ALT_ENABLE	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_HKEY1_DERIVATIVE_ENABLE	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_HKEY0_DERIVATIVE_ENABLE	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_HKEY1_FW_ENABLE	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_FKEY_ENABLE	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_HKEY1_USE_PSK	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_HKEY0_USE_SSK	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_HKEY1_USE_AES	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_HKEY0_USE_AES	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_VGS_ENABLE	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_RNG_HW_ENABLE	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_HOSTACCESS_EN	1
	#define BWID_SEC_SEC_FUSE_CONFIG0_SECTUREBOOT_EN	1
	/* Register Bit MASKS for SEC_SEC_FUSE_CONFIG0 */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_DEVELOPMENT_MODE	(1<<31) /* == 0x80000000:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_REMAP_BOOT	(1<<30) /* == 0x40000000:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_SHUTDOWN_MODE	0x30000000 /*  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_WDOG_SYS_RESET_ENABLE	(1<<27) /* == 0x08000000:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_LO_8K_ROM_IMAGE	(1<<26) /* == 0x04000000:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_HI_8K_ROM_IMAGE	(1<<25) /* == 0x02000000:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_OTP_SELECT	(1<<24) /* == 0x01000000:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_Reserved26	0x00c00000 /*  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_FLASH_AUTH_SIZE	0x00300000 /*  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_KERNEL_OVERRIDE	(1<<19) /* == 0x00080000:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_JTAG_PASSWORD_XOR	(1<<18) /* == 0x00040000:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_JTAG_PASSWORD_ENABLE	(1<<17) /* == 0x00020000:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_JTAG_PERM_XOR	(1<<16) /* == 0x00010000:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_Reserved27	(1<<15) /* == 0x00008000:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_DTV_ENABLE	(1<<14) /* == 0x00004000:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_HKEY1_ALT_ENABLE	(1<<13) /* == 0x00002000:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_HKEY0_ALT_ENABLE	(1<<12) /* == 0x00001000:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_HKEY1_DERIVATIVE_ENABLE	(1<<11) /* == 0x00000800:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_HKEY0_DERIVATIVE_ENABLE	(1<<10) /* == 0x00000400:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_HKEY1_FW_ENABLE	(1<<9) /* == 0x00000200:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_FKEY_ENABLE	(1<<8) /* == 0x00000100:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_HKEY1_USE_PSK	(1<<7) /* == 0x00000080:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_HKEY0_USE_SSK	(1<<6) /* == 0x00000040:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_HKEY1_USE_AES	(1<<5) /* == 0x00000020:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_HKEY0_USE_AES	(1<<4) /* == 0x00000010:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_VGS_ENABLE	(1<<3) /* == 0x00000008:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_RNG_HW_ENABLE	(1<<2) /* == 0x00000004:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_HOSTACCESS_EN	(1<<1) /* == 0x00000002:  */
	#define BMSK_SEC_SEC_FUSE_CONFIG0_SECTUREBOOT_EN	(1<<0) /* == 0x00000001:  */
	/* Register BITFIELD for SEC_SEC_FUSE_CONFIG0 - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_DEVELOPMENT_MODE	 0x04f0, 31, 1, 0x80000000
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_REMAP_BOOT	 0x04f0, 30, 1, 0x40000000
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_SHUTDOWN_MODE	 0x04f0, 28, 2, 0x30000000
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_WDOG_SYS_RESET_ENABLE	 0x04f0, 27, 1, 0x08000000
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_LO_8K_ROM_IMAGE	 0x04f0, 26, 1, 0x04000000
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_HI_8K_ROM_IMAGE	 0x04f0, 25, 1, 0x02000000
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_OTP_SELECT	 0x04f0, 24, 1, 0x01000000
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_Reserved26	 0x04f0, 22, 2, 0x00c00000
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_FLASH_AUTH_SIZE	 0x04f0, 20, 2, 0x00300000
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_KERNEL_OVERRIDE	 0x04f0, 19, 1, 0x00080000
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_JTAG_PASSWORD_XOR	 0x04f0, 18, 1, 0x00040000
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_JTAG_PASSWORD_ENABLE	 0x04f0, 17, 1, 0x00020000
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_JTAG_PERM_XOR	 0x04f0, 16, 1, 0x00010000
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_Reserved27	 0x04f0, 15, 1, 0x00008000
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_DTV_ENABLE	 0x04f0, 14, 1, 0x00004000
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_HKEY1_ALT_ENABLE	 0x04f0, 13, 1, 0x00002000
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_HKEY0_ALT_ENABLE	 0x04f0, 12, 1, 0x00001000
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_HKEY1_DERIVATIVE_ENABLE	 0x04f0, 11, 1, 0x00000800
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_HKEY0_DERIVATIVE_ENABLE	 0x04f0, 10, 1, 0x00000400
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_HKEY1_FW_ENABLE	 0x04f0, 9, 1, 0x00000200
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_FKEY_ENABLE	 0x04f0, 8, 1, 0x00000100
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_HKEY1_USE_PSK	 0x04f0, 7, 1, 0x00000080
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_HKEY0_USE_SSK	 0x04f0, 6, 1, 0x00000040
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_HKEY1_USE_AES	 0x04f0, 5, 1, 0x00000020
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_HKEY0_USE_AES	 0x04f0, 4, 1, 0x00000010
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_VGS_ENABLE	 0x04f0, 3, 1, 0x00000008
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_RNG_HW_ENABLE	 0x04f0, 2, 1, 0x00000004
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_HOSTACCESS_EN	 0x04f0, 1, 1, 0x00000002
	#define BITFIELD_SEC_SEC_FUSE_CONFIG0_SECTUREBOOT_EN	 0x04f0, 0, 1, 0x00000001
#define ROFF_SEC_SEC_FUSE_STATUS0	0x4f0 /* SEC Fuse Status0 */ 
	#define BITFIELD_SEC_SEC_FUSE_STATUS0	 0x04f0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_FUSE_STATUS0 */
	#define BLSB_SEC_SEC_FUSE_STATUS0_SEC_FUSE_STATUS0	0
	/* Register Bit Widths for SEC_SEC_FUSE_STATUS0 */
	#define BWID_SEC_SEC_FUSE_STATUS0_SEC_FUSE_STATUS0	31
	/* Register Bit MASKS for SEC_SEC_FUSE_STATUS0 */
	#define BMSK_SEC_SEC_FUSE_STATUS0_SEC_FUSE_STATUS0	0x7fffffff /*  */
	/* Register BITFIELD for SEC_SEC_FUSE_STATUS0 - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_FUSE_STATUS0_SEC_FUSE_STATUS0	 0x04f0, 0, 31, 0x7fffffff
#define ROFF_SEC_SEC_SYS_ATU_SRC_BASE0	0x900 /* SEC_SYS_ATU_SRC_BASE0 */ 
	#define BITFIELD_SEC_SEC_SYS_ATU_SRC_BASE0	 0x0900, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_SYS_ATU_SRC_BASE0 */
	#define BLSB_SEC_SEC_SYS_ATU_SRC_BASE0_SYS_ATU_SRC_BASE	12
	#define BLSB_SEC_SEC_SYS_ATU_SRC_BASE0_Reserved28	0
	/* Register Bit Widths for SEC_SEC_SYS_ATU_SRC_BASE0 */
	#define BWID_SEC_SEC_SYS_ATU_SRC_BASE0_SYS_ATU_SRC_BASE	20
	#define BWID_SEC_SEC_SYS_ATU_SRC_BASE0_Reserved28	12
	/* Register Bit MASKS for SEC_SEC_SYS_ATU_SRC_BASE0 */
	#define BMSK_SEC_SEC_SYS_ATU_SRC_BASE0_SYS_ATU_SRC_BASE	0xfffff000 /*  */
	#define BMSK_SEC_SEC_SYS_ATU_SRC_BASE0_Reserved28	0x00000fff /*  */
	/* Register BITFIELD for SEC_SEC_SYS_ATU_SRC_BASE0 - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_SYS_ATU_SRC_BASE0_SYS_ATU_SRC_BASE	 0x0900, 12, 20, 0xfffff000
	#define BITFIELD_SEC_SEC_SYS_ATU_SRC_BASE0_Reserved28	 0x0900, 0, 12, 0x00000fff
#define ROFF_SEC_SEC_SYS_ATU_SRC_BASE1	0x904 /* SEC_SYS_ATU_SRC_BASE1 */ 
	#define BITFIELD_SEC_SEC_SYS_ATU_SRC_BASE1	 0x0904, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_SYS_ATU_SRC_BASE1 */
	#define BLSB_SEC_SEC_SYS_ATU_SRC_BASE1_SYS_ATU_SRC_BASE	12
	#define BLSB_SEC_SEC_SYS_ATU_SRC_BASE1_Reserved29	0
	/* Register Bit Widths for SEC_SEC_SYS_ATU_SRC_BASE1 */
	#define BWID_SEC_SEC_SYS_ATU_SRC_BASE1_SYS_ATU_SRC_BASE	20
	#define BWID_SEC_SEC_SYS_ATU_SRC_BASE1_Reserved29	12
	/* Register Bit MASKS for SEC_SEC_SYS_ATU_SRC_BASE1 */
	#define BMSK_SEC_SEC_SYS_ATU_SRC_BASE1_SYS_ATU_SRC_BASE	0xfffff000 /*  */
	#define BMSK_SEC_SEC_SYS_ATU_SRC_BASE1_Reserved29	0x00000fff /*  */
	/* Register BITFIELD for SEC_SEC_SYS_ATU_SRC_BASE1 - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_SYS_ATU_SRC_BASE1_SYS_ATU_SRC_BASE	 0x0904, 12, 20, 0xfffff000
	#define BITFIELD_SEC_SEC_SYS_ATU_SRC_BASE1_Reserved29	 0x0904, 0, 12, 0x00000fff
#define ROFF_SEC_SEC_SYS_ATU_DST_BASE0	0x908 /* SEC_SYS_ATU_DST_BASE0 */ 
	#define BITFIELD_SEC_SEC_SYS_ATU_DST_BASE0	 0x0908, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_SYS_ATU_DST_BASE0 */
	#define BLSB_SEC_SEC_SYS_ATU_DST_BASE0_SYS_ATU_DST_BASE	12
	#define BLSB_SEC_SEC_SYS_ATU_DST_BASE0_Reserved30	0
	/* Register Bit Widths for SEC_SEC_SYS_ATU_DST_BASE0 */
	#define BWID_SEC_SEC_SYS_ATU_DST_BASE0_SYS_ATU_DST_BASE	20
	#define BWID_SEC_SEC_SYS_ATU_DST_BASE0_Reserved30	12
	/* Register Bit MASKS for SEC_SEC_SYS_ATU_DST_BASE0 */
	#define BMSK_SEC_SEC_SYS_ATU_DST_BASE0_SYS_ATU_DST_BASE	0xfffff000 /*  */
	#define BMSK_SEC_SEC_SYS_ATU_DST_BASE0_Reserved30	0x00000fff /*  */
	/* Register BITFIELD for SEC_SEC_SYS_ATU_DST_BASE0 - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_SYS_ATU_DST_BASE0_SYS_ATU_DST_BASE	 0x0908, 12, 20, 0xfffff000
	#define BITFIELD_SEC_SEC_SYS_ATU_DST_BASE0_Reserved30	 0x0908, 0, 12, 0x00000fff
#define ROFF_SEC_SEC_SYS_ATU_DST_BASE1	0x90c /* SEC_SYS_ATU_DST_BASE1 */ 
	#define BITFIELD_SEC_SEC_SYS_ATU_DST_BASE1	 0x090c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_SYS_ATU_DST_BASE1 */
	#define BLSB_SEC_SEC_SYS_ATU_DST_BASE1_SYS_ATU_DST_BASE	12
	#define BLSB_SEC_SEC_SYS_ATU_DST_BASE1_Reserved31	0
	/* Register Bit Widths for SEC_SEC_SYS_ATU_DST_BASE1 */
	#define BWID_SEC_SEC_SYS_ATU_DST_BASE1_SYS_ATU_DST_BASE	20
	#define BWID_SEC_SEC_SYS_ATU_DST_BASE1_Reserved31	12
	/* Register Bit MASKS for SEC_SEC_SYS_ATU_DST_BASE1 */
	#define BMSK_SEC_SEC_SYS_ATU_DST_BASE1_SYS_ATU_DST_BASE	0xfffff000 /*  */
	#define BMSK_SEC_SEC_SYS_ATU_DST_BASE1_Reserved31	0x00000fff /*  */
	/* Register BITFIELD for SEC_SEC_SYS_ATU_DST_BASE1 - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_SYS_ATU_DST_BASE1_SYS_ATU_DST_BASE	 0x090c, 12, 20, 0xfffff000
	#define BITFIELD_SEC_SEC_SYS_ATU_DST_BASE1_Reserved31	 0x090c, 0, 12, 0x00000fff
#define ROFF_SEC_SEC_SYS_ATU_ADDR_MASK0	0x910 /* SEC_SYS_ATU_ADDR_MASK0 */ 
	#define BITFIELD_SEC_SEC_SYS_ATU_ADDR_MASK0	 0x0910, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_SYS_ATU_ADDR_MASK0 */
	#define BLSB_SEC_SEC_SYS_ATU_ADDR_MASK0_SYS_ATU_MASK	12
	#define BLSB_SEC_SEC_SYS_ATU_ADDR_MASK0_Reserved32	0
	/* Register Bit Widths for SEC_SEC_SYS_ATU_ADDR_MASK0 */
	#define BWID_SEC_SEC_SYS_ATU_ADDR_MASK0_SYS_ATU_MASK	20
	#define BWID_SEC_SEC_SYS_ATU_ADDR_MASK0_Reserved32	12
	/* Register Bit MASKS for SEC_SEC_SYS_ATU_ADDR_MASK0 */
	#define BMSK_SEC_SEC_SYS_ATU_ADDR_MASK0_SYS_ATU_MASK	0xfffff000 /*  */
	#define BMSK_SEC_SEC_SYS_ATU_ADDR_MASK0_Reserved32	0x00000fff /*  */
	/* Register BITFIELD for SEC_SEC_SYS_ATU_ADDR_MASK0 - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_SYS_ATU_ADDR_MASK0_SYS_ATU_MASK	 0x0910, 12, 20, 0xfffff000
	#define BITFIELD_SEC_SEC_SYS_ATU_ADDR_MASK0_Reserved32	 0x0910, 0, 12, 0x00000fff
#define ROFF_SEC_SEC_SYS_ATU_ADDR_MASK1	0x914 /* SEC_SYS_ATU_ADDR_MASK1 */ 
	#define BITFIELD_SEC_SEC_SYS_ATU_ADDR_MASK1	 0x0914, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for SEC_SEC_SYS_ATU_ADDR_MASK1 */
	#define BLSB_SEC_SEC_SYS_ATU_ADDR_MASK1_SYS_ATU_MASK	12
	#define BLSB_SEC_SEC_SYS_ATU_ADDR_MASK1_Reserved33	0
	/* Register Bit Widths for SEC_SEC_SYS_ATU_ADDR_MASK1 */
	#define BWID_SEC_SEC_SYS_ATU_ADDR_MASK1_SYS_ATU_MASK	20
	#define BWID_SEC_SEC_SYS_ATU_ADDR_MASK1_Reserved33	12
	/* Register Bit MASKS for SEC_SEC_SYS_ATU_ADDR_MASK1 */
	#define BMSK_SEC_SEC_SYS_ATU_ADDR_MASK1_SYS_ATU_MASK	0xfffff000 /*  */
	#define BMSK_SEC_SEC_SYS_ATU_ADDR_MASK1_Reserved33	0x00000fff /*  */
	/* Register BITFIELD for SEC_SEC_SYS_ATU_ADDR_MASK1 - roff, lsb, width, mask */
	#define BITFIELD_SEC_SEC_SYS_ATU_ADDR_MASK1_SYS_ATU_MASK	 0x0914, 12, 20, 0xfffff000
	#define BITFIELD_SEC_SEC_SYS_ATU_ADDR_MASK1_Reserved33	 0x0914, 0, 12, 0x00000fff
#define ROFF_SEC_SEC_UDMA_CONTEXT0_DES_RESERVED0	0x4000 /* DES DMA Context Reserved */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT0_DES_RESERVED0	 0x4000, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT0_DES_RESERVED1	0x4004 /* DES DMA Context Reserved */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT0_DES_RESERVED1	 0x4004, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT0_DES_CURR_DESCR	0x4008 /* DES DMA Context Current Descriptor */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT0_DES_CURR_DESCR	 0x4008, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT0_DES_NEXT_DESCR	0x400c /* DES DMA Next Descriptor */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT0_DES_NEXT_DESCR	 0x400c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT0_DES_SRC_DMA_START	0x4010 /* DES DMA SrcDMA Start */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT0_DES_SRC_DMA_START	 0x4010, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT0_DES_DST_DMA_START	0x4014 /* DES DMA DstDMA Start */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT0_DES_DST_DMA_START	 0x4014, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT0_DES_SRC_DMA_SIZE	0x4018 /* DES DMA SrcDMA Size */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT0_DES_SRC_DMA_SIZE	 0x4018, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT0_DES_FLAGS_MODE	0x401c /* DES Flags Mode */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT0_DES_FLAGS_MODE	 0x401c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT0_DES_SRC_DMA_START_ALIAS	0x4020 /* DES SrcDMA Start Alias */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT0_DES_SRC_DMA_START_ALIAS	 0x4020, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT0_DES_DST_DMA_SIZE	0x4034 /* DES DstDMA Size */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT0_DES_DST_DMA_SIZE	 0x4034, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT1_AES_RESERVED0	0x4040 /* AES DMA Context Reserved */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT1_AES_RESERVED0	 0x4040, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT1_AES_RESERVED1	0x4044 /* AES DMA Context Reserved */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT1_AES_RESERVED1	 0x4044, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT1_AES_CURR_DESCR	0x4048 /* AES DMA Context Current Descriptor */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT1_AES_CURR_DESCR	 0x4048, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT1_AES_NEXT_DESCR	0x404c /* AES DMA Next Descriptor */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT1_AES_NEXT_DESCR	 0x404c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT1_AES_SRC_DMA_START	0x4050 /* AES DMA SrcDMA Start */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT1_AES_SRC_DMA_START	 0x4050, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT1_AES_DST_DMA_START	0x4054 /* AES DMA DstDMA Start */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT1_AES_DST_DMA_START	 0x4054, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT1_AES_SRC_DMA_SIZE	0x4058 /* AES DMA SrcDMA Size */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT1_AES_SRC_DMA_SIZE	 0x4058, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT1_AES_FLAGS_MODE	0x405c /* AES Flags Mode */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT1_AES_FLAGS_MODE	 0x405c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT1_AES_SRC_DMA_START_ALIAS	0x4060 /* AES SrcDMA Start Alias */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT1_AES_SRC_DMA_START_ALIAS	 0x4060, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT1_AES_DST_DMA_SIZE	0x4074 /* AES DstDMA Size */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT1_AES_DST_DMA_SIZE	 0x4074, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT2_C2_RESERVED0	0x4080 /* C2 DMA Context Reserved */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT2_C2_RESERVED0	 0x4080, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT2_C2_RESERVED1	0x4084 /* C2 DMA Context Reserved */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT2_C2_RESERVED1	 0x4084, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT2_C2_CURR_DESCR	0x4088 /* C2 DMA Context Current Descriptor */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT2_C2_CURR_DESCR	 0x4088, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT2_C2_NEXT_DESCR	0x408c /* C2 DMA Next Descriptor */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT2_C2_NEXT_DESCR	 0x408c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT2_C2_SRC_DMA_START	0x4090 /* C2 DMA SrcDMA Start */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT2_C2_SRC_DMA_START	 0x4090, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT2_C2_DST_DMA_START	0x4094 /* C2 DMA DstDMA Start */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT2_C2_DST_DMA_START	 0x4094, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT2_C2_SRC_DMA_SIZE	0x4098 /* C2 DMA SrcDMA Size */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT2_C2_SRC_DMA_SIZE	 0x4098, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT2_C2_FLAGS_MODE	0x409c /* C2 Flags Mode */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT2_C2_FLAGS_MODE	 0x409c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT2_C2_SRC_DMA_START_ALIAS	0x40a0 /* C2 SrcDMA Start Alias */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT2_C2_SRC_DMA_START_ALIAS	 0x40a0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT2_C2_DST_DMA_SIZE	0x40b4 /* C2 DstDMA Size */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT2_C2_DST_DMA_SIZE	 0x40b4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT3_CSS_RESERVED0	0x40c0 /* CSS DMA Context Reserved */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT3_CSS_RESERVED0	 0x40c0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT3_CSS_RESERVED1	0x40c4 /* CSS DMA Context Reserved */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT3_CSS_RESERVED1	 0x40c4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT3_CSS_CURR_DESCR	0x40c8 /* CSS DMA Context Current Descriptor */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT3_CSS_CURR_DESCR	 0x40c8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT3_CSS_NEXT_DESCR	0x40cc /* CSS DMA Next Descriptor */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT3_CSS_NEXT_DESCR	 0x40cc, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT3_CSS_SRC_DMA_START	0x40d0 /* CSS DMA SrcDMA Start */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT3_CSS_SRC_DMA_START	 0x40d0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT3_CSS_DST_DMA_START	0x40d4 /* CSS DMA DstDMA Start */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT3_CSS_DST_DMA_START	 0x40d4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT3_CSS_SRC_DMA_SIZE	0x40d8 /* CSS DMA SrcDMA Size */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT3_CSS_SRC_DMA_SIZE	 0x40d8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT3_CSS_FLAGS_MODE	0x40dc /* CSS Flags Mode */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT3_CSS_FLAGS_MODE	 0x40dc, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT3_CSS_SRC_DMA_START_ALIAS	0x40e0 /* CSS SrcDMA Start Alias */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT3_CSS_SRC_DMA_START_ALIAS	 0x40e0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT3_CSS_DST_DMA_SIZE	0x40f4 /* CSS DstDMA Size */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT3_CSS_DST_DMA_SIZE	 0x40f4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT4_HCU_RESERVED0	0x4100 /* HCU DMA Context Reserved */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT4_HCU_RESERVED0	 0x4100, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT4_HCU_RESERVED1	0x4104 /* HCU DMA Context Reserved */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT4_HCU_RESERVED1	 0x4104, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT4_HCU_CURR_DESCR	0x4108 /* HCU DMA Context Current Descriptor */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT4_HCU_CURR_DESCR	 0x4108, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT4_HCU_NEXT_DESCR	0x410c /* HCU DMA Next Descriptor */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT4_HCU_NEXT_DESCR	 0x410c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT4_HCU_SRC_DMA_START	0x4120 /* HCU DMA SrcDMA Start */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT4_HCU_SRC_DMA_START	 0x4120, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT4_HCU_DST_DMA_START	0x4124 /* HCU DMA DstDMA Start */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT4_HCU_DST_DMA_START	 0x4124, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT4_HCU_SRC_DMA_SIZE	0x4128 /* HCU DMA SrcDMA Size */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT4_HCU_SRC_DMA_SIZE	 0x4128, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT4_HCU_FLAGS_MODE	0x412c /* HCU Flags Mode */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT4_HCU_FLAGS_MODE	 0x412c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT4_HCU_SRC_DMA_START_ALIAS	0x4130 /* HCU SrcDMA Start Alias */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT4_HCU_SRC_DMA_START_ALIAS	 0x4130, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_SEC_SEC_UDMA_CONTEXT4_HCU_DST_DMA_SIZE	0x4144 /* HCU DstDMA Size */ 
	#define BITFIELD_SEC_SEC_UDMA_CONTEXT4_HCU_DST_DMA_SIZE	 0x4144, 0, 32, 0xffffffff  /* roff, lsb, width, mask */


/* Module SEC SPECIFIC SVEN Events */




#endif /* SEC_REGOFFS_H */
