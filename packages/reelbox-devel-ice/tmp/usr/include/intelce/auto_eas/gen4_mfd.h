#ifndef MFD_REGOFFS_H
#define MFD_REGOFFS_H 1
/*

  This file is provided under a dual BSD/GPLv2 license.  When using or 
  redistributing this file, you may do so under either license.

  GPL LICENSE SUMMARY

  Copyright(c) 2007-2009 Intel Corporation. All rights reserved.

  This program is free software; you can redistribute it and/or modify 
  it under the terms of version 2 of the GNU General Public License as
  published by the Free Software Foundation.

  This program is distributed in the hope that it will be useful, but 
  WITHOUT ANY WARRANTY; without even the implied warranty of 
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
  General Public License for more details.

  You should have received a copy of the GNU General Public License 
  along with this program; if not, write to the Free Software 
  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
  The full GNU General Public License is included in this distribution 
  in the file called LICENSE.GPL.

  Contact Information:
    Intel Corporation
    2200 Mission College Blvd.
    Santa Clara, CA  97052

  BSD LICENSE 

  Copyright(c) 2007-2009 Intel Corporation. All rights reserved.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions 
  are met:

    * Redistributions of source code must retain the above copyright 
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright 
      notice, this list of conditions and the following disclaimer in 
      the documentation and/or other materials provided with the 
      distribution.
    * Neither the name of Intel Corporation nor the names of its 
      contributors may be used to endorse or promote products derived 
      from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/


/* Module MFD CSR Definitions */
/* WARNING: This file is Machine Generated using sven_csr.c */


#define ROFF_MFD_SIF_HW_ID	0x0 /* MFD SIF HW ID */ 
	#define BITFIELD_MFD_SIF_HW_ID	 0x0000, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_SIF_FW_ID	0x4 /* MFD SIF FW ID */ 
	#define BITFIELD_MFD_SIF_FW_ID	 0x0004, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_SIF_SOFT_RST	0x8 /* MFD SIF SOFT RST */ 
	#define BITFIELD_MFD_SIF_SOFT_RST	 0x0008, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_SIF_SOFT_RST */
	#define BLSB_MFD_SIF_SOFT_RST_RESERVED	8
	#define BLSB_MFD_SIF_SOFT_RST_NOTUSED	7
	#define BLSB_MFD_SIF_SOFT_RST_MINIP_RST	6
	#define BLSB_MFD_SIF_SOFT_RST_MPG4VD_RST	5
	#define BLSB_MFD_SIF_SOFT_RST_MPG2VD_RST	4
	#define BLSB_MFD_SIF_SOFT_RST_VC1VD_RST	3
	#define BLSB_MFD_SIF_SOFT_RST_H264VD_RST	2
	#define BLSB_MFD_SIF_SOFT_RST_CP_RST	1
	#define BLSB_MFD_SIF_SOFT_RST_PH_RST	0
	/* Register Bit Widths for MFD_SIF_SOFT_RST */
	#define BWID_MFD_SIF_SOFT_RST_RESERVED	24
	#define BWID_MFD_SIF_SOFT_RST_NOTUSED	1
	#define BWID_MFD_SIF_SOFT_RST_MINIP_RST	1
	#define BWID_MFD_SIF_SOFT_RST_MPG4VD_RST	1
	#define BWID_MFD_SIF_SOFT_RST_MPG2VD_RST	1
	#define BWID_MFD_SIF_SOFT_RST_VC1VD_RST	1
	#define BWID_MFD_SIF_SOFT_RST_H264VD_RST	1
	#define BWID_MFD_SIF_SOFT_RST_CP_RST	1
	#define BWID_MFD_SIF_SOFT_RST_PH_RST	1
	/* Register Bit MASKS for MFD_SIF_SOFT_RST */
	#define BMSK_MFD_SIF_SOFT_RST_RESERVED	0xffffff00 /* Reserved */
	#define BMSK_MFD_SIF_SOFT_RST_NOTUSED	(1<<7) /* == 0x00000080: Notused */
	#define BMSK_MFD_SIF_SOFT_RST_MINIP_RST	(1<<6) /* == 0x00000040: Mini-pipeline Software reset */
	#define BMSK_MFD_SIF_SOFT_RST_MPG4VD_RST	(1<<5) /* == 0x00000020: MPEG4 software Reset */
	#define BMSK_MFD_SIF_SOFT_RST_MPG2VD_RST	(1<<4) /* == 0x00000010: MPEG2 Software reset */
	#define BMSK_MFD_SIF_SOFT_RST_VC1VD_RST	(1<<3) /* == 0x00000008: VC1VD Software Reset */
	#define BMSK_MFD_SIF_SOFT_RST_H264VD_RST	(1<<2) /* == 0x00000004: H264 Software Reset */
	#define BMSK_MFD_SIF_SOFT_RST_CP_RST	(1<<1) /* == 0x00000002: Control Processor Reset */
	#define BMSK_MFD_SIF_SOFT_RST_PH_RST	(1<<0) /* == 0x00000001: Peripheral hardware synchronous reset */
	/* Register BITFIELD for MFD_SIF_SOFT_RST - roff, lsb, width, mask */
	#define BITFIELD_MFD_SIF_SOFT_RST_RESERVED	 0x0008, 8, 24, 0xffffff00
	#define BITFIELD_MFD_SIF_SOFT_RST_NOTUSED	 0x0008, 7, 1, 0x00000080
	#define BITFIELD_MFD_SIF_SOFT_RST_MINIP_RST	 0x0008, 6, 1, 0x00000040
	#define BITFIELD_MFD_SIF_SOFT_RST_MPG4VD_RST	 0x0008, 5, 1, 0x00000020
	#define BITFIELD_MFD_SIF_SOFT_RST_MPG2VD_RST	 0x0008, 4, 1, 0x00000010
	#define BITFIELD_MFD_SIF_SOFT_RST_VC1VD_RST	 0x0008, 3, 1, 0x00000008
	#define BITFIELD_MFD_SIF_SOFT_RST_H264VD_RST	 0x0008, 2, 1, 0x00000004
	#define BITFIELD_MFD_SIF_SOFT_RST_CP_RST	 0x0008, 1, 1, 0x00000002
	#define BITFIELD_MFD_SIF_SOFT_RST_PH_RST	 0x0008, 0, 1, 0x00000001
#define ROFF_MFD_HOST_INT_STAT	0xc /* MFD HOST INT STAT */ 
	#define BITFIELD_MFD_HOST_INT_STAT	 0x000c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_HOST_INT_STAT */
	#define BLSB_MFD_HOST_INT_STAT_RESERVED0	12
	#define BLSB_MFD_HOST_INT_STAT_VC1_SIF_INTR	11
	#define BLSB_MFD_HOST_INT_STAT_RESERVED1	10
	#define BLSB_MFD_HOST_INT_STAT_H264_SIF_INTR	9
	#define BLSB_MFD_HOST_INT_STAT_RESERVED2	8
	#define BLSB_MFD_HOST_INT_STAT_GBL_SIF_INTR	7
	#define BLSB_MFD_HOST_INT_STAT_DMA_INTR	6
	#define BLSB_MFD_HOST_INT_STAT_CORE_INTR	5
	#define BLSB_MFD_HOST_INT_STAT_SCD_INTR	4
	#define BLSB_MFD_HOST_INT_STAT_SIF_INTR	3
	#define BLSB_MFD_HOST_INT_STAT_MFD_TIMER1_INTR	2
	#define BLSB_MFD_HOST_INT_STAT_MFD_TIMER0_INTR	1
	#define BLSB_MFD_HOST_INT_STAT_RESERVED3	0
	/* Register Bit Widths for MFD_HOST_INT_STAT */
	#define BWID_MFD_HOST_INT_STAT_RESERVED0	20
	#define BWID_MFD_HOST_INT_STAT_VC1_SIF_INTR	1
	#define BWID_MFD_HOST_INT_STAT_RESERVED1	1
	#define BWID_MFD_HOST_INT_STAT_H264_SIF_INTR	1
	#define BWID_MFD_HOST_INT_STAT_RESERVED2	1
	#define BWID_MFD_HOST_INT_STAT_GBL_SIF_INTR	1
	#define BWID_MFD_HOST_INT_STAT_DMA_INTR	1
	#define BWID_MFD_HOST_INT_STAT_CORE_INTR	1
	#define BWID_MFD_HOST_INT_STAT_SCD_INTR	1
	#define BWID_MFD_HOST_INT_STAT_SIF_INTR	1
	#define BWID_MFD_HOST_INT_STAT_MFD_TIMER1_INTR	1
	#define BWID_MFD_HOST_INT_STAT_MFD_TIMER0_INTR	1
	#define BWID_MFD_HOST_INT_STAT_RESERVED3	1
	/* Register Bit MASKS for MFD_HOST_INT_STAT */
	#define BMSK_MFD_HOST_INT_STAT_RESERVED0	0xfffff000 /* Reserved */
	#define BMSK_MFD_HOST_INT_STAT_VC1_SIF_INTR	(1<<11) /* == 0x00000800: VC1 Slice 0 generated semaphore Interrupt */
	#define BMSK_MFD_HOST_INT_STAT_RESERVED1	(1<<10) /* == 0x00000400: reserved */
	#define BMSK_MFD_HOST_INT_STAT_H264_SIF_INTR	(1<<9) /* == 0x00000200: H264 Slice ) generated semaphore interrupt */
	#define BMSK_MFD_HOST_INT_STAT_RESERVED2	(1<<8) /* == 0x00000100: reserved */
	#define BMSK_MFD_HOST_INT_STAT_GBL_SIF_INTR	(1<<7) /* == 0x00000080: Global SIF interrupt */
	#define BMSK_MFD_HOST_INT_STAT_DMA_INTR	(1<<6) /* == 0x00000040: DMA Interrupt */
	#define BMSK_MFD_HOST_INT_STAT_CORE_INTR	(1<<5) /* == 0x00000020: Slice Decoder and Mini- pipeline Interrupt */
	#define BMSK_MFD_HOST_INT_STAT_SCD_INTR	(1<<4) /* == 0x00000010: SCD Interrupt */
	#define BMSK_MFD_HOST_INT_STAT_SIF_INTR	(1<<3) /* == 0x00000008: SIF Interrupt */
	#define BMSK_MFD_HOST_INT_STAT_MFD_TIMER1_INTR	(1<<2) /* == 0x00000004: MFD Timer1 Interrupt */
	#define BMSK_MFD_HOST_INT_STAT_MFD_TIMER0_INTR	(1<<1) /* == 0x00000002: MFD Timer 0 Interrupt */
	#define BMSK_MFD_HOST_INT_STAT_RESERVED3	(1<<0) /* == 0x00000001: Reserved */
	/* Register BITFIELD for MFD_HOST_INT_STAT - roff, lsb, width, mask */
	#define BITFIELD_MFD_HOST_INT_STAT_RESERVED0	 0x000c, 12, 20, 0xfffff000
	#define BITFIELD_MFD_HOST_INT_STAT_VC1_SIF_INTR	 0x000c, 11, 1, 0x00000800
	#define BITFIELD_MFD_HOST_INT_STAT_RESERVED1	 0x000c, 10, 1, 0x00000400
	#define BITFIELD_MFD_HOST_INT_STAT_H264_SIF_INTR	 0x000c, 9, 1, 0x00000200
	#define BITFIELD_MFD_HOST_INT_STAT_RESERVED2	 0x000c, 8, 1, 0x00000100
	#define BITFIELD_MFD_HOST_INT_STAT_GBL_SIF_INTR	 0x000c, 7, 1, 0x00000080
	#define BITFIELD_MFD_HOST_INT_STAT_DMA_INTR	 0x000c, 6, 1, 0x00000040
	#define BITFIELD_MFD_HOST_INT_STAT_CORE_INTR	 0x000c, 5, 1, 0x00000020
	#define BITFIELD_MFD_HOST_INT_STAT_SCD_INTR	 0x000c, 4, 1, 0x00000010
	#define BITFIELD_MFD_HOST_INT_STAT_SIF_INTR	 0x000c, 3, 1, 0x00000008
	#define BITFIELD_MFD_HOST_INT_STAT_MFD_TIMER1_INTR	 0x000c, 2, 1, 0x00000004
	#define BITFIELD_MFD_HOST_INT_STAT_MFD_TIMER0_INTR	 0x000c, 1, 1, 0x00000002
	#define BITFIELD_MFD_HOST_INT_STAT_RESERVED3	 0x000c, 0, 1, 0x00000001
#define ROFF_MFD_DECODER_SEL	0x10 /* MFD DECODER SEL */ 
	#define BITFIELD_MFD_DECODER_SEL	 0x0010, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_DECODER_SEL */
	#define BLSB_MFD_DECODER_SEL_RESERVED	1
	#define BLSB_MFD_DECODER_SEL_RSB	0
	/* Register Bit Widths for MFD_DECODER_SEL */
	#define BWID_MFD_DECODER_SEL_RESERVED	31
	#define BWID_MFD_DECODER_SEL_RSB	1
	/* Register Bit MASKS for MFD_DECODER_SEL */
	#define BMSK_MFD_DECODER_SEL_RESERVED	0xfffffffe /* Reserved */
	#define BMSK_MFD_DECODER_SEL_RSB	(1<<0) /* == 0x00000001: 0=h264 access to RSB. 1=VC1 access to RSB */
	/* Register BITFIELD for MFD_DECODER_SEL - roff, lsb, width, mask */
	#define BITFIELD_MFD_DECODER_SEL_RESERVED	 0x0010, 1, 31, 0xfffffffe
	#define BITFIELD_MFD_DECODER_SEL_RSB	 0x0010, 0, 1, 0x00000001
#define ROFF_MFD_HOST_INT_EN	0x14 /* MFD HOST INT EN */ 
	#define BITFIELD_MFD_HOST_INT_EN	 0x0014, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_HOST_INT_EN */
	#define BLSB_MFD_HOST_INT_EN_RESERVED0	12
	#define BLSB_MFD_HOST_INT_EN_VC1_SIF_INTR_EN	11
	#define BLSB_MFD_HOST_INT_EN_RESERVED1	10
	#define BLSB_MFD_HOST_INT_EN_H264_SIF_INTR_EN	9
	#define BLSB_MFD_HOST_INT_EN_RESERVED2	8
	#define BLSB_MFD_HOST_INT_EN_GBL_SIF_INTR_EN	7
	#define BLSB_MFD_HOST_INT_EN_DMA_INTR_EN	6
	#define BLSB_MFD_HOST_INT_EN_CORE_INTR_EN	5
	#define BLSB_MFD_HOST_INT_EN_SCD_INTR_EN	4
	#define BLSB_MFD_HOST_INT_EN_SIF_INTR_EN	3
	#define BLSB_MFD_HOST_INT_EN_MFD_TIMER1_INTR_EN	2
	#define BLSB_MFD_HOST_INT_EN_MFD_TIMER0_INTR_EN	1
	#define BLSB_MFD_HOST_INT_EN_RESERVED3	0
	/* Register Bit Widths for MFD_HOST_INT_EN */
	#define BWID_MFD_HOST_INT_EN_RESERVED0	20
	#define BWID_MFD_HOST_INT_EN_VC1_SIF_INTR_EN	1
	#define BWID_MFD_HOST_INT_EN_RESERVED1	1
	#define BWID_MFD_HOST_INT_EN_H264_SIF_INTR_EN	1
	#define BWID_MFD_HOST_INT_EN_RESERVED2	1
	#define BWID_MFD_HOST_INT_EN_GBL_SIF_INTR_EN	1
	#define BWID_MFD_HOST_INT_EN_DMA_INTR_EN	1
	#define BWID_MFD_HOST_INT_EN_CORE_INTR_EN	1
	#define BWID_MFD_HOST_INT_EN_SCD_INTR_EN	1
	#define BWID_MFD_HOST_INT_EN_SIF_INTR_EN	1
	#define BWID_MFD_HOST_INT_EN_MFD_TIMER1_INTR_EN	1
	#define BWID_MFD_HOST_INT_EN_MFD_TIMER0_INTR_EN	1
	#define BWID_MFD_HOST_INT_EN_RESERVED3	1
	/* Register Bit MASKS for MFD_HOST_INT_EN */
	#define BMSK_MFD_HOST_INT_EN_RESERVED0	0xfffff000 /* Reserved */
	#define BMSK_MFD_HOST_INT_EN_VC1_SIF_INTR_EN	(1<<11) /* == 0x00000800: VC1 Slice 0 generated semaphore Interrupt Enable */
	#define BMSK_MFD_HOST_INT_EN_RESERVED1	(1<<10) /* == 0x00000400: reserved */
	#define BMSK_MFD_HOST_INT_EN_H264_SIF_INTR_EN	(1<<9) /* == 0x00000200: H264 Slice ) generated semaphore interrupt Enable */
	#define BMSK_MFD_HOST_INT_EN_RESERVED2	(1<<8) /* == 0x00000100: reserved */
	#define BMSK_MFD_HOST_INT_EN_GBL_SIF_INTR_EN	(1<<7) /* == 0x00000080: Global SIF interrupt Enable */
	#define BMSK_MFD_HOST_INT_EN_DMA_INTR_EN	(1<<6) /* == 0x00000040: DMA Interrupt Enable */
	#define BMSK_MFD_HOST_INT_EN_CORE_INTR_EN	(1<<5) /* == 0x00000020: Slice Decoder and Mini- pipeline Interrupt Enable */
	#define BMSK_MFD_HOST_INT_EN_SCD_INTR_EN	(1<<4) /* == 0x00000010: SCD Interrupt Enable */
	#define BMSK_MFD_HOST_INT_EN_SIF_INTR_EN	(1<<3) /* == 0x00000008: SIF Interrupt Enable */
	#define BMSK_MFD_HOST_INT_EN_MFD_TIMER1_INTR_EN	(1<<2) /* == 0x00000004: MFD Timer1 Interrupt Enable */
	#define BMSK_MFD_HOST_INT_EN_MFD_TIMER0_INTR_EN	(1<<1) /* == 0x00000002: MFD Timer 0 Interrupt Enable */
	#define BMSK_MFD_HOST_INT_EN_RESERVED3	(1<<0) /* == 0x00000001: Reserved */
	/* Register BITFIELD for MFD_HOST_INT_EN - roff, lsb, width, mask */
	#define BITFIELD_MFD_HOST_INT_EN_RESERVED0	 0x0014, 12, 20, 0xfffff000
	#define BITFIELD_MFD_HOST_INT_EN_VC1_SIF_INTR_EN	 0x0014, 11, 1, 0x00000800
	#define BITFIELD_MFD_HOST_INT_EN_RESERVED1	 0x0014, 10, 1, 0x00000400
	#define BITFIELD_MFD_HOST_INT_EN_H264_SIF_INTR_EN	 0x0014, 9, 1, 0x00000200
	#define BITFIELD_MFD_HOST_INT_EN_RESERVED2	 0x0014, 8, 1, 0x00000100
	#define BITFIELD_MFD_HOST_INT_EN_GBL_SIF_INTR_EN	 0x0014, 7, 1, 0x00000080
	#define BITFIELD_MFD_HOST_INT_EN_DMA_INTR_EN	 0x0014, 6, 1, 0x00000040
	#define BITFIELD_MFD_HOST_INT_EN_CORE_INTR_EN	 0x0014, 5, 1, 0x00000020
	#define BITFIELD_MFD_HOST_INT_EN_SCD_INTR_EN	 0x0014, 4, 1, 0x00000010
	#define BITFIELD_MFD_HOST_INT_EN_SIF_INTR_EN	 0x0014, 3, 1, 0x00000008
	#define BITFIELD_MFD_HOST_INT_EN_MFD_TIMER1_INTR_EN	 0x0014, 2, 1, 0x00000004
	#define BITFIELD_MFD_HOST_INT_EN_MFD_TIMER0_INTR_EN	 0x0014, 1, 1, 0x00000002
	#define BITFIELD_MFD_HOST_INT_EN_RESERVED3	 0x0014, 0, 1, 0x00000001
#define ROFF_MFD_SIF_SYS_PMODE	0x18 /* MFD SIF SYS PMODE */ 
	#define BITFIELD_MFD_SIF_SYS_PMODE	 0x0018, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_SIF_SYS_PMODE */
	#define BLSB_MFD_SIF_SYS_PMODE_RESERVED	18
	#define BLSB_MFD_SIF_SYS_PMODE_FW_RANGE	15
	#define BLSB_MFD_SIF_SYS_PMODE_RESERVED1	1
	#define BLSB_MFD_SIF_SYS_PMODE_AHB_APB_BRG_MODE	0
	/* Register Bit Widths for MFD_SIF_SYS_PMODE */
	#define BWID_MFD_SIF_SYS_PMODE_RESERVED	14
	#define BWID_MFD_SIF_SYS_PMODE_FW_RANGE	3
	#define BWID_MFD_SIF_SYS_PMODE_RESERVED1	14
	#define BWID_MFD_SIF_SYS_PMODE_AHB_APB_BRG_MODE	1
	/* Register Bit MASKS for MFD_SIF_SYS_PMODE */
	#define BMSK_MFD_SIF_SYS_PMODE_RESERVED	0xfffc0000 /* Reserved */
	#define BMSK_MFD_SIF_SYS_PMODE_FW_RANGE	0x00038000 /* Selects window of addresses to access code RAM */
	#define BMSK_MFD_SIF_SYS_PMODE_RESERVED1	0x00007ffe /* Reserved */
	#define BMSK_MFD_SIF_SYS_PMODE_AHB_APB_BRG_MODE	(1<<0) /* == 0x00000001: 0=normal operation, 1= debug mode */
	/* Register BITFIELD for MFD_SIF_SYS_PMODE - roff, lsb, width, mask */
	#define BITFIELD_MFD_SIF_SYS_PMODE_RESERVED	 0x0018, 18, 14, 0xfffc0000
	#define BITFIELD_MFD_SIF_SYS_PMODE_FW_RANGE	 0x0018, 15, 3, 0x00038000
	#define BITFIELD_MFD_SIF_SYS_PMODE_RESERVED1	 0x0018, 1, 14, 0x00007ffe
	#define BITFIELD_MFD_SIF_SYS_PMODE_AHB_APB_BRG_MODE	 0x0018, 0, 1, 0x00000001
#define ROFF_MFD_SIF_HOST_SMP_SET	0x1c /* MFD SIF HOST SMP SET */ 
	#define BITFIELD_MFD_SIF_HOST_SMP_SET	 0x001c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_SIF_HOST_SMP_MASK	0x20 /* MFD SIF HOST SMP MASK */ 
	#define BITFIELD_MFD_SIF_HOST_SMP_MASK	 0x0020, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_SIF_CORE_SMP_SET	0x24 /* MFD SIF CORE SMP SET */ 
	#define BITFIELD_MFD_SIF_CORE_SMP_SET	 0x0024, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_SIF_CORE_SMP_MASK	0x28 /* MFD SIF CORE SMP MASK */ 
	#define BITFIELD_MFD_SIF_CORE_SMP_MASK	 0x0028, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_SIF_HOST_SMP_DATA	0x2c /* MFD SIF HOST SMP DATA */ 
	#define BITFIELD_MFD_SIF_HOST_SMP_DATA	 0x002c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_SIF_CORE_SMP_DATA	0x30 /* MFD SIF CORE SMP DATA */ 
	#define BITFIELD_MFD_SIF_CORE_SMP_DATA	 0x0030, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_SIF_INT_STATUS	0x34 /* MFD VSPARC SIF INT STAT */ 
	#define BITFIELD_MFD_VSPARC_SIF_INT_STATUS	 0x0034, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VSPARC_SIF_INT_STATUS */
	#define BLSB_MFD_VSPARC_SIF_INT_STATUS_RESERVED	2
	#define BLSB_MFD_VSPARC_SIF_INT_STATUS_VC1_SIF_INTR	1
	#define BLSB_MFD_VSPARC_SIF_INT_STATUS_H264_SIF_INTR	0
	/* Register Bit Widths for MFD_VSPARC_SIF_INT_STATUS */
	#define BWID_MFD_VSPARC_SIF_INT_STATUS_RESERVED	30
	#define BWID_MFD_VSPARC_SIF_INT_STATUS_VC1_SIF_INTR	1
	#define BWID_MFD_VSPARC_SIF_INT_STATUS_H264_SIF_INTR	1
	/* Register Bit MASKS for MFD_VSPARC_SIF_INT_STATUS */
	#define BMSK_MFD_VSPARC_SIF_INT_STATUS_RESERVED	0xfffffffc /* Reserved */
	#define BMSK_MFD_VSPARC_SIF_INT_STATUS_VC1_SIF_INTR	(1<<1) /* == 0x00000002: VC1 Slice 0 SIF Interrupt */
	#define BMSK_MFD_VSPARC_SIF_INT_STATUS_H264_SIF_INTR	(1<<0) /* == 0x00000001: H264_SIF_Interrupt */
	/* Register BITFIELD for MFD_VSPARC_SIF_INT_STATUS - roff, lsb, width, mask */
	#define BITFIELD_MFD_VSPARC_SIF_INT_STATUS_RESERVED	 0x0034, 2, 30, 0xfffffffc
	#define BITFIELD_MFD_VSPARC_SIF_INT_STATUS_VC1_SIF_INTR	 0x0034, 1, 1, 0x00000002
	#define BITFIELD_MFD_VSPARC_SIF_INT_STATUS_H264_SIF_INTR	 0x0034, 0, 1, 0x00000001
#define ROFF_MFD_VSPARC_CORE_INT_STATUS	0x38 /* MFD VSPARC CORE INT STA */ 
	#define BITFIELD_MFD_VSPARC_CORE_INT_STATUS	 0x0038, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VSPARC_CORE_INT_STATUS */
	#define BLSB_MFD_VSPARC_CORE_INT_STATUS_RESERVED0	6
	#define BLSB_MFD_VSPARC_CORE_INT_STATUS_MPEG4_INTR	5
	#define BLSB_MFD_VSPARC_CORE_INT_STATUS_MINIPIPELINE_BSD_INTR	4
	#define BLSB_MFD_VSPARC_CORE_INT_STATUS_RESERVED1	3
	#define BLSB_MFD_VSPARC_CORE_INT_STATUS_MPG2_INTR	2
	#define BLSB_MFD_VSPARC_CORE_INT_STATUS_VC1_SIF_INTR	1
	#define BLSB_MFD_VSPARC_CORE_INT_STATUS_H264_SIF_INTR	0
	/* Register Bit Widths for MFD_VSPARC_CORE_INT_STATUS */
	#define BWID_MFD_VSPARC_CORE_INT_STATUS_RESERVED0	26
	#define BWID_MFD_VSPARC_CORE_INT_STATUS_MPEG4_INTR	1
	#define BWID_MFD_VSPARC_CORE_INT_STATUS_MINIPIPELINE_BSD_INTR	1
	#define BWID_MFD_VSPARC_CORE_INT_STATUS_RESERVED1	1
	#define BWID_MFD_VSPARC_CORE_INT_STATUS_MPG2_INTR	1
	#define BWID_MFD_VSPARC_CORE_INT_STATUS_VC1_SIF_INTR	1
	#define BWID_MFD_VSPARC_CORE_INT_STATUS_H264_SIF_INTR	1
	/* Register Bit MASKS for MFD_VSPARC_CORE_INT_STATUS */
	#define BMSK_MFD_VSPARC_CORE_INT_STATUS_RESERVED0	0xffffffc0 /* Reserved */
	#define BMSK_MFD_VSPARC_CORE_INT_STATUS_MPEG4_INTR	(1<<5) /* == 0x00000020: MPEG4VD Interrupt */
	#define BMSK_MFD_VSPARC_CORE_INT_STATUS_MINIPIPELINE_BSD_INTR	(1<<4) /* == 0x00000010: Mini-Pipeline BSD Interrupt */
	#define BMSK_MFD_VSPARC_CORE_INT_STATUS_RESERVED1	(1<<3) /* == 0x00000008: reserved */
	#define BMSK_MFD_VSPARC_CORE_INT_STATUS_MPG2_INTR	(1<<2) /* == 0x00000004: MPEG2 Pipeline Slice Interrupt */
	#define BMSK_MFD_VSPARC_CORE_INT_STATUS_VC1_SIF_INTR	(1<<1) /* == 0x00000002: VC1 Slice 0 SIF Interrupt */
	#define BMSK_MFD_VSPARC_CORE_INT_STATUS_H264_SIF_INTR	(1<<0) /* == 0x00000001: H264_SIF_Interrupt */
	/* Register BITFIELD for MFD_VSPARC_CORE_INT_STATUS - roff, lsb, width, mask */
	#define BITFIELD_MFD_VSPARC_CORE_INT_STATUS_RESERVED0	 0x0038, 6, 26, 0xffffffc0
	#define BITFIELD_MFD_VSPARC_CORE_INT_STATUS_MPEG4_INTR	 0x0038, 5, 1, 0x00000020
	#define BITFIELD_MFD_VSPARC_CORE_INT_STATUS_MINIPIPELINE_BSD_INTR	 0x0038, 4, 1, 0x00000010
	#define BITFIELD_MFD_VSPARC_CORE_INT_STATUS_RESERVED1	 0x0038, 3, 1, 0x00000008
	#define BITFIELD_MFD_VSPARC_CORE_INT_STATUS_MPG2_INTR	 0x0038, 2, 1, 0x00000004
	#define BITFIELD_MFD_VSPARC_CORE_INT_STATUS_VC1_SIF_INTR	 0x0038, 1, 1, 0x00000002
	#define BITFIELD_MFD_VSPARC_CORE_INT_STATUS_H264_SIF_INTR	 0x0038, 0, 1, 0x00000001
#define ROFF_MFD_VSPARC_SCD_INT_STATUS	0x3c /* MFD VSPARC SCD INT STAT */ 
	#define BITFIELD_MFD_VSPARC_SCD_INT_STATUS	 0x003c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VSPARC_SCD_INT_STATUS */
	#define BLSB_MFD_VSPARC_SCD_INT_STATUS_RESERVED0	6
	#define BLSB_MFD_VSPARC_SCD_INT_STATUS_MPEG4_INTR	5
	#define BLSB_MFD_VSPARC_SCD_INT_STATUS_MINIPIPELINE_BSD_INTR	4
	#define BLSB_MFD_VSPARC_SCD_INT_STATUS_RESERVED1	3
	#define BLSB_MFD_VSPARC_SCD_INT_STATUS_MPG2_INTR	2
	#define BLSB_MFD_VSPARC_SCD_INT_STATUS_VC1_SIF_INTR	1
	#define BLSB_MFD_VSPARC_SCD_INT_STATUS_H264_SIF_INTR	0
	/* Register Bit Widths for MFD_VSPARC_SCD_INT_STATUS */
	#define BWID_MFD_VSPARC_SCD_INT_STATUS_RESERVED0	26
	#define BWID_MFD_VSPARC_SCD_INT_STATUS_MPEG4_INTR	1
	#define BWID_MFD_VSPARC_SCD_INT_STATUS_MINIPIPELINE_BSD_INTR	1
	#define BWID_MFD_VSPARC_SCD_INT_STATUS_RESERVED1	1
	#define BWID_MFD_VSPARC_SCD_INT_STATUS_MPG2_INTR	1
	#define BWID_MFD_VSPARC_SCD_INT_STATUS_VC1_SIF_INTR	1
	#define BWID_MFD_VSPARC_SCD_INT_STATUS_H264_SIF_INTR	1
	/* Register Bit MASKS for MFD_VSPARC_SCD_INT_STATUS */
	#define BMSK_MFD_VSPARC_SCD_INT_STATUS_RESERVED0	0xffffffc0 /* Reserved */
	#define BMSK_MFD_VSPARC_SCD_INT_STATUS_MPEG4_INTR	(1<<5) /* == 0x00000020: MPEG4VD Interrupt */
	#define BMSK_MFD_VSPARC_SCD_INT_STATUS_MINIPIPELINE_BSD_INTR	(1<<4) /* == 0x00000010: Mini-Pipeline BSD Interrupt */
	#define BMSK_MFD_VSPARC_SCD_INT_STATUS_RESERVED1	(1<<3) /* == 0x00000008: reserved */
	#define BMSK_MFD_VSPARC_SCD_INT_STATUS_MPG2_INTR	(1<<2) /* == 0x00000004: MPEG2 Pipeline Slice Interrupt */
	#define BMSK_MFD_VSPARC_SCD_INT_STATUS_VC1_SIF_INTR	(1<<1) /* == 0x00000002: VC1 Slice 0 SIF Interrupt */
	#define BMSK_MFD_VSPARC_SCD_INT_STATUS_H264_SIF_INTR	(1<<0) /* == 0x00000001: H264_SIF_Interrupt */
	/* Register BITFIELD for MFD_VSPARC_SCD_INT_STATUS - roff, lsb, width, mask */
	#define BITFIELD_MFD_VSPARC_SCD_INT_STATUS_RESERVED0	 0x003c, 6, 26, 0xffffffc0
	#define BITFIELD_MFD_VSPARC_SCD_INT_STATUS_MPEG4_INTR	 0x003c, 5, 1, 0x00000020
	#define BITFIELD_MFD_VSPARC_SCD_INT_STATUS_MINIPIPELINE_BSD_INTR	 0x003c, 4, 1, 0x00000010
	#define BITFIELD_MFD_VSPARC_SCD_INT_STATUS_RESERVED1	 0x003c, 3, 1, 0x00000008
	#define BITFIELD_MFD_VSPARC_SCD_INT_STATUS_MPG2_INTR	 0x003c, 2, 1, 0x00000004
	#define BITFIELD_MFD_VSPARC_SCD_INT_STATUS_VC1_SIF_INTR	 0x003c, 1, 1, 0x00000002
	#define BITFIELD_MFD_VSPARC_SCD_INT_STATUS_H264_SIF_INTR	 0x003c, 0, 1, 0x00000001
#define ROFF_MFD_VSPARC_DMA_INT_STATUS	0x40 /* MFD VSPARC DMA INT STAT */ 
	#define BITFIELD_MFD_VSPARC_DMA_INT_STATUS	 0x0040, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VSPARC_DMA_INT_STATUS */
	#define BLSB_MFD_VSPARC_DMA_INT_STATUS_RESERVED0	6
	#define BLSB_MFD_VSPARC_DMA_INT_STATUS_MPEG4_INTR	5
	#define BLSB_MFD_VSPARC_DMA_INT_STATUS_MINIPIPELINE_BSD_INTR	4
	#define BLSB_MFD_VSPARC_DMA_INT_STATUS_RESERVED1	3
	#define BLSB_MFD_VSPARC_DMA_INT_STATUS_MPG2_INTR	2
	#define BLSB_MFD_VSPARC_DMA_INT_STATUS_VC1_SIF_INTR	1
	#define BLSB_MFD_VSPARC_DMA_INT_STATUS_H264_SIF_INTR	0
	/* Register Bit Widths for MFD_VSPARC_DMA_INT_STATUS */
	#define BWID_MFD_VSPARC_DMA_INT_STATUS_RESERVED0	26
	#define BWID_MFD_VSPARC_DMA_INT_STATUS_MPEG4_INTR	1
	#define BWID_MFD_VSPARC_DMA_INT_STATUS_MINIPIPELINE_BSD_INTR	1
	#define BWID_MFD_VSPARC_DMA_INT_STATUS_RESERVED1	1
	#define BWID_MFD_VSPARC_DMA_INT_STATUS_MPG2_INTR	1
	#define BWID_MFD_VSPARC_DMA_INT_STATUS_VC1_SIF_INTR	1
	#define BWID_MFD_VSPARC_DMA_INT_STATUS_H264_SIF_INTR	1
	/* Register Bit MASKS for MFD_VSPARC_DMA_INT_STATUS */
	#define BMSK_MFD_VSPARC_DMA_INT_STATUS_RESERVED0	0xffffffc0 /* Reserved */
	#define BMSK_MFD_VSPARC_DMA_INT_STATUS_MPEG4_INTR	(1<<5) /* == 0x00000020: MPEG4VD Interrupt */
	#define BMSK_MFD_VSPARC_DMA_INT_STATUS_MINIPIPELINE_BSD_INTR	(1<<4) /* == 0x00000010: Mini-Pipeline BSD Interrupt */
	#define BMSK_MFD_VSPARC_DMA_INT_STATUS_RESERVED1	(1<<3) /* == 0x00000008: reserved */
	#define BMSK_MFD_VSPARC_DMA_INT_STATUS_MPG2_INTR	(1<<2) /* == 0x00000004: MPEG2 Pipeline Slice Interrupt */
	#define BMSK_MFD_VSPARC_DMA_INT_STATUS_VC1_SIF_INTR	(1<<1) /* == 0x00000002: VC1 Slice 0 SIF Interrupt */
	#define BMSK_MFD_VSPARC_DMA_INT_STATUS_H264_SIF_INTR	(1<<0) /* == 0x00000001: H264_SIF_Interrupt */
	/* Register BITFIELD for MFD_VSPARC_DMA_INT_STATUS - roff, lsb, width, mask */
	#define BITFIELD_MFD_VSPARC_DMA_INT_STATUS_RESERVED0	 0x0040, 6, 26, 0xffffffc0
	#define BITFIELD_MFD_VSPARC_DMA_INT_STATUS_MPEG4_INTR	 0x0040, 5, 1, 0x00000020
	#define BITFIELD_MFD_VSPARC_DMA_INT_STATUS_MINIPIPELINE_BSD_INTR	 0x0040, 4, 1, 0x00000010
	#define BITFIELD_MFD_VSPARC_DMA_INT_STATUS_RESERVED1	 0x0040, 3, 1, 0x00000008
	#define BITFIELD_MFD_VSPARC_DMA_INT_STATUS_MPG2_INTR	 0x0040, 2, 1, 0x00000004
	#define BITFIELD_MFD_VSPARC_DMA_INT_STATUS_VC1_SIF_INTR	 0x0040, 1, 1, 0x00000002
	#define BITFIELD_MFD_VSPARC_DMA_INT_STATUS_H264_SIF_INTR	 0x0040, 0, 1, 0x00000001
#define ROFF_MFD_VCMH_FBW	0x48 /* MFD VCMH FBW */ 
	#define BITFIELD_MFD_VCMH_FBW	 0x0048, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VCMH_FBW */
	#define BLSB_MFD_VCMH_FBW_RESERVED	4
	#define BLSB_MFD_VCMH_FBW_VCMH_FR_BUFFER_WIDTH	0
	/* Register Bit Widths for MFD_VCMH_FBW */
	#define BWID_MFD_VCMH_FBW_RESERVED	28
	#define BWID_MFD_VCMH_FBW_VCMH_FR_BUFFER_WIDTH	4
	/* Register Bit MASKS for MFD_VCMH_FBW */
	#define BMSK_MFD_VCMH_FBW_RESERVED	0xfffffff0 /* Reserved */
	#define BMSK_MFD_VCMH_FBW_VCMH_FR_BUFFER_WIDTH	0x0000000f /* VCMH Frame Buffer Width */
	/* Register BITFIELD for MFD_VCMH_FBW - roff, lsb, width, mask */
	#define BITFIELD_MFD_VCMH_FBW_RESERVED	 0x0048, 4, 28, 0xfffffff0
	#define BITFIELD_MFD_VCMH_FBW_VCMH_FR_BUFFER_WIDTH	 0x0048, 0, 4, 0x0000000f
#define ROFF_MFD_OMAR_FW_STATUS	0x4c /* MFD OMAR FW STATUS */ 
	#define BITFIELD_MFD_OMAR_FW_STATUS	 0x004c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_OMAR_FW_DATA	0x50 /* MFD OMAR FW DATA */ 
	#define BITFIELD_MFD_OMAR_FW_DATA	 0x0050, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_SEC_STATUS	0x54 /* MFD SEC STATUS */ 
	#define BITFIELD_MFD_SEC_STATUS	 0x0054, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_SEC_STATUS */
	#define BLSB_MFD_SEC_STATUS_AV_BASE_ADDR	29
	#define BLSB_MFD_SEC_STATUS_RESERVED0	25
	#define BLSB_MFD_SEC_STATUS_AV_BASE_ADDR_LCK	24
	#define BLSB_MFD_SEC_STATUS_RESERVED1	2
	#define BLSB_MFD_SEC_STATUS_AGNT_TRSTD	1
	#define BLSB_MFD_SEC_STATUS_EXEN_ENBL	0
	/* Register Bit Widths for MFD_SEC_STATUS */
	#define BWID_MFD_SEC_STATUS_AV_BASE_ADDR	3
	#define BWID_MFD_SEC_STATUS_RESERVED0	4
	#define BWID_MFD_SEC_STATUS_AV_BASE_ADDR_LCK	1
	#define BWID_MFD_SEC_STATUS_RESERVED1	22
	#define BWID_MFD_SEC_STATUS_AGNT_TRSTD	1
	#define BWID_MFD_SEC_STATUS_EXEN_ENBL	1
	/* Register Bit MASKS for MFD_SEC_STATUS */
	#define BMSK_MFD_SEC_STATUS_AV_BASE_ADDR	0xe0000000 /* base address of the 512MB AV window */
	#define BMSK_MFD_SEC_STATUS_RESERVED0	0x1e000000 /* Reserved */
	#define BMSK_MFD_SEC_STATUS_AV_BASE_ADDR_LCK	(1<<24) /* == 0x01000000: AV_window has been locked */
	#define BMSK_MFD_SEC_STATUS_RESERVED1	0x00fffffc /* Reserved */
	#define BMSK_MFD_SEC_STATUS_AGNT_TRSTD	(1<<1) /* == 0x00000002: Determines if Global VSparc is trusted or not */
	#define BMSK_MFD_SEC_STATUS_EXEN_ENBL	(1<<0) /* == 0x00000001: Execution Enable */
	/* Register BITFIELD for MFD_SEC_STATUS - roff, lsb, width, mask */
	#define BITFIELD_MFD_SEC_STATUS_AV_BASE_ADDR	 0x0054, 29, 3, 0xe0000000
	#define BITFIELD_MFD_SEC_STATUS_RESERVED0	 0x0054, 25, 4, 0x1e000000
	#define BITFIELD_MFD_SEC_STATUS_AV_BASE_ADDR_LCK	 0x0054, 24, 1, 0x01000000
	#define BITFIELD_MFD_SEC_STATUS_RESERVED1	 0x0054, 2, 22, 0x00fffffc
	#define BITFIELD_MFD_SEC_STATUS_AGNT_TRSTD	 0x0054, 1, 1, 0x00000002
	#define BITFIELD_MFD_SEC_STATUS_EXEN_ENBL	 0x0054, 0, 1, 0x00000001
#define ROFF_MFD_SEC_THREAT	0x58 /* MFD SEC THREAT */ 
	#define BITFIELD_MFD_SEC_THREAT	 0x0058, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_SEC_THREAT */
	#define BLSB_MFD_SEC_THREAT_RESERVED	1
	#define BLSB_MFD_SEC_THREAT_SEC_THREAT	0
	/* Register Bit Widths for MFD_SEC_THREAT */
	#define BWID_MFD_SEC_THREAT_RESERVED	31
	#define BWID_MFD_SEC_THREAT_SEC_THREAT	1
	/* Register Bit MASKS for MFD_SEC_THREAT */
	#define BMSK_MFD_SEC_THREAT_RESERVED	0xfffffffe /* Reserved */
	#define BMSK_MFD_SEC_THREAT_SEC_THREAT	(1<<0) /* == 0x00000001: Security Threat bit */
	/* Register BITFIELD for MFD_SEC_THREAT - roff, lsb, width, mask */
	#define BITFIELD_MFD_SEC_THREAT_RESERVED	 0x0058, 1, 31, 0xfffffffe
	#define BITFIELD_MFD_SEC_THREAT_SEC_THREAT	 0x0058, 0, 1, 0x00000001
#define ROFF_MFD_INTC_INT_MASK	0x200 /* MFD INIC INT MASK */ 
	#define BITFIELD_MFD_INTC_INT_MASK	 0x0200, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_INTC_INT_MASK */
	#define BLSB_MFD_INTC_INT_MASK_RESERVED0	8
	#define BLSB_MFD_INTC_INT_MASK_GBL_SIF_INTR_MSK	7
	#define BLSB_MFD_INTC_INT_MASK_DMA_INTR_MSK	6
	#define BLSB_MFD_INTC_INT_MASK_CORE_INTR_MSK	5
	#define BLSB_MFD_INTC_INT_MASK_SCD_INTR_MSK	4
	#define BLSB_MFD_INTC_INT_MASK_SIF_INTR_MSK	3
	#define BLSB_MFD_INTC_INT_MASK_MFD_TIMER1_INTR_MSK	2
	#define BLSB_MFD_INTC_INT_MASK_MFD_TIMER0_INTR_MSK	1
	#define BLSB_MFD_INTC_INT_MASK_RESERVED1	0
	/* Register Bit Widths for MFD_INTC_INT_MASK */
	#define BWID_MFD_INTC_INT_MASK_RESERVED0	24
	#define BWID_MFD_INTC_INT_MASK_GBL_SIF_INTR_MSK	1
	#define BWID_MFD_INTC_INT_MASK_DMA_INTR_MSK	1
	#define BWID_MFD_INTC_INT_MASK_CORE_INTR_MSK	1
	#define BWID_MFD_INTC_INT_MASK_SCD_INTR_MSK	1
	#define BWID_MFD_INTC_INT_MASK_SIF_INTR_MSK	1
	#define BWID_MFD_INTC_INT_MASK_MFD_TIMER1_INTR_MSK	1
	#define BWID_MFD_INTC_INT_MASK_MFD_TIMER0_INTR_MSK	1
	#define BWID_MFD_INTC_INT_MASK_RESERVED1	1
	/* Register Bit MASKS for MFD_INTC_INT_MASK */
	#define BMSK_MFD_INTC_INT_MASK_RESERVED0	0xffffff00 /* Reserved */
	#define BMSK_MFD_INTC_INT_MASK_GBL_SIF_INTR_MSK	(1<<7) /* == 0x00000080: Global SIF interrupt Mask */
	#define BMSK_MFD_INTC_INT_MASK_DMA_INTR_MSK	(1<<6) /* == 0x00000040: DMA Interrupt Mask */
	#define BMSK_MFD_INTC_INT_MASK_CORE_INTR_MSK	(1<<5) /* == 0x00000020: Slice Decoder and Mini- pipeline Interrupt Mask */
	#define BMSK_MFD_INTC_INT_MASK_SCD_INTR_MSK	(1<<4) /* == 0x00000010: SCD Interrupt Mask */
	#define BMSK_MFD_INTC_INT_MASK_SIF_INTR_MSK	(1<<3) /* == 0x00000008: SIF Interrupt Mask */
	#define BMSK_MFD_INTC_INT_MASK_MFD_TIMER1_INTR_MSK	(1<<2) /* == 0x00000004: MFD Timer1 Interrupt Mask */
	#define BMSK_MFD_INTC_INT_MASK_MFD_TIMER0_INTR_MSK	(1<<1) /* == 0x00000002: MFD Timer 0 Interrupt Mask */
	#define BMSK_MFD_INTC_INT_MASK_RESERVED1	(1<<0) /* == 0x00000001: Reserved */
	/* Register BITFIELD for MFD_INTC_INT_MASK - roff, lsb, width, mask */
	#define BITFIELD_MFD_INTC_INT_MASK_RESERVED0	 0x0200, 8, 24, 0xffffff00
	#define BITFIELD_MFD_INTC_INT_MASK_GBL_SIF_INTR_MSK	 0x0200, 7, 1, 0x00000080
	#define BITFIELD_MFD_INTC_INT_MASK_DMA_INTR_MSK	 0x0200, 6, 1, 0x00000040
	#define BITFIELD_MFD_INTC_INT_MASK_CORE_INTR_MSK	 0x0200, 5, 1, 0x00000020
	#define BITFIELD_MFD_INTC_INT_MASK_SCD_INTR_MSK	 0x0200, 4, 1, 0x00000010
	#define BITFIELD_MFD_INTC_INT_MASK_SIF_INTR_MSK	 0x0200, 3, 1, 0x00000008
	#define BITFIELD_MFD_INTC_INT_MASK_MFD_TIMER1_INTR_MSK	 0x0200, 2, 1, 0x00000004
	#define BITFIELD_MFD_INTC_INT_MASK_MFD_TIMER0_INTR_MSK	 0x0200, 1, 1, 0x00000002
	#define BITFIELD_MFD_INTC_INT_MASK_RESERVED1	 0x0200, 0, 1, 0x00000001
#define ROFF_MFD_INTC_INT_PEND	0x204 /* MFD INTC INT PEND */ 
	#define BITFIELD_MFD_INTC_INT_PEND	 0x0204, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_INTC_INT_PEND */
	#define BLSB_MFD_INTC_INT_PEND_RESERVED0	8
	#define BLSB_MFD_INTC_INT_PEND_GBL_SIF_INTR_PEND	7
	#define BLSB_MFD_INTC_INT_PEND_DMA_INTR_PEND	6
	#define BLSB_MFD_INTC_INT_PEND_CORE_INTR_PEND	5
	#define BLSB_MFD_INTC_INT_PEND_SCD_INTR_PEND	4
	#define BLSB_MFD_INTC_INT_PEND_SIF_INTR_PEND	3
	#define BLSB_MFD_INTC_INT_PEND_MFD_TIMER1_INTR_PEND	2
	#define BLSB_MFD_INTC_INT_PEND_MFD_TIMER0_INTR_PEND	1
	#define BLSB_MFD_INTC_INT_PEND_RESERVED1	0
	/* Register Bit Widths for MFD_INTC_INT_PEND */
	#define BWID_MFD_INTC_INT_PEND_RESERVED0	24
	#define BWID_MFD_INTC_INT_PEND_GBL_SIF_INTR_PEND	1
	#define BWID_MFD_INTC_INT_PEND_DMA_INTR_PEND	1
	#define BWID_MFD_INTC_INT_PEND_CORE_INTR_PEND	1
	#define BWID_MFD_INTC_INT_PEND_SCD_INTR_PEND	1
	#define BWID_MFD_INTC_INT_PEND_SIF_INTR_PEND	1
	#define BWID_MFD_INTC_INT_PEND_MFD_TIMER1_INTR_PEND	1
	#define BWID_MFD_INTC_INT_PEND_MFD_TIMER0_INTR_PEND	1
	#define BWID_MFD_INTC_INT_PEND_RESERVED1	1
	/* Register Bit MASKS for MFD_INTC_INT_PEND */
	#define BMSK_MFD_INTC_INT_PEND_RESERVED0	0xffffff00 /* Reserved */
	#define BMSK_MFD_INTC_INT_PEND_GBL_SIF_INTR_PEND	(1<<7) /* == 0x00000080: Global SIF interrupt Pending */
	#define BMSK_MFD_INTC_INT_PEND_DMA_INTR_PEND	(1<<6) /* == 0x00000040: DMA Interrupt Pending */
	#define BMSK_MFD_INTC_INT_PEND_CORE_INTR_PEND	(1<<5) /* == 0x00000020: Slice Decoder and Mini- pipeline Interrupt Pending */
	#define BMSK_MFD_INTC_INT_PEND_SCD_INTR_PEND	(1<<4) /* == 0x00000010: SCD Interrupt Pending */
	#define BMSK_MFD_INTC_INT_PEND_SIF_INTR_PEND	(1<<3) /* == 0x00000008: SIF Interrupt Pending */
	#define BMSK_MFD_INTC_INT_PEND_MFD_TIMER1_INTR_PEND	(1<<2) /* == 0x00000004: MFD Timer1 Interrupt Pending */
	#define BMSK_MFD_INTC_INT_PEND_MFD_TIMER0_INTR_PEND	(1<<1) /* == 0x00000002: MFD Timer 0 Interrupt Pending */
	#define BMSK_MFD_INTC_INT_PEND_RESERVED1	(1<<0) /* == 0x00000001: Reserved */
	/* Register BITFIELD for MFD_INTC_INT_PEND - roff, lsb, width, mask */
	#define BITFIELD_MFD_INTC_INT_PEND_RESERVED0	 0x0204, 8, 24, 0xffffff00
	#define BITFIELD_MFD_INTC_INT_PEND_GBL_SIF_INTR_PEND	 0x0204, 7, 1, 0x00000080
	#define BITFIELD_MFD_INTC_INT_PEND_DMA_INTR_PEND	 0x0204, 6, 1, 0x00000040
	#define BITFIELD_MFD_INTC_INT_PEND_CORE_INTR_PEND	 0x0204, 5, 1, 0x00000020
	#define BITFIELD_MFD_INTC_INT_PEND_SCD_INTR_PEND	 0x0204, 4, 1, 0x00000010
	#define BITFIELD_MFD_INTC_INT_PEND_SIF_INTR_PEND	 0x0204, 3, 1, 0x00000008
	#define BITFIELD_MFD_INTC_INT_PEND_MFD_TIMER1_INTR_PEND	 0x0204, 2, 1, 0x00000004
	#define BITFIELD_MFD_INTC_INT_PEND_MFD_TIMER0_INTR_PEND	 0x0204, 1, 1, 0x00000002
	#define BITFIELD_MFD_INTC_INT_PEND_RESERVED1	 0x0204, 0, 1, 0x00000001
#define ROFF_MFD_INTC_INT_FORCE	0x208 /* MFD INTC INT FORCE */ 
	#define BITFIELD_MFD_INTC_INT_FORCE	 0x0208, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_INTC_INT_FORCE */
	#define BLSB_MFD_INTC_INT_FORCE_RESERVED0	8
	#define BLSB_MFD_INTC_INT_FORCE_GBL_SIF_INTR_FORCE	7
	#define BLSB_MFD_INTC_INT_FORCE_DMA_INTR_FORCE	6
	#define BLSB_MFD_INTC_INT_FORCE_CORE_INTR_FORCE	5
	#define BLSB_MFD_INTC_INT_FORCE_SCD_INTR_FORCE	4
	#define BLSB_MFD_INTC_INT_FORCE_SIF_INTR_FORCE	3
	#define BLSB_MFD_INTC_INT_FORCE_MFD_TIMER1_INTR_FORCE	2
	#define BLSB_MFD_INTC_INT_FORCE_MFD_TIMER0_INTR_FORCE	1
	#define BLSB_MFD_INTC_INT_FORCE_RESERVED1	0
	/* Register Bit Widths for MFD_INTC_INT_FORCE */
	#define BWID_MFD_INTC_INT_FORCE_RESERVED0	24
	#define BWID_MFD_INTC_INT_FORCE_GBL_SIF_INTR_FORCE	1
	#define BWID_MFD_INTC_INT_FORCE_DMA_INTR_FORCE	1
	#define BWID_MFD_INTC_INT_FORCE_CORE_INTR_FORCE	1
	#define BWID_MFD_INTC_INT_FORCE_SCD_INTR_FORCE	1
	#define BWID_MFD_INTC_INT_FORCE_SIF_INTR_FORCE	1
	#define BWID_MFD_INTC_INT_FORCE_MFD_TIMER1_INTR_FORCE	1
	#define BWID_MFD_INTC_INT_FORCE_MFD_TIMER0_INTR_FORCE	1
	#define BWID_MFD_INTC_INT_FORCE_RESERVED1	1
	/* Register Bit MASKS for MFD_INTC_INT_FORCE */
	#define BMSK_MFD_INTC_INT_FORCE_RESERVED0	0xffffff00 /* Reserved */
	#define BMSK_MFD_INTC_INT_FORCE_GBL_SIF_INTR_FORCE	(1<<7) /* == 0x00000080: Global SIF interrupt  */
	#define BMSK_MFD_INTC_INT_FORCE_DMA_INTR_FORCE	(1<<6) /* == 0x00000040: DMA Interrupt  */
	#define BMSK_MFD_INTC_INT_FORCE_CORE_INTR_FORCE	(1<<5) /* == 0x00000020: Slice Decoder and Mini- pipeline Interrupt  */
	#define BMSK_MFD_INTC_INT_FORCE_SCD_INTR_FORCE	(1<<4) /* == 0x00000010: SCD Interrupt  */
	#define BMSK_MFD_INTC_INT_FORCE_SIF_INTR_FORCE	(1<<3) /* == 0x00000008: SIF Interrupt  */
	#define BMSK_MFD_INTC_INT_FORCE_MFD_TIMER1_INTR_FORCE	(1<<2) /* == 0x00000004: MFD Timer1 Interrupt  */
	#define BMSK_MFD_INTC_INT_FORCE_MFD_TIMER0_INTR_FORCE	(1<<1) /* == 0x00000002: MFD Timer 0 Interrupt  */
	#define BMSK_MFD_INTC_INT_FORCE_RESERVED1	(1<<0) /* == 0x00000001: Reserved */
	/* Register BITFIELD for MFD_INTC_INT_FORCE - roff, lsb, width, mask */
	#define BITFIELD_MFD_INTC_INT_FORCE_RESERVED0	 0x0208, 8, 24, 0xffffff00
	#define BITFIELD_MFD_INTC_INT_FORCE_GBL_SIF_INTR_FORCE	 0x0208, 7, 1, 0x00000080
	#define BITFIELD_MFD_INTC_INT_FORCE_DMA_INTR_FORCE	 0x0208, 6, 1, 0x00000040
	#define BITFIELD_MFD_INTC_INT_FORCE_CORE_INTR_FORCE	 0x0208, 5, 1, 0x00000020
	#define BITFIELD_MFD_INTC_INT_FORCE_SCD_INTR_FORCE	 0x0208, 4, 1, 0x00000010
	#define BITFIELD_MFD_INTC_INT_FORCE_SIF_INTR_FORCE	 0x0208, 3, 1, 0x00000008
	#define BITFIELD_MFD_INTC_INT_FORCE_MFD_TIMER1_INTR_FORCE	 0x0208, 2, 1, 0x00000004
	#define BITFIELD_MFD_INTC_INT_FORCE_MFD_TIMER0_INTR_FORCE	 0x0208, 1, 1, 0x00000002
	#define BITFIELD_MFD_INTC_INT_FORCE_RESERVED1	 0x0208, 0, 1, 0x00000001
#define ROFF_MFD_INTC_CLR_INT_PEND	0x20c /* MFD INTC CLR INT PEND */ 
	#define BITFIELD_MFD_INTC_CLR_INT_PEND	 0x020c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_INTC_CLR_INT_PEND */
	#define BLSB_MFD_INTC_CLR_INT_PEND_RESERVED0	8
	#define BLSB_MFD_INTC_CLR_INT_PEND_GBL_SIF_INTR_PEND	7
	#define BLSB_MFD_INTC_CLR_INT_PEND_DMA_INTR_PEND	6
	#define BLSB_MFD_INTC_CLR_INT_PEND_CORE_INTR_PEND	5
	#define BLSB_MFD_INTC_CLR_INT_PEND_SCD_INTR_PEND	4
	#define BLSB_MFD_INTC_CLR_INT_PEND_SIF_INTR_PEND	3
	#define BLSB_MFD_INTC_CLR_INT_PEND_MFD_TIMER1_INTR_PEND	2
	#define BLSB_MFD_INTC_CLR_INT_PEND_MFD_TIMER0_INTR_PEND	1
	#define BLSB_MFD_INTC_CLR_INT_PEND_RESERVED1	0
	/* Register Bit Widths for MFD_INTC_CLR_INT_PEND */
	#define BWID_MFD_INTC_CLR_INT_PEND_RESERVED0	24
	#define BWID_MFD_INTC_CLR_INT_PEND_GBL_SIF_INTR_PEND	1
	#define BWID_MFD_INTC_CLR_INT_PEND_DMA_INTR_PEND	1
	#define BWID_MFD_INTC_CLR_INT_PEND_CORE_INTR_PEND	1
	#define BWID_MFD_INTC_CLR_INT_PEND_SCD_INTR_PEND	1
	#define BWID_MFD_INTC_CLR_INT_PEND_SIF_INTR_PEND	1
	#define BWID_MFD_INTC_CLR_INT_PEND_MFD_TIMER1_INTR_PEND	1
	#define BWID_MFD_INTC_CLR_INT_PEND_MFD_TIMER0_INTR_PEND	1
	#define BWID_MFD_INTC_CLR_INT_PEND_RESERVED1	1
	/* Register Bit MASKS for MFD_INTC_CLR_INT_PEND */
	#define BMSK_MFD_INTC_CLR_INT_PEND_RESERVED0	0xffffff00 /* Reserved */
	#define BMSK_MFD_INTC_CLR_INT_PEND_GBL_SIF_INTR_PEND	(1<<7) /* == 0x00000080: Global SIF interrupt  */
	#define BMSK_MFD_INTC_CLR_INT_PEND_DMA_INTR_PEND	(1<<6) /* == 0x00000040: DMA Interrupt  */
	#define BMSK_MFD_INTC_CLR_INT_PEND_CORE_INTR_PEND	(1<<5) /* == 0x00000020: Slice Decoder and Mini- pipeline Interrupt  */
	#define BMSK_MFD_INTC_CLR_INT_PEND_SCD_INTR_PEND	(1<<4) /* == 0x00000010: SCD Interrupt  */
	#define BMSK_MFD_INTC_CLR_INT_PEND_SIF_INTR_PEND	(1<<3) /* == 0x00000008: SIF Interrupt  */
	#define BMSK_MFD_INTC_CLR_INT_PEND_MFD_TIMER1_INTR_PEND	(1<<2) /* == 0x00000004: MFD Timer1 Interrupt  */
	#define BMSK_MFD_INTC_CLR_INT_PEND_MFD_TIMER0_INTR_PEND	(1<<1) /* == 0x00000002: MFD Timer 0 Interrupt  */
	#define BMSK_MFD_INTC_CLR_INT_PEND_RESERVED1	(1<<0) /* == 0x00000001: Reserved */
	/* Register BITFIELD for MFD_INTC_CLR_INT_PEND - roff, lsb, width, mask */
	#define BITFIELD_MFD_INTC_CLR_INT_PEND_RESERVED0	 0x020c, 8, 24, 0xffffff00
	#define BITFIELD_MFD_INTC_CLR_INT_PEND_GBL_SIF_INTR_PEND	 0x020c, 7, 1, 0x00000080
	#define BITFIELD_MFD_INTC_CLR_INT_PEND_DMA_INTR_PEND	 0x020c, 6, 1, 0x00000040
	#define BITFIELD_MFD_INTC_CLR_INT_PEND_CORE_INTR_PEND	 0x020c, 5, 1, 0x00000020
	#define BITFIELD_MFD_INTC_CLR_INT_PEND_SCD_INTR_PEND	 0x020c, 4, 1, 0x00000010
	#define BITFIELD_MFD_INTC_CLR_INT_PEND_SIF_INTR_PEND	 0x020c, 3, 1, 0x00000008
	#define BITFIELD_MFD_INTC_CLR_INT_PEND_MFD_TIMER1_INTR_PEND	 0x020c, 2, 1, 0x00000004
	#define BITFIELD_MFD_INTC_CLR_INT_PEND_MFD_TIMER0_INTR_PEND	 0x020c, 1, 1, 0x00000002
	#define BITFIELD_MFD_INTC_CLR_INT_PEND_RESERVED1	 0x020c, 0, 1, 0x00000001
#define ROFF_MFD_TIMER0_VAL	0x400 /* MFD TIMER0 VAL */ 
	#define BITFIELD_MFD_TIMER0_VAL	 0x0400, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_TIMER0_VAL */
	#define BLSB_MFD_TIMER0_VAL_RESERVED	24
	#define BLSB_MFD_TIMER0_VAL_TIMER0_VAL	0
	/* Register Bit Widths for MFD_TIMER0_VAL */
	#define BWID_MFD_TIMER0_VAL_RESERVED	8
	#define BWID_MFD_TIMER0_VAL_TIMER0_VAL	24
	/* Register Bit MASKS for MFD_TIMER0_VAL */
	#define BMSK_MFD_TIMER0_VAL_RESERVED	0xff000000 /* Reserved */
	#define BMSK_MFD_TIMER0_VAL_TIMER0_VAL	0x00ffffff /* Timer 0 Value */
	/* Register BITFIELD for MFD_TIMER0_VAL - roff, lsb, width, mask */
	#define BITFIELD_MFD_TIMER0_VAL_RESERVED	 0x0400, 24, 8, 0xff000000
	#define BITFIELD_MFD_TIMER0_VAL_TIMER0_VAL	 0x0400, 0, 24, 0x00ffffff
#define ROFF_MFD_TIMER0_LOAD	0x404 /* MFD TIMER0 LOAD */ 
	#define BITFIELD_MFD_TIMER0_LOAD	 0x0404, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_TIMER0_LOAD */
	#define BLSB_MFD_TIMER0_LOAD_RESERVED	24
	#define BLSB_MFD_TIMER0_LOAD_TIMER0_LVAL	0
	/* Register Bit Widths for MFD_TIMER0_LOAD */
	#define BWID_MFD_TIMER0_LOAD_RESERVED	8
	#define BWID_MFD_TIMER0_LOAD_TIMER0_LVAL	24
	/* Register Bit MASKS for MFD_TIMER0_LOAD */
	#define BMSK_MFD_TIMER0_LOAD_RESERVED	0xff000000 /* Reserved */
	#define BMSK_MFD_TIMER0_LOAD_TIMER0_LVAL	0x00ffffff /* Timer 0 Load Value */
	/* Register BITFIELD for MFD_TIMER0_LOAD - roff, lsb, width, mask */
	#define BITFIELD_MFD_TIMER0_LOAD_RESERVED	 0x0404, 24, 8, 0xff000000
	#define BITFIELD_MFD_TIMER0_LOAD_TIMER0_LVAL	 0x0404, 0, 24, 0x00ffffff
#define ROFF_MFD_TIMER0_CTRL	0x408 /* MFD TIMER0 CTRL */ 
	#define BITFIELD_MFD_TIMER0_CTRL	 0x0408, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_TIMER0_CTRL */
	#define BLSB_MFD_TIMER0_CTRL_RESERVED	3
	#define BLSB_MFD_TIMER0_CTRL_TIMER0_IRQ	2
	#define BLSB_MFD_TIMER0_CTRL_TIMER0_RESTART	1
	#define BLSB_MFD_TIMER0_CTRL_TIMER0_EN	0
	/* Register Bit Widths for MFD_TIMER0_CTRL */
	#define BWID_MFD_TIMER0_CTRL_RESERVED	29
	#define BWID_MFD_TIMER0_CTRL_TIMER0_IRQ	1
	#define BWID_MFD_TIMER0_CTRL_TIMER0_RESTART	1
	#define BWID_MFD_TIMER0_CTRL_TIMER0_EN	1
	/* Register Bit MASKS for MFD_TIMER0_CTRL */
	#define BMSK_MFD_TIMER0_CTRL_RESERVED	0xfffffff8 /* Reserved */
	#define BMSK_MFD_TIMER0_CTRL_TIMER0_IRQ	(1<<2) /* == 0x00000004: Timer 0 IRQ */
	#define BMSK_MFD_TIMER0_CTRL_TIMER0_RESTART	(1<<1) /* == 0x00000002: Timer 0 Restart */
	#define BMSK_MFD_TIMER0_CTRL_TIMER0_EN	(1<<0) /* == 0x00000001: Timer 0 Enable */
	/* Register BITFIELD for MFD_TIMER0_CTRL - roff, lsb, width, mask */
	#define BITFIELD_MFD_TIMER0_CTRL_RESERVED	 0x0408, 3, 29, 0xfffffff8
	#define BITFIELD_MFD_TIMER0_CTRL_TIMER0_IRQ	 0x0408, 2, 1, 0x00000004
	#define BITFIELD_MFD_TIMER0_CTRL_TIMER0_RESTART	 0x0408, 1, 1, 0x00000002
	#define BITFIELD_MFD_TIMER0_CTRL_TIMER0_EN	 0x0408, 0, 1, 0x00000001
#define ROFF_MFD_TIMER1_VAL	0x410 /* MFD TIMER1 VAL */ 
	#define BITFIELD_MFD_TIMER1_VAL	 0x0410, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_TIMER1_VAL */
	#define BLSB_MFD_TIMER1_VAL_RESERVED	24
	#define BLSB_MFD_TIMER1_VAL_TIMER1_VAL	0
	/* Register Bit Widths for MFD_TIMER1_VAL */
	#define BWID_MFD_TIMER1_VAL_RESERVED	8
	#define BWID_MFD_TIMER1_VAL_TIMER1_VAL	24
	/* Register Bit MASKS for MFD_TIMER1_VAL */
	#define BMSK_MFD_TIMER1_VAL_RESERVED	0xff000000 /* Reserved */
	#define BMSK_MFD_TIMER1_VAL_TIMER1_VAL	0x00ffffff /* Timer 1 Value */
	/* Register BITFIELD for MFD_TIMER1_VAL - roff, lsb, width, mask */
	#define BITFIELD_MFD_TIMER1_VAL_RESERVED	 0x0410, 24, 8, 0xff000000
	#define BITFIELD_MFD_TIMER1_VAL_TIMER1_VAL	 0x0410, 0, 24, 0x00ffffff
#define ROFF_MFD_TIMER1_LOAD	0x414 /* MFD TIMER1 LOAD */ 
	#define BITFIELD_MFD_TIMER1_LOAD	 0x0414, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_TIMER1_LOAD */
	#define BLSB_MFD_TIMER1_LOAD_RESERVED	24
	#define BLSB_MFD_TIMER1_LOAD_TIMER1_LVAL	0
	/* Register Bit Widths for MFD_TIMER1_LOAD */
	#define BWID_MFD_TIMER1_LOAD_RESERVED	8
	#define BWID_MFD_TIMER1_LOAD_TIMER1_LVAL	24
	/* Register Bit MASKS for MFD_TIMER1_LOAD */
	#define BMSK_MFD_TIMER1_LOAD_RESERVED	0xff000000 /* Reserved */
	#define BMSK_MFD_TIMER1_LOAD_TIMER1_LVAL	0x00ffffff /* Timer 1 Load Value */
	/* Register BITFIELD for MFD_TIMER1_LOAD - roff, lsb, width, mask */
	#define BITFIELD_MFD_TIMER1_LOAD_RESERVED	 0x0414, 24, 8, 0xff000000
	#define BITFIELD_MFD_TIMER1_LOAD_TIMER1_LVAL	 0x0414, 0, 24, 0x00ffffff
#define ROFF_MFD_TIMER1_CTRL	0x418 /* MFD TIMER1 CTRL */ 
	#define BITFIELD_MFD_TIMER1_CTRL	 0x0418, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_TIMER1_CTRL */
	#define BLSB_MFD_TIMER1_CTRL_RESERVED	3
	#define BLSB_MFD_TIMER1_CTRL_TIMER1_IRQ	2
	#define BLSB_MFD_TIMER1_CTRL_TIMER1_RESTART	1
	#define BLSB_MFD_TIMER1_CTRL_TIMER1_EN	0
	/* Register Bit Widths for MFD_TIMER1_CTRL */
	#define BWID_MFD_TIMER1_CTRL_RESERVED	29
	#define BWID_MFD_TIMER1_CTRL_TIMER1_IRQ	1
	#define BWID_MFD_TIMER1_CTRL_TIMER1_RESTART	1
	#define BWID_MFD_TIMER1_CTRL_TIMER1_EN	1
	/* Register Bit MASKS for MFD_TIMER1_CTRL */
	#define BMSK_MFD_TIMER1_CTRL_RESERVED	0xfffffff8 /* Reserved */
	#define BMSK_MFD_TIMER1_CTRL_TIMER1_IRQ	(1<<2) /* == 0x00000004: Timer 1 IRQ */
	#define BMSK_MFD_TIMER1_CTRL_TIMER1_RESTART	(1<<1) /* == 0x00000002: Timer 1 Restart */
	#define BMSK_MFD_TIMER1_CTRL_TIMER1_EN	(1<<0) /* == 0x00000001: Timer 1 Enable */
	/* Register BITFIELD for MFD_TIMER1_CTRL - roff, lsb, width, mask */
	#define BITFIELD_MFD_TIMER1_CTRL_RESERVED	 0x0418, 3, 29, 0xfffffff8
	#define BITFIELD_MFD_TIMER1_CTRL_TIMER1_IRQ	 0x0418, 2, 1, 0x00000004
	#define BITFIELD_MFD_TIMER1_CTRL_TIMER1_RESTART	 0x0418, 1, 1, 0x00000002
	#define BITFIELD_MFD_TIMER1_CTRL_TIMER1_EN	 0x0418, 0, 1, 0x00000001
#define ROFF_MFD_TIMER_SCALER	0x420 /* MFD TIMER SCALER */ 
	#define BITFIELD_MFD_TIMER_SCALER	 0x0420, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_TIMER_SCALER */
	#define BLSB_MFD_TIMER_SCALER_RESERVED	10
	#define BLSB_MFD_TIMER_SCALER_TIMER_SCALER_VAL	0
	/* Register Bit Widths for MFD_TIMER_SCALER */
	#define BWID_MFD_TIMER_SCALER_RESERVED	22
	#define BWID_MFD_TIMER_SCALER_TIMER_SCALER_VAL	10
	/* Register Bit MASKS for MFD_TIMER_SCALER */
	#define BMSK_MFD_TIMER_SCALER_RESERVED	0xfffffc00 /* Reserved */
	#define BMSK_MFD_TIMER_SCALER_TIMER_SCALER_VAL	0x000003ff /* Timer Scaler Value */
	/* Register BITFIELD for MFD_TIMER_SCALER - roff, lsb, width, mask */
	#define BITFIELD_MFD_TIMER_SCALER_RESERVED	 0x0420, 10, 22, 0xfffffc00
	#define BITFIELD_MFD_TIMER_SCALER_TIMER_SCALER_VAL	 0x0420, 0, 10, 0x000003ff
#define ROFF_MFD_TIMER_PRESET	0x424 /* MFD TIMER PRESET */ 
	#define BITFIELD_MFD_TIMER_PRESET	 0x0424, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_TIMER_PRESET */
	#define BLSB_MFD_TIMER_PRESET_RESERVED	10
	#define BLSB_MFD_TIMER_PRESET_TIMER_PRELOAD	0
	/* Register Bit Widths for MFD_TIMER_PRESET */
	#define BWID_MFD_TIMER_PRESET_RESERVED	22
	#define BWID_MFD_TIMER_PRESET_TIMER_PRELOAD	10
	/* Register Bit MASKS for MFD_TIMER_PRESET */
	#define BMSK_MFD_TIMER_PRESET_RESERVED	0xfffffc00 /* Reserved */
	#define BMSK_MFD_TIMER_PRESET_TIMER_PRELOAD	0x000003ff /* Timer Scaler Preload Value */
	/* Register BITFIELD for MFD_TIMER_PRESET - roff, lsb, width, mask */
	#define BITFIELD_MFD_TIMER_PRESET_RESERVED	 0x0424, 10, 22, 0xfffffc00
	#define BITFIELD_MFD_TIMER_PRESET_TIMER_PRELOAD	 0x0424, 0, 10, 0x000003ff
#define ROFF_MFD_LINEAR_DMA_EMA	0xa00 /* MFD LINEAR DMA EMA */ 
	#define BITFIELD_MFD_LINEAR_DMA_EMA	 0x0a00, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_LINEAR_DMA_CONF	0xa04 /* MFD LINEAR DMA CONF */ 
	#define BITFIELD_MFD_LINEAR_DMA_CONF	 0x0a04, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_LINEAR_DMA_CONF */
	#define BLSB_MFD_LINEAR_DMA_CONF_DATA_ACCESS	31
	#define BLSB_MFD_LINEAR_DMA_CONF_LOAD_STORE	30
	#define BLSB_MFD_LINEAR_DMA_CONF_NO_WORDS	16
	#define BLSB_MFD_LINEAR_DMA_CONF_BASE_ADDR_XFER	0
	/* Register Bit Widths for MFD_LINEAR_DMA_CONF */
	#define BWID_MFD_LINEAR_DMA_CONF_DATA_ACCESS	1
	#define BWID_MFD_LINEAR_DMA_CONF_LOAD_STORE	1
	#define BWID_MFD_LINEAR_DMA_CONF_NO_WORDS	14
	#define BWID_MFD_LINEAR_DMA_CONF_BASE_ADDR_XFER	16
	/* Register Bit MASKS for MFD_LINEAR_DMA_CONF */
	#define BMSK_MFD_LINEAR_DMA_CONF_DATA_ACCESS	(1<<31) /* == 0x80000000: 0=through VCMH, 1=through Hostside */
	#define BMSK_MFD_LINEAR_DMA_CONF_LOAD_STORE	(1<<30) /* == 0x40000000: 0= Store Operation 1= Load operation */
	#define BMSK_MFD_LINEAR_DMA_CONF_NO_WORDS	0x3fff0000 /* Number of 32 bit words minus 1 */
	#define BMSK_MFD_LINEAR_DMA_CONF_BASE_ADDR_XFER	0x0000ffff /* Base address in vsaprc memory for the transfer */
	/* Register BITFIELD for MFD_LINEAR_DMA_CONF - roff, lsb, width, mask */
	#define BITFIELD_MFD_LINEAR_DMA_CONF_DATA_ACCESS	 0x0a04, 31, 1, 0x80000000
	#define BITFIELD_MFD_LINEAR_DMA_CONF_LOAD_STORE	 0x0a04, 30, 1, 0x40000000
	#define BITFIELD_MFD_LINEAR_DMA_CONF_NO_WORDS	 0x0a04, 16, 14, 0x3fff0000
	#define BITFIELD_MFD_LINEAR_DMA_CONF_BASE_ADDR_XFER	 0x0a04, 0, 16, 0x0000ffff
#define ROFF_MFD_LINEAR_DMA_DO_XFER	0xa08 /* MFD LINEAR DMA DO XFER */ 
	#define BITFIELD_MFD_LINEAR_DMA_DO_XFER	 0x0a08, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_LINEAR_DMA_XFER_STAT	0xa0c /* MFD LINEAR DMA XFER STA */ 
	#define BITFIELD_MFD_LINEAR_DMA_XFER_STAT	 0x0a0c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_LINEAR_DMA_XFER_STAT */
	#define BLSB_MFD_LINEAR_DMA_XFER_STAT_RESERVED	1
	#define BLSB_MFD_LINEAR_DMA_XFER_STAT_DO_TRANSFER	0
	/* Register Bit Widths for MFD_LINEAR_DMA_XFER_STAT */
	#define BWID_MFD_LINEAR_DMA_XFER_STAT_RESERVED	31
	#define BWID_MFD_LINEAR_DMA_XFER_STAT_DO_TRANSFER	1
	/* Register Bit MASKS for MFD_LINEAR_DMA_XFER_STAT */
	#define BMSK_MFD_LINEAR_DMA_XFER_STAT_RESERVED	0xfffffffe /* Reserved */
	#define BMSK_MFD_LINEAR_DMA_XFER_STAT_DO_TRANSFER	(1<<0) /* == 0x00000001: Set hIgh when Do Transfer Instruction is sent */
	/* Register BITFIELD for MFD_LINEAR_DMA_XFER_STAT - roff, lsb, width, mask */
	#define BITFIELD_MFD_LINEAR_DMA_XFER_STAT_RESERVED	 0x0a0c, 1, 31, 0xfffffffe
	#define BITFIELD_MFD_LINEAR_DMA_XFER_STAT_DO_TRANSFER	 0x0a0c, 0, 1, 0x00000001
#define ROFF_MFD_H264_0_SMP_RD	0x1000 /* MFD H264 0 SMP RD */ 
	#define BITFIELD_MFD_H264_0_SMP_RD	 0x1000, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_SMP_RD */
	#define BLSB_MFD_H264_0_SMP_RD_SEM_HOST	16
	#define BLSB_MFD_H264_0_SMP_RD_SEM_SD	0
	/* Register Bit Widths for MFD_H264_0_SMP_RD */
	#define BWID_MFD_H264_0_SMP_RD_SEM_HOST	16
	#define BWID_MFD_H264_0_SMP_RD_SEM_SD	16
	/* Register Bit MASKS for MFD_H264_0_SMP_RD */
	#define BMSK_MFD_H264_0_SMP_RD_SEM_HOST	0xffff0000 /* Semaphore bits set by host */
	#define BMSK_MFD_H264_0_SMP_RD_SEM_SD	0x0000ffff /* Semaphore bits set by slice decoder via semaphore set register */
	/* Register BITFIELD for MFD_H264_0_SMP_RD - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_SMP_RD_SEM_HOST	 0x1000, 16, 16, 0xffff0000
	#define BITFIELD_MFD_H264_0_SMP_RD_SEM_SD	 0x1000, 0, 16, 0x0000ffff
#define ROFF_MFD_H264_0_INT_EN_RD	0x1004 /* MFD H264 0 INT EN RD */ 
	#define BITFIELD_MFD_H264_0_INT_EN_RD	 0x1004, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_INT_EN_RD */
	#define BLSB_MFD_H264_0_INT_EN_RD_SD_INT_EN	16
	#define BLSB_MFD_H264_0_INT_EN_RD_HOST_INT_MSK	0
	/* Register Bit Widths for MFD_H264_0_INT_EN_RD */
	#define BWID_MFD_H264_0_INT_EN_RD_SD_INT_EN	16
	#define BWID_MFD_H264_0_INT_EN_RD_HOST_INT_MSK	16
	/* Register Bit MASKS for MFD_H264_0_INT_EN_RD */
	#define BMSK_MFD_H264_0_INT_EN_RD_SD_INT_EN	0xffff0000 /* Slice Decoder bits in the Interrupt enable register */
	#define BMSK_MFD_H264_0_INT_EN_RD_HOST_INT_MSK	0x0000ffff /* Interrupt mask used to generate interrupts for host */
	/* Register BITFIELD for MFD_H264_0_INT_EN_RD - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_INT_EN_RD_SD_INT_EN	 0x1004, 16, 16, 0xffff0000
	#define BITFIELD_MFD_H264_0_INT_EN_RD_HOST_INT_MSK	 0x1004, 0, 16, 0x0000ffff
#define ROFF_MFD_H264_0_SMP_SET	0x1008 /* MFD H264 0 SMP SET */ 
	#define BITFIELD_MFD_H264_0_SMP_SET	 0x1008, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_SMP_SET */
	#define BLSB_MFD_H264_0_SMP_SET_RESERVED	16
	#define BLSB_MFD_H264_0_SMP_SET_H264_SLICE_SEM	2
	#define BLSB_MFD_H264_0_SMP_SET_IDR_BIT	1
	#define BLSB_MFD_H264_0_SMP_SET_FRAME_BIT	0
	/* Register Bit Widths for MFD_H264_0_SMP_SET */
	#define BWID_MFD_H264_0_SMP_SET_RESERVED	16
	#define BWID_MFD_H264_0_SMP_SET_H264_SLICE_SEM	14
	#define BWID_MFD_H264_0_SMP_SET_IDR_BIT	1
	#define BWID_MFD_H264_0_SMP_SET_FRAME_BIT	1
	/* Register Bit MASKS for MFD_H264_0_SMP_SET */
	#define BMSK_MFD_H264_0_SMP_SET_RESERVED	0xffff0000 /* Reserved */
	#define BMSK_MFD_H264_0_SMP_SET_H264_SLICE_SEM	0x0000fffc /* H264 Slice Semaphore bits */
	#define BMSK_MFD_H264_0_SMP_SET_IDR_BIT	(1<<1) /* == 0x00000002: New IDR bit */
	#define BMSK_MFD_H264_0_SMP_SET_FRAME_BIT	(1<<0) /* == 0x00000001: New Frame bit */
	/* Register BITFIELD for MFD_H264_0_SMP_SET - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_SMP_SET_RESERVED	 0x1008, 16, 16, 0xffff0000
	#define BITFIELD_MFD_H264_0_SMP_SET_H264_SLICE_SEM	 0x1008, 2, 14, 0x0000fffc
	#define BITFIELD_MFD_H264_0_SMP_SET_IDR_BIT	 0x1008, 1, 1, 0x00000002
	#define BITFIELD_MFD_H264_0_SMP_SET_FRAME_BIT	 0x1008, 0, 1, 0x00000001
#define ROFF_MFD_H264_0_SMP_CLR	0x100c /* MFD H264 0 SMP CLR */ 
	#define BITFIELD_MFD_H264_0_SMP_CLR	 0x100c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_SMP_CLR */
	#define BLSB_MFD_H264_0_SMP_CLR_CLR_HOST_SEM	16
	#define BLSB_MFD_H264_0_SMP_CLR_RESERVED	0
	/* Register Bit Widths for MFD_H264_0_SMP_CLR */
	#define BWID_MFD_H264_0_SMP_CLR_CLR_HOST_SEM	16
	#define BWID_MFD_H264_0_SMP_CLR_RESERVED	16
	/* Register Bit MASKS for MFD_H264_0_SMP_CLR */
	#define BMSK_MFD_H264_0_SMP_CLR_CLR_HOST_SEM	0xffff0000 /* Clears the host portion of semaphore register */
	#define BMSK_MFD_H264_0_SMP_CLR_RESERVED	0x0000ffff /* Reserved */
	/* Register BITFIELD for MFD_H264_0_SMP_CLR - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_SMP_CLR_CLR_HOST_SEM	 0x100c, 16, 16, 0xffff0000
	#define BITFIELD_MFD_H264_0_SMP_CLR_RESERVED	 0x100c, 0, 16, 0x0000ffff
#define ROFF_MFD_H264_0_SMP_MSK_SET	0x1010 /* MFD H264 0 SMP MSK SET */ 
	#define BITFIELD_MFD_H264_0_SMP_MSK_SET	 0x1010, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_SMP_MSK_SET */
	#define BLSB_MFD_H264_0_SMP_MSK_SET_RESERVED	16
	#define BLSB_MFD_H264_0_SMP_MSK_SET_INTR_MSK_H264	0
	/* Register Bit Widths for MFD_H264_0_SMP_MSK_SET */
	#define BWID_MFD_H264_0_SMP_MSK_SET_RESERVED	16
	#define BWID_MFD_H264_0_SMP_MSK_SET_INTR_MSK_H264	16
	/* Register Bit MASKS for MFD_H264_0_SMP_MSK_SET */
	#define BMSK_MFD_H264_0_SMP_MSK_SET_RESERVED	0xffff0000 /* Reserved */
	#define BMSK_MFD_H264_0_SMP_MSK_SET_INTR_MSK_H264	0x0000ffff /* Interrupt mask used to generate interrupts for H264 slice */
	/* Register BITFIELD for MFD_H264_0_SMP_MSK_SET - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_SMP_MSK_SET_RESERVED	 0x1010, 16, 16, 0xffff0000
	#define BITFIELD_MFD_H264_0_SMP_MSK_SET_INTR_MSK_H264	 0x1010, 0, 16, 0x0000ffff
#define ROFF_MFD_H264_0_SMP_MSK_CLR	0x1014 /* MFD H264 0 SMP MSK CLR */ 
	#define BITFIELD_MFD_H264_0_SMP_MSK_CLR	 0x1014, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_SMP_MSK_CLR */
	#define BLSB_MFD_H264_0_SMP_MSK_CLR_RESERVED	16
	#define BLSB_MFD_H264_0_SMP_MSK_CLR_INTR_MSK_H264	0
	/* Register Bit Widths for MFD_H264_0_SMP_MSK_CLR */
	#define BWID_MFD_H264_0_SMP_MSK_CLR_RESERVED	16
	#define BWID_MFD_H264_0_SMP_MSK_CLR_INTR_MSK_H264	16
	/* Register Bit MASKS for MFD_H264_0_SMP_MSK_CLR */
	#define BMSK_MFD_H264_0_SMP_MSK_CLR_RESERVED	0xffff0000 /* Reserved */
	#define BMSK_MFD_H264_0_SMP_MSK_CLR_INTR_MSK_H264	0x0000ffff /* Interrupt mask used to generate interrupts for H264 slice */
	/* Register BITFIELD for MFD_H264_0_SMP_MSK_CLR - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_SMP_MSK_CLR_RESERVED	 0x1014, 16, 16, 0xffff0000
	#define BITFIELD_MFD_H264_0_SMP_MSK_CLR_INTR_MSK_H264	 0x1014, 0, 16, 0x0000ffff
#define ROFF_MFD_H264_0_HDAT	0x1018 /* MFD H264 0 HDAT */ 
	#define BITFIELD_MFD_H264_0_HDAT	 0x1018, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_SDDAT	0x101c /* MFD H264 0 SDDAT */ 
	#define BITFIELD_MFD_H264_0_SDDAT	 0x101c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_DQ_PUSH	0x1020 /* MFD H264 0 DQ PUSH */ 
	#define BITFIELD_MFD_H264_0_DQ_PUSH	 0x1020, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_DQ_STAT	0x1024 /* MFD H264 0 DQ STAT */ 
	#define BITFIELD_MFD_H264_0_DQ_STAT	 0x1024, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_DPB_INIT	0x1040 /* MFD H264 0 DPB INIT */ 
	#define BITFIELD_MFD_H264_0_DPB_INIT	 0x1040, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_DPB_INIT */
	#define BLSB_MFD_H264_0_DPB_INIT_RESERVED0	24
	#define BLSB_MFD_H264_0_DPB_INIT_FR_WIDTH	16
	#define BLSB_MFD_H264_0_DPB_INIT_RESERVED1	8
	#define BLSB_MFD_H264_0_DPB_INIT_FR_HEIGHT	0
	/* Register Bit Widths for MFD_H264_0_DPB_INIT */
	#define BWID_MFD_H264_0_DPB_INIT_RESERVED0	8
	#define BWID_MFD_H264_0_DPB_INIT_FR_WIDTH	8
	#define BWID_MFD_H264_0_DPB_INIT_RESERVED1	8
	#define BWID_MFD_H264_0_DPB_INIT_FR_HEIGHT	8
	/* Register Bit MASKS for MFD_H264_0_DPB_INIT */
	#define BMSK_MFD_H264_0_DPB_INIT_RESERVED0	0xff000000 /* Reserved */
	#define BMSK_MFD_H264_0_DPB_INIT_FR_WIDTH	0x00ff0000 /* Frame width in macroblocks */
	#define BMSK_MFD_H264_0_DPB_INIT_RESERVED1	0x0000ff00 /* Reserved */
	#define BMSK_MFD_H264_0_DPB_INIT_FR_HEIGHT	0x000000ff /* Frame height in macroblocks */
	/* Register BITFIELD for MFD_H264_0_DPB_INIT - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_DPB_INIT_RESERVED0	 0x1040, 24, 8, 0xff000000
	#define BITFIELD_MFD_H264_0_DPB_INIT_FR_WIDTH	 0x1040, 16, 8, 0x00ff0000
	#define BITFIELD_MFD_H264_0_DPB_INIT_RESERVED1	 0x1040, 8, 8, 0x0000ff00
	#define BITFIELD_MFD_H264_0_DPB_INIT_FR_HEIGHT	 0x1040, 0, 8, 0x000000ff
#define ROFF_MFD_H264_0_DPB_FRM_SZ_STAT	0x1044 /* MFD H264 0 DPB FRM SZ STAT */ 
	#define BITFIELD_MFD_H264_0_DPB_FRM_SZ_STAT	 0x1044, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_DPB_FRM_SZ_STAT */
	#define BLSB_MFD_H264_0_DPB_FRM_SZ_STAT_RESERVED0	30
	#define BLSB_MFD_H264_0_DPB_FRM_SZ_STAT_FR_STORE_SIZE	16
	#define BLSB_MFD_H264_0_DPB_FRM_SZ_STAT_RESERVED1	15
	#define BLSB_MFD_H264_0_DPB_FRM_SZ_STAT_FR_SIZE	0
	/* Register Bit Widths for MFD_H264_0_DPB_FRM_SZ_STAT */
	#define BWID_MFD_H264_0_DPB_FRM_SZ_STAT_RESERVED0	2
	#define BWID_MFD_H264_0_DPB_FRM_SZ_STAT_FR_STORE_SIZE	14
	#define BWID_MFD_H264_0_DPB_FRM_SZ_STAT_RESERVED1	1
	#define BWID_MFD_H264_0_DPB_FRM_SZ_STAT_FR_SIZE	15
	/* Register Bit MASKS for MFD_H264_0_DPB_FRM_SZ_STAT */
	#define BMSK_MFD_H264_0_DPB_FRM_SZ_STAT_RESERVED0	0xc0000000 /* Reserved */
	#define BMSK_MFD_H264_0_DPB_FRM_SZ_STAT_FR_STORE_SIZE	0x3fff0000 /* Frame store size in kilobytes */
	#define BMSK_MFD_H264_0_DPB_FRM_SZ_STAT_RESERVED1	(1<<15) /* == 0x00008000: Reserved */
	#define BMSK_MFD_H264_0_DPB_FRM_SZ_STAT_FR_SIZE	0x00007fff /* Frame size in macroblocks */
	/* Register BITFIELD for MFD_H264_0_DPB_FRM_SZ_STAT - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_DPB_FRM_SZ_STAT_RESERVED0	 0x1044, 30, 2, 0xc0000000
	#define BITFIELD_MFD_H264_0_DPB_FRM_SZ_STAT_FR_STORE_SIZE	 0x1044, 16, 14, 0x3fff0000
	#define BITFIELD_MFD_H264_0_DPB_FRM_SZ_STAT_RESERVED1	 0x1044, 15, 1, 0x00008000
	#define BITFIELD_MFD_H264_0_DPB_FRM_SZ_STAT_FR_SIZE	 0x1044, 0, 15, 0x00007fff
#define ROFF_MFD_H264_0_DPB_FRM_SZ_CTRL	0x1048 /* MFD H264 0 DPB FRM SZ CTRL */ 
	#define BITFIELD_MFD_H264_0_DPB_FRM_SZ_CTRL	 0x1048, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_DPB_FRM_SZ_CTRL */
	#define BLSB_MFD_H264_0_DPB_FRM_SZ_CTRL_RESERVED0	30
	#define BLSB_MFD_H264_0_DPB_FRM_SZ_CTRL_FR_STORE_SIZE	16
	#define BLSB_MFD_H264_0_DPB_FRM_SZ_CTRL_RESERVED1	15
	#define BLSB_MFD_H264_0_DPB_FRM_SZ_CTRL_FR_SIZE	0
	/* Register Bit Widths for MFD_H264_0_DPB_FRM_SZ_CTRL */
	#define BWID_MFD_H264_0_DPB_FRM_SZ_CTRL_RESERVED0	2
	#define BWID_MFD_H264_0_DPB_FRM_SZ_CTRL_FR_STORE_SIZE	14
	#define BWID_MFD_H264_0_DPB_FRM_SZ_CTRL_RESERVED1	1
	#define BWID_MFD_H264_0_DPB_FRM_SZ_CTRL_FR_SIZE	15
	/* Register Bit MASKS for MFD_H264_0_DPB_FRM_SZ_CTRL */
	#define BMSK_MFD_H264_0_DPB_FRM_SZ_CTRL_RESERVED0	0xc0000000 /* Reserved */
	#define BMSK_MFD_H264_0_DPB_FRM_SZ_CTRL_FR_STORE_SIZE	0x3fff0000 /* Frame store size in kilobytes */
	#define BMSK_MFD_H264_0_DPB_FRM_SZ_CTRL_RESERVED1	(1<<15) /* == 0x00008000: Reserved */
	#define BMSK_MFD_H264_0_DPB_FRM_SZ_CTRL_FR_SIZE	0x00007fff /* Frame size in macroblocks */
	/* Register BITFIELD for MFD_H264_0_DPB_FRM_SZ_CTRL - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_DPB_FRM_SZ_CTRL_RESERVED0	 0x1048, 30, 2, 0xc0000000
	#define BITFIELD_MFD_H264_0_DPB_FRM_SZ_CTRL_FR_STORE_SIZE	 0x1048, 16, 14, 0x3fff0000
	#define BITFIELD_MFD_H264_0_DPB_FRM_SZ_CTRL_RESERVED1	 0x1048, 15, 1, 0x00008000
	#define BITFIELD_MFD_H264_0_DPB_FRM_SZ_CTRL_FR_SIZE	 0x1048, 0, 15, 0x00007fff
#define ROFF_MFD_H264_0_DPB_NUMB_OVR	0x104c /* MFD H264 0 DPB NUMB OVR */ 
	#define BITFIELD_MFD_H264_0_DPB_NUMB_OVR	 0x104c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_DPB_NUMB_OVR */
	#define BLSB_MFD_H264_0_DPB_NUMB_OVR_RESERVED	5
	#define BLSB_MFD_H264_0_DPB_NUMB_OVR_DISP_DPB_NUMB	0
	/* Register Bit Widths for MFD_H264_0_DPB_NUMB_OVR */
	#define BWID_MFD_H264_0_DPB_NUMB_OVR_RESERVED	27
	#define BWID_MFD_H264_0_DPB_NUMB_OVR_DISP_DPB_NUMB	5
	/* Register Bit MASKS for MFD_H264_0_DPB_NUMB_OVR */
	#define BMSK_MFD_H264_0_DPB_NUMB_OVR_RESERVED	0xffffffe0 /* Reserved */
	#define BMSK_MFD_H264_0_DPB_NUMB_OVR_DISP_DPB_NUMB	0x0000001f /* Used to read/write to disp_dpb_numb */
	/* Register BITFIELD for MFD_H264_0_DPB_NUMB_OVR - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_DPB_NUMB_OVR_RESERVED	 0x104c, 5, 27, 0xffffffe0
	#define BITFIELD_MFD_H264_0_DPB_NUMB_OVR_DISP_DPB_NUMB	 0x104c, 0, 5, 0x0000001f
#define ROFF_MFD_H264_0_DANGLING_FIELD	0x105c /* MFD H264 0 DANGLING FIELD */ 
	#define BITFIELD_MFD_H264_0_DANGLING_FIELD	 0x105c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_DANGLING_FIELD */
	#define BLSB_MFD_H264_0_DANGLING_FIELD_RESERVED	1
	#define BLSB_MFD_H264_0_DANGLING_FIELD_DANGLING_FIELD	0
	/* Register Bit Widths for MFD_H264_0_DANGLING_FIELD */
	#define BWID_MFD_H264_0_DANGLING_FIELD_RESERVED	31
	#define BWID_MFD_H264_0_DANGLING_FIELD_DANGLING_FIELD	1
	/* Register Bit MASKS for MFD_H264_0_DANGLING_FIELD */
	#define BMSK_MFD_H264_0_DANGLING_FIELD_RESERVED	0xfffffffe /* Reserved */
	#define BMSK_MFD_H264_0_DANGLING_FIELD_DANGLING_FIELD	(1<<0) /* == 0x00000001: Dangling Field */
	/* Register BITFIELD for MFD_H264_0_DANGLING_FIELD - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_DANGLING_FIELD_RESERVED	 0x105c, 1, 31, 0xfffffffe
	#define BITFIELD_MFD_H264_0_DANGLING_FIELD_DANGLING_FIELD	 0x105c, 0, 1, 0x00000001
#define ROFF_MFD_H264_0_DISP_TAG	0x1060 /* MFD H264 0 DISP TAG */ 
	#define BITFIELD_MFD_H264_0_DISP_TAG	 0x1060, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_DISP_TAG */
	#define BLSB_MFD_H264_0_DISP_TAG_RESERVED0	25
	#define BLSB_MFD_H264_0_DISP_TAG_OVERFLOW	24
	#define BLSB_MFD_H264_0_DISP_TAG_RESERVED1	21
	#define BLSB_MFD_H264_0_DISP_TAG_DISP_Q_CNT	16
	#define BLSB_MFD_H264_0_DISP_TAG_RESERVED2	8
	#define BLSB_MFD_H264_0_DISP_TAG_NEXT_TAG	0
	/* Register Bit Widths for MFD_H264_0_DISP_TAG */
	#define BWID_MFD_H264_0_DISP_TAG_RESERVED0	7
	#define BWID_MFD_H264_0_DISP_TAG_OVERFLOW	1
	#define BWID_MFD_H264_0_DISP_TAG_RESERVED1	3
	#define BWID_MFD_H264_0_DISP_TAG_DISP_Q_CNT	5
	#define BWID_MFD_H264_0_DISP_TAG_RESERVED2	8
	#define BWID_MFD_H264_0_DISP_TAG_NEXT_TAG	8
	/* Register Bit MASKS for MFD_H264_0_DISP_TAG */
	#define BMSK_MFD_H264_0_DISP_TAG_RESERVED0	0xfe000000 /* Reserved */
	#define BMSK_MFD_H264_0_DISP_TAG_OVERFLOW	(1<<24) /* == 0x01000000: Overflow */
	#define BMSK_MFD_H264_0_DISP_TAG_RESERVED1	0x00e00000 /* Reserved */
	#define BMSK_MFD_H264_0_DISP_TAG_DISP_Q_CNT	0x001f0000 /* Displayed queue count */
	#define BMSK_MFD_H264_0_DISP_TAG_RESERVED2	0x0000ff00 /* Reserved */
	#define BMSK_MFD_H264_0_DISP_TAG_NEXT_TAG	0x000000ff /* Next Tag */
	/* Register BITFIELD for MFD_H264_0_DISP_TAG - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_DISP_TAG_RESERVED0	 0x1060, 25, 7, 0xfe000000
	#define BITFIELD_MFD_H264_0_DISP_TAG_OVERFLOW	 0x1060, 24, 1, 0x01000000
	#define BITFIELD_MFD_H264_0_DISP_TAG_RESERVED1	 0x1060, 21, 3, 0x00e00000
	#define BITFIELD_MFD_H264_0_DISP_TAG_DISP_Q_CNT	 0x1060, 16, 5, 0x001f0000
	#define BITFIELD_MFD_H264_0_DISP_TAG_RESERVED2	 0x1060, 8, 8, 0x0000ff00
	#define BITFIELD_MFD_H264_0_DISP_TAG_NEXT_TAG	 0x1060, 0, 8, 0x000000ff
#define ROFF_MFD_H264_0_DPB_MBI_ADDR_LUT_WR	0x107c /* MFD H264 0 DPB MBI ADDR LUT WR */ 
	#define BITFIELD_MFD_H264_0_DPB_MBI_ADDR_LUT_WR	 0x107c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_DPB_MBI_ADDR_LUT_WR */
	#define BLSB_MFD_H264_0_DPB_MBI_ADDR_LUT_WR_MBI_LUT_DATA	6
	#define BLSB_MFD_H264_0_DPB_MBI_ADDR_LUT_WR_RESERVED	0
	/* Register Bit Widths for MFD_H264_0_DPB_MBI_ADDR_LUT_WR */
	#define BWID_MFD_H264_0_DPB_MBI_ADDR_LUT_WR_MBI_LUT_DATA	26
	#define BWID_MFD_H264_0_DPB_MBI_ADDR_LUT_WR_RESERVED	6
	/* Register Bit MASKS for MFD_H264_0_DPB_MBI_ADDR_LUT_WR */
	#define BMSK_MFD_H264_0_DPB_MBI_ADDR_LUT_WR_MBI_LUT_DATA	0xffffffc0 /* Macroblock Info LUT data */
	#define BMSK_MFD_H264_0_DPB_MBI_ADDR_LUT_WR_RESERVED	0x0000003f /* Reserved */
	/* Register BITFIELD for MFD_H264_0_DPB_MBI_ADDR_LUT_WR - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_DPB_MBI_ADDR_LUT_WR_MBI_LUT_DATA	 0x107c, 6, 26, 0xffffffc0
	#define BITFIELD_MFD_H264_0_DPB_MBI_ADDR_LUT_WR_RESERVED	 0x107c, 0, 6, 0x0000003f
#define ROFF_MFD_H264_0_DPB_UV_ADDR_LUT_WR	0x1080 /* MFD H264 0 DPB UV ADDR LUT WR */ 
	#define BITFIELD_MFD_H264_0_DPB_UV_ADDR_LUT_WR	 0x1080, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_DPB_UV_ADDR_LUT_WR */
	#define BLSB_MFD_H264_0_DPB_UV_ADDR_LUT_WR_UV_LUT_DATA	6
	#define BLSB_MFD_H264_0_DPB_UV_ADDR_LUT_WR_RESERVED	0
	/* Register Bit Widths for MFD_H264_0_DPB_UV_ADDR_LUT_WR */
	#define BWID_MFD_H264_0_DPB_UV_ADDR_LUT_WR_UV_LUT_DATA	26
	#define BWID_MFD_H264_0_DPB_UV_ADDR_LUT_WR_RESERVED	6
	/* Register Bit MASKS for MFD_H264_0_DPB_UV_ADDR_LUT_WR */
	#define BMSK_MFD_H264_0_DPB_UV_ADDR_LUT_WR_UV_LUT_DATA	0xffffffc0 /* UV LUT data */
	#define BMSK_MFD_H264_0_DPB_UV_ADDR_LUT_WR_RESERVED	0x0000003f /* Reserved */
	/* Register BITFIELD for MFD_H264_0_DPB_UV_ADDR_LUT_WR - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_DPB_UV_ADDR_LUT_WR_UV_LUT_DATA	 0x1080, 6, 26, 0xffffffc0
	#define BITFIELD_MFD_H264_0_DPB_UV_ADDR_LUT_WR_RESERVED	 0x1080, 0, 6, 0x0000003f
#define ROFF_MFD_H264_0_DPB_Y_ADDR_LUT_WR	0x1084 /* MFD H264 0 DPB Y ADDR LUT WR */ 
	#define BITFIELD_MFD_H264_0_DPB_Y_ADDR_LUT_WR	 0x1084, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_DPB_Y_ADDR_LUT_WR */
	#define BLSB_MFD_H264_0_DPB_Y_ADDR_LUT_WR_Y_LUT_DATA	6
	#define BLSB_MFD_H264_0_DPB_Y_ADDR_LUT_WR_RESERVED	5
	#define BLSB_MFD_H264_0_DPB_Y_ADDR_LUT_WR_LUT_ACCESS_ADDR	0
	/* Register Bit Widths for MFD_H264_0_DPB_Y_ADDR_LUT_WR */
	#define BWID_MFD_H264_0_DPB_Y_ADDR_LUT_WR_Y_LUT_DATA	26
	#define BWID_MFD_H264_0_DPB_Y_ADDR_LUT_WR_RESERVED	1
	#define BWID_MFD_H264_0_DPB_Y_ADDR_LUT_WR_LUT_ACCESS_ADDR	5
	/* Register Bit MASKS for MFD_H264_0_DPB_Y_ADDR_LUT_WR */
	#define BMSK_MFD_H264_0_DPB_Y_ADDR_LUT_WR_Y_LUT_DATA	0xffffffc0 /* Macroblock Info LUT data */
	#define BMSK_MFD_H264_0_DPB_Y_ADDR_LUT_WR_RESERVED	(1<<5) /* == 0x00000020: Reserved */
	#define BMSK_MFD_H264_0_DPB_Y_ADDR_LUT_WR_LUT_ACCESS_ADDR	0x0000001f /* Address for LUT access */
	/* Register BITFIELD for MFD_H264_0_DPB_Y_ADDR_LUT_WR - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_DPB_Y_ADDR_LUT_WR_Y_LUT_DATA	 0x1084, 6, 26, 0xffffffc0
	#define BITFIELD_MFD_H264_0_DPB_Y_ADDR_LUT_WR_RESERVED	 0x1084, 5, 1, 0x00000020
	#define BITFIELD_MFD_H264_0_DPB_Y_ADDR_LUT_WR_LUT_ACCESS_ADDR	 0x1084, 0, 5, 0x0000001f
#define ROFF_MFD_H264_0_FRAME_CYC_COUNT	0x1090 /* MFD H264 0 FRAME CYC COUNT */ 
	#define BITFIELD_MFD_H264_0_FRAME_CYC_COUNT	 0x1090, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_IB_WAIT_COUNT	0x1094 /* MFD H264 0 IB WAIT COUNT */ 
	#define BITFIELD_MFD_H264_0_IB_WAIT_COUNT	 0x1094, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_RBSP_COUNT	0x1098 /* MFD H264 0 RBSP COUNT */ 
	#define BITFIELD_MFD_H264_0_RBSP_COUNT	 0x1098, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_MPR_COUNT	0x109c /* MFD H264 0 MPR COUNT */ 
	#define BITFIELD_MFD_H264_0_MPR_COUNT	 0x109c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_CORE_CONFIG	0x10a0 /* MFD H264 0 CORE CONFIG */ 
	#define BITFIELD_MFD_H264_0_CORE_CONFIG	 0x10a0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_CORE_CONFIG */
	#define BLSB_MFD_H264_0_CORE_CONFIG_MPD_BASE_UNIT_EN	0
	#define BLSB_MFD_H264_0_CORE_CONFIG_MPD_DPB_LUT_EN	1
	#define BLSB_MFD_H264_0_CORE_CONFIG_MPD_DQ_EN	2
	#define BLSB_MFD_H264_0_CORE_CONFIG_MPD_DQ_16	3
	#define BLSB_MFD_H264_0_CORE_CONFIG_MPD_BS_SYNC_EN	4
	#define BLSB_MFD_H264_0_CORE_CONFIG_MPD_USE_FS_EN	5
	#define BLSB_MFD_H264_0_CORE_CONFIG_MPD_SIF_METRICS_EN	6
	#define BLSB_MFD_H264_0_CORE_CONFIG_MPD_DBF_XOBUF_EN	7
	#define BLSB_MFD_H264_0_CORE_CONFIG_RESERVED	8
	/* Register Bit Widths for MFD_H264_0_CORE_CONFIG */
	#define BWID_MFD_H264_0_CORE_CONFIG_MPD_BASE_UNIT_EN	1
	#define BWID_MFD_H264_0_CORE_CONFIG_MPD_DPB_LUT_EN	1
	#define BWID_MFD_H264_0_CORE_CONFIG_MPD_DQ_EN	1
	#define BWID_MFD_H264_0_CORE_CONFIG_MPD_DQ_16	1
	#define BWID_MFD_H264_0_CORE_CONFIG_MPD_BS_SYNC_EN	1
	#define BWID_MFD_H264_0_CORE_CONFIG_MPD_USE_FS_EN	1
	#define BWID_MFD_H264_0_CORE_CONFIG_MPD_SIF_METRICS_EN	1
	#define BWID_MFD_H264_0_CORE_CONFIG_MPD_DBF_XOBUF_EN	1
	#define BWID_MFD_H264_0_CORE_CONFIG_RESERVED	24
	/* Register Bit MASKS for MFD_H264_0_CORE_CONFIG */
	#define BMSK_MFD_H264_0_CORE_CONFIG_MPD_BASE_UNIT_EN	(1<<0) /* == 0x00000001: MPD_BASE_UNIT_ENABLE */
	#define BMSK_MFD_H264_0_CORE_CONFIG_MPD_DPB_LUT_EN	(1<<1) /* == 0x00000002: MPD_DPB_LUT_ENABLE */
	#define BMSK_MFD_H264_0_CORE_CONFIG_MPD_DQ_EN	(1<<2) /* == 0x00000004: MPD_DQ_ENABLE */
	#define BMSK_MFD_H264_0_CORE_CONFIG_MPD_DQ_16	(1<<3) /* == 0x00000008: MPD_DQ_16 */
	#define BMSK_MFD_H264_0_CORE_CONFIG_MPD_BS_SYNC_EN	(1<<4) /* == 0x00000010: MPD_BS_SYNC_ENABLE */
	#define BMSK_MFD_H264_0_CORE_CONFIG_MPD_USE_FS_EN	(1<<5) /* == 0x00000020: MPD_USE_FS_ENABLE */
	#define BMSK_MFD_H264_0_CORE_CONFIG_MPD_SIF_METRICS_EN	(1<<6) /* == 0x00000040: MPD_SIF_METRICS_ENABLE */
	#define BMSK_MFD_H264_0_CORE_CONFIG_MPD_DBF_XOBUF_EN	(1<<7) /* == 0x00000080: MPD_DBF_XOBUF_ENABLE */
	#define BMSK_MFD_H264_0_CORE_CONFIG_RESERVED	0xffffff00 /* Reserved */
	/* Register BITFIELD for MFD_H264_0_CORE_CONFIG - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_CORE_CONFIG_MPD_BASE_UNIT_EN	 0x10a0, 0, 1, 0x00000001
	#define BITFIELD_MFD_H264_0_CORE_CONFIG_MPD_DPB_LUT_EN	 0x10a0, 1, 1, 0x00000002
	#define BITFIELD_MFD_H264_0_CORE_CONFIG_MPD_DQ_EN	 0x10a0, 2, 1, 0x00000004
	#define BITFIELD_MFD_H264_0_CORE_CONFIG_MPD_DQ_16	 0x10a0, 3, 1, 0x00000008
	#define BITFIELD_MFD_H264_0_CORE_CONFIG_MPD_BS_SYNC_EN	 0x10a0, 4, 1, 0x00000010
	#define BITFIELD_MFD_H264_0_CORE_CONFIG_MPD_USE_FS_EN	 0x10a0, 5, 1, 0x00000020
	#define BITFIELD_MFD_H264_0_CORE_CONFIG_MPD_SIF_METRICS_EN	 0x10a0, 6, 1, 0x00000040
	#define BITFIELD_MFD_H264_0_CORE_CONFIG_MPD_DBF_XOBUF_EN	 0x10a0, 7, 1, 0x00000080
	#define BITFIELD_MFD_H264_0_CORE_CONFIG_RESERVED	 0x10a0, 8, 24, 0xffffff00
#define ROFF_MFD_H264_0_INT_CTRL	0x10c0 /* MFD H264 0 INT CTRL */ 
	#define BITFIELD_MFD_H264_0_INT_CTRL	 0x10c0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_INT_CTRL */
	#define BLSB_MFD_H264_0_INT_CTRL_CORE_EN	0
	#define BLSB_MFD_H264_0_INT_CTRL_FR_INTR	1
	#define BLSB_MFD_H264_0_INT_CTRL_SLICE_INTR	2
	#define BLSB_MFD_H264_0_INT_CTRL_SC_INTR	3
	#define BLSB_MFD_H264_0_INT_CTRL_RESERVED0	4
	#define BLSB_MFD_H264_0_INT_CTRL_DISP_Q	7
	#define BLSB_MFD_H264_0_INT_CTRL_RESERVED1	8
	/* Register Bit Widths for MFD_H264_0_INT_CTRL */
	#define BWID_MFD_H264_0_INT_CTRL_CORE_EN	1
	#define BWID_MFD_H264_0_INT_CTRL_FR_INTR	1
	#define BWID_MFD_H264_0_INT_CTRL_SLICE_INTR	1
	#define BWID_MFD_H264_0_INT_CTRL_SC_INTR	1
	#define BWID_MFD_H264_0_INT_CTRL_RESERVED0	3
	#define BWID_MFD_H264_0_INT_CTRL_DISP_Q	1
	#define BWID_MFD_H264_0_INT_CTRL_RESERVED1	24
	/* Register Bit MASKS for MFD_H264_0_INT_CTRL */
	#define BMSK_MFD_H264_0_INT_CTRL_CORE_EN	(1<<0) /* == 0x00000001: Core Enable bit */
	#define BMSK_MFD_H264_0_INT_CTRL_FR_INTR	(1<<1) /* == 0x00000002: Frame Interrupt bit */
	#define BMSK_MFD_H264_0_INT_CTRL_SLICE_INTR	(1<<2) /* == 0x00000004: Slice Interrupt bit */
	#define BMSK_MFD_H264_0_INT_CTRL_SC_INTR	(1<<3) /* == 0x00000008: Start Code interrupt bit */
	#define BMSK_MFD_H264_0_INT_CTRL_RESERVED0	0x00000070 /* Reserved */
	#define BMSK_MFD_H264_0_INT_CTRL_DISP_Q	(1<<7) /* == 0x00000080: Use of display queue for signalling displayed frames */
	#define BMSK_MFD_H264_0_INT_CTRL_RESERVED1	0xffffff00 /* Reserved */
	/* Register BITFIELD for MFD_H264_0_INT_CTRL - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_INT_CTRL_CORE_EN	 0x10c0, 0, 1, 0x00000001
	#define BITFIELD_MFD_H264_0_INT_CTRL_FR_INTR	 0x10c0, 1, 1, 0x00000002
	#define BITFIELD_MFD_H264_0_INT_CTRL_SLICE_INTR	 0x10c0, 2, 1, 0x00000004
	#define BITFIELD_MFD_H264_0_INT_CTRL_SC_INTR	 0x10c0, 3, 1, 0x00000008
	#define BITFIELD_MFD_H264_0_INT_CTRL_RESERVED0	 0x10c0, 4, 3, 0x00000070
	#define BITFIELD_MFD_H264_0_INT_CTRL_DISP_Q	 0x10c0, 7, 1, 0x00000080
	#define BITFIELD_MFD_H264_0_INT_CTRL_RESERVED1	 0x10c0, 8, 24, 0xffffff00
#define ROFF_MFD_H264_0_INT_STAT	0x10c4 /* MFD H264 0 INT STAT */ 
	#define BITFIELD_MFD_H264_0_INT_STAT	 0x10c4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_INT_STAT */
	#define BLSB_MFD_H264_0_INT_STAT_SEM_BIT	0
	#define BLSB_MFD_H264_0_INT_STAT_FRM_INT_BIT	1
	#define BLSB_MFD_H264_0_INT_STAT_SLICE_INT_BIT	2
	#define BLSB_MFD_H264_0_INT_STAT_SC_INTR_BIT	3
	#define BLSB_MFD_H264_0_INT_STAT_RESERVED	4
	/* Register Bit Widths for MFD_H264_0_INT_STAT */
	#define BWID_MFD_H264_0_INT_STAT_SEM_BIT	1
	#define BWID_MFD_H264_0_INT_STAT_FRM_INT_BIT	1
	#define BWID_MFD_H264_0_INT_STAT_SLICE_INT_BIT	1
	#define BWID_MFD_H264_0_INT_STAT_SC_INTR_BIT	1
	#define BWID_MFD_H264_0_INT_STAT_RESERVED	28
	/* Register Bit MASKS for MFD_H264_0_INT_STAT */
	#define BMSK_MFD_H264_0_INT_STAT_SEM_BIT	(1<<0) /* == 0x00000001: Semaphore Interrupt bit */
	#define BMSK_MFD_H264_0_INT_STAT_FRM_INT_BIT	(1<<1) /* == 0x00000002: Frame Interrupt bit */
	#define BMSK_MFD_H264_0_INT_STAT_SLICE_INT_BIT	(1<<2) /* == 0x00000004: Slice Interrupt bit */
	#define BMSK_MFD_H264_0_INT_STAT_SC_INTR_BIT	(1<<3) /* == 0x00000008: Start Code Interrupt bit */
	#define BMSK_MFD_H264_0_INT_STAT_RESERVED	0xfffffff0 /* Reserved */
	/* Register BITFIELD for MFD_H264_0_INT_STAT - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_INT_STAT_SEM_BIT	 0x10c4, 0, 1, 0x00000001
	#define BITFIELD_MFD_H264_0_INT_STAT_FRM_INT_BIT	 0x10c4, 1, 1, 0x00000002
	#define BITFIELD_MFD_H264_0_INT_STAT_SLICE_INT_BIT	 0x10c4, 2, 1, 0x00000004
	#define BITFIELD_MFD_H264_0_INT_STAT_SC_INTR_BIT	 0x10c4, 3, 1, 0x00000008
	#define BITFIELD_MFD_H264_0_INT_STAT_RESERVED	 0x10c4, 4, 28, 0xfffffff0
#define ROFF_MFD_H264_0_SOFT_RST	0x10fc /* MFD H264 0 SOFT RST */ 
	#define BITFIELD_MFD_H264_0_SOFT_RST	 0x10fc, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_SOFT_RST */
	#define BLSB_MFD_H264_0_SOFT_RST_RESERVED	3
	#define BLSB_MFD_H264_0_SOFT_RST_DQ_RST	2
	#define BLSB_MFD_H264_0_SOFT_RST_BSD_IB_RST	1
	#define BLSB_MFD_H264_0_SOFT_RST_SDE_RST	0
	/* Register Bit Widths for MFD_H264_0_SOFT_RST */
	#define BWID_MFD_H264_0_SOFT_RST_RESERVED	29
	#define BWID_MFD_H264_0_SOFT_RST_DQ_RST	1
	#define BWID_MFD_H264_0_SOFT_RST_BSD_IB_RST	1
	#define BWID_MFD_H264_0_SOFT_RST_SDE_RST	1
	/* Register Bit MASKS for MFD_H264_0_SOFT_RST */
	#define BMSK_MFD_H264_0_SOFT_RST_RESERVED	0xfffffff8 /* Reserved */
	#define BMSK_MFD_H264_0_SOFT_RST_DQ_RST	(1<<2) /* == 0x00000004: Reset display queue */
	#define BMSK_MFD_H264_0_SOFT_RST_BSD_IB_RST	(1<<1) /* == 0x00000002: Reset BSD input buffer */
	#define BMSK_MFD_H264_0_SOFT_RST_SDE_RST	(1<<0) /* == 0x00000001: Reset Slice Decode Engine */
	/* Register BITFIELD for MFD_H264_0_SOFT_RST - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_SOFT_RST_RESERVED	 0x10fc, 3, 29, 0xfffffff8
	#define BITFIELD_MFD_H264_0_SOFT_RST_DQ_RST	 0x10fc, 2, 1, 0x00000004
	#define BITFIELD_MFD_H264_0_SOFT_RST_BSD_IB_RST	 0x10fc, 1, 1, 0x00000002
	#define BITFIELD_MFD_H264_0_SOFT_RST_SDE_RST	 0x10fc, 0, 1, 0x00000001
#define ROFF_MFD_H264_0_BSD_PSR_STAT	0x1100 /* MFD H264 0 BSD PSR STAT */ 
	#define BITFIELD_MFD_H264_0_BSD_PSR_STAT	 0x1100, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_BSD_STAT	0x1104 /* MFD H264 0 BSD STAT */ 
	#define BITFIELD_MFD_H264_0_BSD_STAT	 0x1104, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_STAT */
	#define BLSB_MFD_H264_0_BSD_STAT_CURRENT_MB_NUM	16
	#define BLSB_MFD_H264_0_BSD_STAT_RESERVED	12
	#define BLSB_MFD_H264_0_BSD_STAT_DATA_UNDERFLOW	11
	#define BLSB_MFD_H264_0_BSD_STAT_BS_SI_FLAG	10
	#define BLSB_MFD_H264_0_BSD_STAT_BSD_DEC_DATA_ERR	9
	#define BLSB_MFD_H264_0_BSD_STAT_MPR_ERR	8
	#define BLSB_MFD_H264_0_BSD_STAT_PXD_ERR	7
	#define BLSB_MFD_H264_0_BSD_STAT_VLC_DEC_ERR	6
	#define BLSB_MFD_H264_0_BSD_STAT_ERR_SDEC	5
	#define BLSB_MFD_H264_0_BSD_STAT_FORCE_IP	4
	#define BLSB_MFD_H264_0_BSD_STAT_WTBL_DEC_IP	3
	#define BLSB_MFD_H264_0_BSD_STAT_FRM_IP	2
	#define BLSB_MFD_H264_0_BSD_STAT_IMG_IP	1
	#define BLSB_MFD_H264_0_BSD_STAT_SLICE_IP	0
	/* Register Bit Widths for MFD_H264_0_BSD_STAT */
	#define BWID_MFD_H264_0_BSD_STAT_CURRENT_MB_NUM	16
	#define BWID_MFD_H264_0_BSD_STAT_RESERVED	4
	#define BWID_MFD_H264_0_BSD_STAT_DATA_UNDERFLOW	1
	#define BWID_MFD_H264_0_BSD_STAT_BS_SI_FLAG	1
	#define BWID_MFD_H264_0_BSD_STAT_BSD_DEC_DATA_ERR	1
	#define BWID_MFD_H264_0_BSD_STAT_MPR_ERR	1
	#define BWID_MFD_H264_0_BSD_STAT_PXD_ERR	1
	#define BWID_MFD_H264_0_BSD_STAT_VLC_DEC_ERR	1
	#define BWID_MFD_H264_0_BSD_STAT_ERR_SDEC	1
	#define BWID_MFD_H264_0_BSD_STAT_FORCE_IP	1
	#define BWID_MFD_H264_0_BSD_STAT_WTBL_DEC_IP	1
	#define BWID_MFD_H264_0_BSD_STAT_FRM_IP	1
	#define BWID_MFD_H264_0_BSD_STAT_IMG_IP	1
	#define BWID_MFD_H264_0_BSD_STAT_SLICE_IP	1
	/* Register Bit MASKS for MFD_H264_0_BSD_STAT */
	#define BMSK_MFD_H264_0_BSD_STAT_CURRENT_MB_NUM	0xffff0000 /* Current macroblock number */
	#define BMSK_MFD_H264_0_BSD_STAT_RESERVED	0x0000f000 /* Reserved */
	#define BMSK_MFD_H264_0_BSD_STAT_DATA_UNDERFLOW	(1<<11) /* == 0x00000800: Data underflow during NAL decoding */
	#define BMSK_MFD_H264_0_BSD_STAT_BS_SI_FLAG	(1<<10) /* == 0x00000400: BS_SI_FLAG enabled */
	#define BMSK_MFD_H264_0_BSD_STAT_BSD_DEC_DATA_ERR	(1<<9) /* == 0x00000200: BSD_DEC_DATA_ERR */
	#define BMSK_MFD_H264_0_BSD_STAT_MPR_ERR	(1<<8) /* == 0x00000100: MPR_ERR */
	#define BMSK_MFD_H264_0_BSD_STAT_PXD_ERR	(1<<7) /* == 0x00000080: PXD_ERR */
	#define BMSK_MFD_H264_0_BSD_STAT_VLC_DEC_ERR	(1<<6) /* == 0x00000040: VLC_DEC_ERR */
	#define BMSK_MFD_H264_0_BSD_STAT_ERR_SDEC	(1<<5) /* == 0x00000020: Error in slice decode */
	#define BMSK_MFD_H264_0_BSD_STAT_FORCE_IP	(1<<4) /* == 0x00000010: Force in progress */
	#define BMSK_MFD_H264_0_BSD_STAT_WTBL_DEC_IP	(1<<3) /* == 0x00000008: weighting table decode */
	#define BMSK_MFD_H264_0_BSD_STAT_FRM_IP	(1<<2) /* == 0x00000004: frame in progress */
	#define BMSK_MFD_H264_0_BSD_STAT_IMG_IP	(1<<1) /* == 0x00000002: image in progress */
	#define BMSK_MFD_H264_0_BSD_STAT_SLICE_IP	(1<<0) /* == 0x00000001: Slice in progress */
	/* Register BITFIELD for MFD_H264_0_BSD_STAT - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_STAT_CURRENT_MB_NUM	 0x1104, 16, 16, 0xffff0000
	#define BITFIELD_MFD_H264_0_BSD_STAT_RESERVED	 0x1104, 12, 4, 0x0000f000
	#define BITFIELD_MFD_H264_0_BSD_STAT_DATA_UNDERFLOW	 0x1104, 11, 1, 0x00000800
	#define BITFIELD_MFD_H264_0_BSD_STAT_BS_SI_FLAG	 0x1104, 10, 1, 0x00000400
	#define BITFIELD_MFD_H264_0_BSD_STAT_BSD_DEC_DATA_ERR	 0x1104, 9, 1, 0x00000200
	#define BITFIELD_MFD_H264_0_BSD_STAT_MPR_ERR	 0x1104, 8, 1, 0x00000100
	#define BITFIELD_MFD_H264_0_BSD_STAT_PXD_ERR	 0x1104, 7, 1, 0x00000080
	#define BITFIELD_MFD_H264_0_BSD_STAT_VLC_DEC_ERR	 0x1104, 6, 1, 0x00000040
	#define BITFIELD_MFD_H264_0_BSD_STAT_ERR_SDEC	 0x1104, 5, 1, 0x00000020
	#define BITFIELD_MFD_H264_0_BSD_STAT_FORCE_IP	 0x1104, 4, 1, 0x00000010
	#define BITFIELD_MFD_H264_0_BSD_STAT_WTBL_DEC_IP	 0x1104, 3, 1, 0x00000008
	#define BITFIELD_MFD_H264_0_BSD_STAT_FRM_IP	 0x1104, 2, 1, 0x00000004
	#define BITFIELD_MFD_H264_0_BSD_STAT_IMG_IP	 0x1104, 1, 1, 0x00000002
	#define BITFIELD_MFD_H264_0_BSD_STAT_SLICE_IP	 0x1104, 0, 1, 0x00000001
#define ROFF_MFD_H264_0_BSD_RBSP_CTRL	0x1110 /* MFD H264 0 BSD RBSP CTRL */ 
	#define BITFIELD_MFD_H264_0_BSD_RBSP_CTRL	 0x1110, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_RBSP_CTRL */
	#define BLSB_MFD_H264_0_BSD_RBSP_CTRL_RESERVED	1
	#define BLSB_MFD_H264_0_BSD_RBSP_CTRL_DATA_PASS	0
	/* Register Bit Widths for MFD_H264_0_BSD_RBSP_CTRL */
	#define BWID_MFD_H264_0_BSD_RBSP_CTRL_RESERVED	31
	#define BWID_MFD_H264_0_BSD_RBSP_CTRL_DATA_PASS	1
	/* Register Bit MASKS for MFD_H264_0_BSD_RBSP_CTRL */
	#define BMSK_MFD_H264_0_BSD_RBSP_CTRL_RESERVED	0xfffffffe /* Reserved */
	#define BMSK_MFD_H264_0_BSD_RBSP_CTRL_DATA_PASS	(1<<0) /* == 0x00000001: Enable/disable data passing from parser to decoder */
	/* Register BITFIELD for MFD_H264_0_BSD_RBSP_CTRL - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_RBSP_CTRL_RESERVED	 0x1110, 1, 31, 0xfffffffe
	#define BITFIELD_MFD_H264_0_BSD_RBSP_CTRL_DATA_PASS	 0x1110, 0, 1, 0x00000001
#define ROFF_MFD_H264_0_BSD_DATA	0x1114 /* MFD H264 0 BSD DATA */ 
	#define BITFIELD_MFD_H264_0_BSD_DATA	 0x1114, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_BSD_NAL_TYPE	0x1118 /* MFD H264 0 BSD NAL TYPE */ 
	#define BITFIELD_MFD_H264_0_BSD_NAL_TYPE	 0x1118, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_BSD_BBB_STAT	0x111c /* MFD H264 0 BSD BBB STAT */ 
	#define BITFIELD_MFD_H264_0_BSD_BBB_STAT	 0x111c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_BBB_STAT */
	#define BLSB_MFD_H264_0_BSD_BBB_STAT_RESERVED2	25
	#define BLSB_MFD_H264_0_BSD_BBB_STAT_DATA_UNDERFLOW_NAL	24
	#define BLSB_MFD_H264_0_BSD_BBB_STAT_RESERVED1	17
	#define BLSB_MFD_H264_0_BSD_BBB_STAT_BITS_ENDED	16
	#define BLSB_MFD_H264_0_BSD_BBB_STAT_RESERVED0	6
	#define BLSB_MFD_H264_0_BSD_BBB_STAT_NUM_BITS_BBB	0
	/* Register Bit Widths for MFD_H264_0_BSD_BBB_STAT */
	#define BWID_MFD_H264_0_BSD_BBB_STAT_RESERVED2	7
	#define BWID_MFD_H264_0_BSD_BBB_STAT_DATA_UNDERFLOW_NAL	1
	#define BWID_MFD_H264_0_BSD_BBB_STAT_RESERVED1	7
	#define BWID_MFD_H264_0_BSD_BBB_STAT_BITS_ENDED	1
	#define BWID_MFD_H264_0_BSD_BBB_STAT_RESERVED0	10
	#define BWID_MFD_H264_0_BSD_BBB_STAT_NUM_BITS_BBB	6
	/* Register Bit MASKS for MFD_H264_0_BSD_BBB_STAT */
	#define BMSK_MFD_H264_0_BSD_BBB_STAT_RESERVED2	0xfe000000 /* Reserved */
	#define BMSK_MFD_H264_0_BSD_BBB_STAT_DATA_UNDERFLOW_NAL	(1<<24) /* == 0x01000000: Data underflow under NAL decoding */
	#define BMSK_MFD_H264_0_BSD_BBB_STAT_RESERVED1	0x00fe0000 /* Reserved */
	#define BMSK_MFD_H264_0_BSD_BBB_STAT_BITS_ENDED	(1<<16) /* == 0x00010000: Bits ended */
	#define BMSK_MFD_H264_0_BSD_BBB_STAT_RESERVED0	0x0000ffc0 /* Reserved */
	#define BMSK_MFD_H264_0_BSD_BBB_STAT_NUM_BITS_BBB	0x0000003f /* Number of bits in BBB */
	/* Register BITFIELD for MFD_H264_0_BSD_BBB_STAT - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_BBB_STAT_RESERVED2	 0x111c, 25, 7, 0xfe000000
	#define BITFIELD_MFD_H264_0_BSD_BBB_STAT_DATA_UNDERFLOW_NAL	 0x111c, 24, 1, 0x01000000
	#define BITFIELD_MFD_H264_0_BSD_BBB_STAT_RESERVED1	 0x111c, 17, 7, 0x00fe0000
	#define BITFIELD_MFD_H264_0_BSD_BBB_STAT_BITS_ENDED	 0x111c, 16, 1, 0x00010000
	#define BITFIELD_MFD_H264_0_BSD_BBB_STAT_RESERVED0	 0x111c, 6, 10, 0x0000ffc0
	#define BITFIELD_MFD_H264_0_BSD_BBB_STAT_NUM_BITS_BBB	 0x111c, 0, 6, 0x0000003f
#define ROFF_MFD_H264_0_BSD_GUE_DEC	0x1120 /* H264 0 BSD GUE DEC */ 
	#define BITFIELD_MFD_H264_0_BSD_GUE_DEC	 0x1120, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GUE_DEC */
	#define BLSB_MFD_H264_0_BSD_GUE_DEC_RESERVED	1
	#define BLSB_MFD_H264_0_BSD_GUE_DEC_READ	0
	/* Register Bit Widths for MFD_H264_0_BSD_GUE_DEC */
	#define BWID_MFD_H264_0_BSD_GUE_DEC_RESERVED	31
	#define BWID_MFD_H264_0_BSD_GUE_DEC_READ	1
	/* Register Bit MASKS for MFD_H264_0_BSD_GUE_DEC */
	#define BMSK_MFD_H264_0_BSD_GUE_DEC_RESERVED	0xfffffffe /* Reserved */
	#define BMSK_MFD_H264_0_BSD_GUE_DEC_READ	(1<<0) /* == 0x00000001: 0: goulomb decoded value in BSD 1: still not decoded */
	/* Register BITFIELD for MFD_H264_0_BSD_GUE_DEC - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GUE_DEC_RESERVED	 0x1120, 1, 31, 0xfffffffe
	#define BITFIELD_MFD_H264_0_BSD_GUE_DEC_READ	 0x1120, 0, 1, 0x00000001
#define ROFF_MFD_H264_0_BSD_GSE_DEC	0x1124 /* MFD H264 0 BSD GSE DEC */ 
	#define BITFIELD_MFD_H264_0_BSD_GSE_DEC	 0x1124, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GSE_DEC */
	#define BLSB_MFD_H264_0_BSD_GSE_DEC_RESERVED	1
	#define BLSB_MFD_H264_0_BSD_GSE_DEC_READ	0
	/* Register Bit Widths for MFD_H264_0_BSD_GSE_DEC */
	#define BWID_MFD_H264_0_BSD_GSE_DEC_RESERVED	31
	#define BWID_MFD_H264_0_BSD_GSE_DEC_READ	1
	/* Register Bit MASKS for MFD_H264_0_BSD_GSE_DEC */
	#define BMSK_MFD_H264_0_BSD_GSE_DEC_RESERVED	0xfffffffe /* Reserved */
	#define BMSK_MFD_H264_0_BSD_GSE_DEC_READ	(1<<0) /* == 0x00000001: 0: goulomb decoded value in BSD 1: still not decoded */
	/* Register BITFIELD for MFD_H264_0_BSD_GSE_DEC - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GSE_DEC_RESERVED	 0x1124, 1, 31, 0xfffffffe
	#define BITFIELD_MFD_H264_0_BSD_GSE_DEC_READ	 0x1124, 0, 1, 0x00000001
#define ROFF_MFD_H264_0_BSD_EXP_GME_INTRA	0x1128 /* MFD H264 0 BSD EXP GME INTRA */ 
	#define BITFIELD_MFD_H264_0_BSD_EXP_GME_INTRA	 0x1128, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_EXP_GME_INTRA */
	#define BLSB_MFD_H264_0_BSD_EXP_GME_INTRA_RESERVED	1
	#define BLSB_MFD_H264_0_BSD_EXP_GME_INTRA_READ	0
	/* Register Bit Widths for MFD_H264_0_BSD_EXP_GME_INTRA */
	#define BWID_MFD_H264_0_BSD_EXP_GME_INTRA_RESERVED	31
	#define BWID_MFD_H264_0_BSD_EXP_GME_INTRA_READ	1
	/* Register Bit MASKS for MFD_H264_0_BSD_EXP_GME_INTRA */
	#define BMSK_MFD_H264_0_BSD_EXP_GME_INTRA_RESERVED	0xfffffffe /* Reserved */
	#define BMSK_MFD_H264_0_BSD_EXP_GME_INTRA_READ	(1<<0) /* == 0x00000001: 0: goulomb decoded value in BSD 1: still not decoded */
	/* Register BITFIELD for MFD_H264_0_BSD_EXP_GME_INTRA - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_EXP_GME_INTRA_RESERVED	 0x1128, 1, 31, 0xfffffffe
	#define BITFIELD_MFD_H264_0_BSD_EXP_GME_INTRA_READ	 0x1128, 0, 1, 0x00000001
#define ROFF_MFD_H264_0_BSD_EXP_GME_INTER	0x1138 /* MFD H264 0 BSD EXP GME INTER */ 
	#define BITFIELD_MFD_H264_0_BSD_EXP_GME_INTER	 0x1138, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_EXP_GME_INTER */
	#define BLSB_MFD_H264_0_BSD_EXP_GME_INTER_RESERVED	1
	#define BLSB_MFD_H264_0_BSD_EXP_GME_INTER_READ	0
	/* Register Bit Widths for MFD_H264_0_BSD_EXP_GME_INTER */
	#define BWID_MFD_H264_0_BSD_EXP_GME_INTER_RESERVED	31
	#define BWID_MFD_H264_0_BSD_EXP_GME_INTER_READ	1
	/* Register Bit MASKS for MFD_H264_0_BSD_EXP_GME_INTER */
	#define BMSK_MFD_H264_0_BSD_EXP_GME_INTER_RESERVED	0xfffffffe /* Reserved */
	#define BMSK_MFD_H264_0_BSD_EXP_GME_INTER_READ	(1<<0) /* == 0x00000001: 0: goulomb decoded value in BSD 1: still not decoded */
	/* Register BITFIELD for MFD_H264_0_BSD_EXP_GME_INTER - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_EXP_GME_INTER_RESERVED	 0x1138, 1, 31, 0xfffffffe
	#define BITFIELD_MFD_H264_0_BSD_EXP_GME_INTER_READ	 0x1138, 0, 1, 0x00000001
#define ROFF_MFD_H264_0_BSD_IMG_INIT	0x1140 /* MFD H264 0 BSD IMG INIT */ 
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT	 0x1140, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_IMG_INIT */
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_RESERVED	26
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_MONO_WTBL_DEC_MODE	25
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_8X8_INTER_Y	24
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_8X8_INTRA_Y	23
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTER_V	22
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTER_U	21
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTER_Y	20
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTRA_V	19
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTRA_U	18
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTRA_Y	17
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_SCALING_MAT_FLAG	16
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_RECPOINT_SEI	15
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_IMG_MONO_FLAG	14
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_TRANSFORM_8x8_FLAG	13
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_FRM_STORE_ID	8
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_DIRECT_8x8_INF_FLAG	7
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_FRM_MB_FLAG	6
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_CONSTRAINED_IP	5
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_EC_MODE_FLAG	4
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_MB_AFR_FLAG	3
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_IMG_IDR_FLAG	2
	#define BLSB_MFD_H264_0_BSD_IMG_INIT_PIC_STRUCT	0
	/* Register Bit Widths for MFD_H264_0_BSD_IMG_INIT */
	#define BWID_MFD_H264_0_BSD_IMG_INIT_RESERVED	6
	#define BWID_MFD_H264_0_BSD_IMG_INIT_MONO_WTBL_DEC_MODE	1
	#define BWID_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_8X8_INTER_Y	1
	#define BWID_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_8X8_INTRA_Y	1
	#define BWID_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTER_V	1
	#define BWID_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTER_U	1
	#define BWID_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTER_Y	1
	#define BWID_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTRA_V	1
	#define BWID_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTRA_U	1
	#define BWID_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTRA_Y	1
	#define BWID_MFD_H264_0_BSD_IMG_INIT_SCALING_MAT_FLAG	1
	#define BWID_MFD_H264_0_BSD_IMG_INIT_RECPOINT_SEI	1
	#define BWID_MFD_H264_0_BSD_IMG_INIT_IMG_MONO_FLAG	1
	#define BWID_MFD_H264_0_BSD_IMG_INIT_TRANSFORM_8x8_FLAG	1
	#define BWID_MFD_H264_0_BSD_IMG_INIT_FRM_STORE_ID	5
	#define BWID_MFD_H264_0_BSD_IMG_INIT_DIRECT_8x8_INF_FLAG	1
	#define BWID_MFD_H264_0_BSD_IMG_INIT_FRM_MB_FLAG	1
	#define BWID_MFD_H264_0_BSD_IMG_INIT_CONSTRAINED_IP	1
	#define BWID_MFD_H264_0_BSD_IMG_INIT_EC_MODE_FLAG	1
	#define BWID_MFD_H264_0_BSD_IMG_INIT_MB_AFR_FLAG	1
	#define BWID_MFD_H264_0_BSD_IMG_INIT_IMG_IDR_FLAG	1
	#define BWID_MFD_H264_0_BSD_IMG_INIT_PIC_STRUCT	2
	/* Register Bit MASKS for MFD_H264_0_BSD_IMG_INIT */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_RESERVED	0xfc000000 /* Reserved */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_MONO_WTBL_DEC_MODE	(1<<25) /* == 0x02000000: monochrome weghting decoding mode */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_8X8_INTER_Y	(1<<24) /* == 0x01000000: scaling list 8x8 inter y */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_8X8_INTRA_Y	(1<<23) /* == 0x00800000: scaling list 8x8 intra y */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTER_V	(1<<22) /* == 0x00400000: scaling list 4x4 inter v */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTER_U	(1<<21) /* == 0x00200000: scaling list 4x4 inter u */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTER_Y	(1<<20) /* == 0x00100000: scaling list 4x4 inter y */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTRA_V	(1<<19) /* == 0x00080000: scaling list 4x4 intra v */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTRA_U	(1<<18) /* == 0x00040000: scaling list 4x4 intra u */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTRA_Y	(1<<17) /* == 0x00020000: scaling list 4x4 intra y */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_SCALING_MAT_FLAG	(1<<16) /* == 0x00010000: Scaling matrix present flag */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_RECPOINT_SEI	(1<<15) /* == 0x00008000: Recovery point sei message */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_IMG_MONO_FLAG	(1<<14) /* == 0x00004000: Image monochrome flag */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_TRANSFORM_8x8_FLAG	(1<<13) /* == 0x00002000: Transform 8x8 mode flag */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_FRM_STORE_ID	0x00001f00 /* Frame store id */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_DIRECT_8x8_INF_FLAG	(1<<7) /* == 0x00000080: Direct 8x8 inference flag */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_FRM_MB_FLAG	(1<<6) /* == 0x00000040: Frame MBs only flag */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_CONSTRAINED_IP	(1<<5) /* == 0x00000020: constarined intra prediction */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_EC_MODE_FLAG	(1<<4) /* == 0x00000010: entropy coding mode flag */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_MB_AFR_FLAG	(1<<3) /* == 0x00000008: Macroblock adaptive frame field decoding */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_IMG_IDR_FLAG	(1<<2) /* == 0x00000004: Image IDR flag */
	#define BMSK_MFD_H264_0_BSD_IMG_INIT_PIC_STRUCT	0x00000003 /* Picture structure */
	/* Register BITFIELD for MFD_H264_0_BSD_IMG_INIT - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_RESERVED	 0x1140, 26, 6, 0xfc000000
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_MONO_WTBL_DEC_MODE	 0x1140, 25, 1, 0x02000000
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_8X8_INTER_Y	 0x1140, 24, 1, 0x01000000
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_8X8_INTRA_Y	 0x1140, 23, 1, 0x00800000
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTER_V	 0x1140, 22, 1, 0x00400000
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTER_U	 0x1140, 21, 1, 0x00200000
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTER_Y	 0x1140, 20, 1, 0x00100000
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTRA_V	 0x1140, 19, 1, 0x00080000
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTRA_U	 0x1140, 18, 1, 0x00040000
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_SCALING_LST_PRST_4x4_INTRA_Y	 0x1140, 17, 1, 0x00020000
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_SCALING_MAT_FLAG	 0x1140, 16, 1, 0x00010000
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_RECPOINT_SEI	 0x1140, 15, 1, 0x00008000
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_IMG_MONO_FLAG	 0x1140, 14, 1, 0x00004000
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_TRANSFORM_8x8_FLAG	 0x1140, 13, 1, 0x00002000
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_FRM_STORE_ID	 0x1140, 8, 5, 0x00001f00
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_DIRECT_8x8_INF_FLAG	 0x1140, 7, 1, 0x00000080
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_FRM_MB_FLAG	 0x1140, 6, 1, 0x00000040
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_CONSTRAINED_IP	 0x1140, 5, 1, 0x00000020
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_EC_MODE_FLAG	 0x1140, 4, 1, 0x00000010
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_MB_AFR_FLAG	 0x1140, 3, 1, 0x00000008
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_IMG_IDR_FLAG	 0x1140, 2, 1, 0x00000004
	#define BITFIELD_MFD_H264_0_BSD_IMG_INIT_PIC_STRUCT	 0x1140, 0, 2, 0x00000003
#define ROFF_MFD_H264_0_BSD_SLICE_P1	0x1150 /* MFD H264 0 BSD SLICE P1 */ 
	#define BITFIELD_MFD_H264_0_BSD_SLICE_P1	 0x1150, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_SLICE_P1 */
	#define BLSB_MFD_H264_0_BSD_SLICE_P1_RESERVED2	23
	#define BLSB_MFD_H264_0_BSD_SLICE_P1_MB_SKIP	22
	#define BLSB_MFD_H264_0_BSD_SLICE_P1_NUMREF1	16
	#define BLSB_MFD_H264_0_BSD_SLICE_P1_RESERVED1	14
	#define BLSB_MFD_H264_0_BSD_SLICE_P1_NUMREF0	8
	#define BLSB_MFD_H264_0_BSD_SLICE_P1_RESERVED0	7
	#define BLSB_MFD_H264_0_BSD_SLICE_P1_WT_PRD_FLAG	6
	#define BLSB_MFD_H264_0_BSD_SLICE_P1_WT_BIPRED_IDC	4
	#define BLSB_MFD_H264_0_BSD_SLICE_P1_SLICETYPE	1
	#define BLSB_MFD_H264_0_BSD_SLICE_P1_DISP_FLAG	0
	/* Register Bit Widths for MFD_H264_0_BSD_SLICE_P1 */
	#define BWID_MFD_H264_0_BSD_SLICE_P1_RESERVED2	9
	#define BWID_MFD_H264_0_BSD_SLICE_P1_MB_SKIP	1
	#define BWID_MFD_H264_0_BSD_SLICE_P1_NUMREF1	6
	#define BWID_MFD_H264_0_BSD_SLICE_P1_RESERVED1	2
	#define BWID_MFD_H264_0_BSD_SLICE_P1_NUMREF0	6
	#define BWID_MFD_H264_0_BSD_SLICE_P1_RESERVED0	1
	#define BWID_MFD_H264_0_BSD_SLICE_P1_WT_PRD_FLAG	1
	#define BWID_MFD_H264_0_BSD_SLICE_P1_WT_BIPRED_IDC	2
	#define BWID_MFD_H264_0_BSD_SLICE_P1_SLICETYPE	3
	#define BWID_MFD_H264_0_BSD_SLICE_P1_DISP_FLAG	1
	/* Register Bit MASKS for MFD_H264_0_BSD_SLICE_P1 */
	#define BMSK_MFD_H264_0_BSD_SLICE_P1_RESERVED2	0xff800000 /* Reserved */
	#define BMSK_MFD_H264_0_BSD_SLICE_P1_MB_SKIP	(1<<22) /* == 0x00400000: MB skipped */
	#define BMSK_MFD_H264_0_BSD_SLICE_P1_NUMREF1	0x003f0000 /* Number of references in list 1 */
	#define BMSK_MFD_H264_0_BSD_SLICE_P1_RESERVED1	0x0000c000 /* Reserved */
	#define BMSK_MFD_H264_0_BSD_SLICE_P1_NUMREF0	0x00003f00 /* Number of reference indices in list 0 */
	#define BMSK_MFD_H264_0_BSD_SLICE_P1_RESERVED0	(1<<7) /* == 0x00000080: Reserved */
	#define BMSK_MFD_H264_0_BSD_SLICE_P1_WT_PRD_FLAG	(1<<6) /* == 0x00000040: Weighted prediction flag */
	#define BMSK_MFD_H264_0_BSD_SLICE_P1_WT_BIPRED_IDC	0x00000030 /* Weighted Bi-prediction IDC */
	#define BMSK_MFD_H264_0_BSD_SLICE_P1_SLICETYPE	0x0000000e /* Slice type of picture */
	#define BMSK_MFD_H264_0_BSD_SLICE_P1_DISP_FLAG	(1<<0) /* == 0x00000001: Disposable flag */
	/* Register BITFIELD for MFD_H264_0_BSD_SLICE_P1 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_SLICE_P1_RESERVED2	 0x1150, 23, 9, 0xff800000
	#define BITFIELD_MFD_H264_0_BSD_SLICE_P1_MB_SKIP	 0x1150, 22, 1, 0x00400000
	#define BITFIELD_MFD_H264_0_BSD_SLICE_P1_NUMREF1	 0x1150, 16, 6, 0x003f0000
	#define BITFIELD_MFD_H264_0_BSD_SLICE_P1_RESERVED1	 0x1150, 14, 2, 0x0000c000
	#define BITFIELD_MFD_H264_0_BSD_SLICE_P1_NUMREF0	 0x1150, 8, 6, 0x00003f00
	#define BITFIELD_MFD_H264_0_BSD_SLICE_P1_RESERVED0	 0x1150, 7, 1, 0x00000080
	#define BITFIELD_MFD_H264_0_BSD_SLICE_P1_WT_PRD_FLAG	 0x1150, 6, 1, 0x00000040
	#define BITFIELD_MFD_H264_0_BSD_SLICE_P1_WT_BIPRED_IDC	 0x1150, 4, 2, 0x00000030
	#define BITFIELD_MFD_H264_0_BSD_SLICE_P1_SLICETYPE	 0x1150, 1, 3, 0x0000000e
	#define BITFIELD_MFD_H264_0_BSD_SLICE_P1_DISP_FLAG	 0x1150, 0, 1, 0x00000001
#define ROFF_MFD_H264_0_BSD_SLICE_P2	0x1154 /* MFD H264 0 BSD SLICE P2 */ 
	#define BITFIELD_MFD_H264_0_BSD_SLICE_P2	 0x1154, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_SLICE_P2 */
	#define BLSB_MFD_H264_0_BSD_SLICE_P2_RESERVED	24
	#define BLSB_MFD_H264_0_BSD_SLICE_P2_CHROMA_TYPE	19
	#define BLSB_MFD_H264_0_BSD_SLICE_P2_B_TYPE	18
	#define BLSB_MFD_H264_0_BSD_SLICE_P2_BETA_OFFSET	14
	#define BLSB_MFD_H264_0_BSD_SLICE_P2_ALPHA_C0_OFFSET	10
	#define BLSB_MFD_H264_0_BSD_SLICE_P2_DEBLK_FILTER_IDC_DIS	8
	#define BLSB_MFD_H264_0_BSD_SLICE_P2_CURRSLICE_QP	2
	#define BLSB_MFD_H264_0_BSD_SLICE_P2_CABAC_INIT_IDC	0
	/* Register Bit Widths for MFD_H264_0_BSD_SLICE_P2 */
	#define BWID_MFD_H264_0_BSD_SLICE_P2_RESERVED	8
	#define BWID_MFD_H264_0_BSD_SLICE_P2_CHROMA_TYPE	5
	#define BWID_MFD_H264_0_BSD_SLICE_P2_B_TYPE	1
	#define BWID_MFD_H264_0_BSD_SLICE_P2_BETA_OFFSET	4
	#define BWID_MFD_H264_0_BSD_SLICE_P2_ALPHA_C0_OFFSET	4
	#define BWID_MFD_H264_0_BSD_SLICE_P2_DEBLK_FILTER_IDC_DIS	2
	#define BWID_MFD_H264_0_BSD_SLICE_P2_CURRSLICE_QP	6
	#define BWID_MFD_H264_0_BSD_SLICE_P2_CABAC_INIT_IDC	2
	/* Register Bit MASKS for MFD_H264_0_BSD_SLICE_P2 */
	#define BMSK_MFD_H264_0_BSD_SLICE_P2_RESERVED	0xff000000 /* Reserved */
	#define BMSK_MFD_H264_0_BSD_SLICE_P2_CHROMA_TYPE	0x00f80000 /* Chroma qp offset bits */
	#define BMSK_MFD_H264_0_BSD_SLICE_P2_B_TYPE	(1<<18) /* == 0x00040000: B picture type */
	#define BMSK_MFD_H264_0_BSD_SLICE_P2_BETA_OFFSET	0x0003c000 /* beta offset  */
	#define BMSK_MFD_H264_0_BSD_SLICE_P2_ALPHA_C0_OFFSET	0x00003c00 /* alpha c0 offset */
	#define BMSK_MFD_H264_0_BSD_SLICE_P2_DEBLK_FILTER_IDC_DIS	0x00000300 /* disable deblocking filter idc */
	#define BMSK_MFD_H264_0_BSD_SLICE_P2_CURRSLICE_QP	0x000000fc /* current slice quantisation parameter */
	#define BMSK_MFD_H264_0_BSD_SLICE_P2_CABAC_INIT_IDC	0x00000003 /* cabac init idc */
	/* Register BITFIELD for MFD_H264_0_BSD_SLICE_P2 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_SLICE_P2_RESERVED	 0x1154, 24, 8, 0xff000000
	#define BITFIELD_MFD_H264_0_BSD_SLICE_P2_CHROMA_TYPE	 0x1154, 19, 5, 0x00f80000
	#define BITFIELD_MFD_H264_0_BSD_SLICE_P2_B_TYPE	 0x1154, 18, 1, 0x00040000
	#define BITFIELD_MFD_H264_0_BSD_SLICE_P2_BETA_OFFSET	 0x1154, 14, 4, 0x0003c000
	#define BITFIELD_MFD_H264_0_BSD_SLICE_P2_ALPHA_C0_OFFSET	 0x1154, 10, 4, 0x00003c00
	#define BITFIELD_MFD_H264_0_BSD_SLICE_P2_DEBLK_FILTER_IDC_DIS	 0x1154, 8, 2, 0x00000300
	#define BITFIELD_MFD_H264_0_BSD_SLICE_P2_CURRSLICE_QP	 0x1154, 2, 6, 0x000000fc
	#define BITFIELD_MFD_H264_0_BSD_SLICE_P2_CABAC_INIT_IDC	 0x1154, 0, 2, 0x00000003
#define ROFF_MFD_H264_0_BSD_SLICE_START	0x1158 /* MFD H264 0 BSD SLICE START */ 
	#define BITFIELD_MFD_H264_0_BSD_SLICE_START	 0x1158, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_SLICE_START */
	#define BLSB_MFD_H264_0_BSD_SLICE_START_NUM_MB_REWIND	28
	#define BLSB_MFD_H264_0_BSD_SLICE_START_RESERVED	23
	#define BLSB_MFD_H264_0_BSD_SLICE_START_CONCEALMENT_METHOD	22
	#define BLSB_MFD_H264_0_BSD_SLICE_START_CONCEALMENT_PIC_FIELD	21
	#define BLSB_MFD_H264_0_BSD_SLICE_START_CONCEALMENT_PIC	16
	#define BLSB_MFD_H264_0_BSD_SLICE_START_NUM_FIRST_MB	0
	/* Register Bit Widths for MFD_H264_0_BSD_SLICE_START */
	#define BWID_MFD_H264_0_BSD_SLICE_START_NUM_MB_REWIND	4
	#define BWID_MFD_H264_0_BSD_SLICE_START_RESERVED	5
	#define BWID_MFD_H264_0_BSD_SLICE_START_CONCEALMENT_METHOD	1
	#define BWID_MFD_H264_0_BSD_SLICE_START_CONCEALMENT_PIC_FIELD	1
	#define BWID_MFD_H264_0_BSD_SLICE_START_CONCEALMENT_PIC	5
	#define BWID_MFD_H264_0_BSD_SLICE_START_NUM_FIRST_MB	16
	/* Register Bit MASKS for MFD_H264_0_BSD_SLICE_START */
	#define BMSK_MFD_H264_0_BSD_SLICE_START_NUM_MB_REWIND	0xf0000000 /* Number of macroblocks to rewind */
	#define BMSK_MFD_H264_0_BSD_SLICE_START_RESERVED	0x0f800000 /* Reserved */
	#define BMSK_MFD_H264_0_BSD_SLICE_START_CONCEALMENT_METHOD	(1<<22) /* == 0x00400000: Type of concealment method to be used */
	#define BMSK_MFD_H264_0_BSD_SLICE_START_CONCEALMENT_PIC_FIELD	(1<<21) /* == 0x00200000: Type of concealment method to be used */
	#define BMSK_MFD_H264_0_BSD_SLICE_START_CONCEALMENT_PIC	0x001f0000 /* Conceament picture */
	#define BMSK_MFD_H264_0_BSD_SLICE_START_NUM_FIRST_MB	0x0000ffff /* Number of first macroblock */
	/* Register BITFIELD for MFD_H264_0_BSD_SLICE_START - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_SLICE_START_NUM_MB_REWIND	 0x1158, 28, 4, 0xf0000000
	#define BITFIELD_MFD_H264_0_BSD_SLICE_START_RESERVED	 0x1158, 23, 5, 0x0f800000
	#define BITFIELD_MFD_H264_0_BSD_SLICE_START_CONCEALMENT_METHOD	 0x1158, 22, 1, 0x00400000
	#define BITFIELD_MFD_H264_0_BSD_SLICE_START_CONCEALMENT_PIC_FIELD	 0x1158, 21, 1, 0x00200000
	#define BITFIELD_MFD_H264_0_BSD_SLICE_START_CONCEALMENT_PIC	 0x1158, 16, 5, 0x001f0000
	#define BITFIELD_MFD_H264_0_BSD_SLICE_START_NUM_FIRST_MB	 0x1158, 0, 16, 0x0000ffff
#define ROFF_MFD_H264_0_BSD_MB_CTRL	0x115c /* MFD H264 0 BSD MB CTRL */ 
	#define BITFIELD_MFD_H264_0_BSD_MB_CTRL	 0x115c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_MB_CTRL */
	#define BLSB_MFD_H264_0_BSD_MB_CTRL_RESERVED	31
	#define BLSB_MFD_H264_0_BSD_MB_CTRL_LOAD_MB_YPOS	24
	#define BLSB_MFD_H264_0_BSD_MB_CTRL_LOAD_MB_XPOS	16
	#define BLSB_MFD_H264_0_BSD_MB_CTRL_LOAD_MB_ADDR	0
	/* Register Bit Widths for MFD_H264_0_BSD_MB_CTRL */
	#define BWID_MFD_H264_0_BSD_MB_CTRL_RESERVED	1
	#define BWID_MFD_H264_0_BSD_MB_CTRL_LOAD_MB_YPOS	7
	#define BWID_MFD_H264_0_BSD_MB_CTRL_LOAD_MB_XPOS	8
	#define BWID_MFD_H264_0_BSD_MB_CTRL_LOAD_MB_ADDR	16
	/* Register Bit MASKS for MFD_H264_0_BSD_MB_CTRL */
	#define BMSK_MFD_H264_0_BSD_MB_CTRL_RESERVED	(1<<31) /* == 0x80000000: Reserved */
	#define BMSK_MFD_H264_0_BSD_MB_CTRL_LOAD_MB_YPOS	0x7f000000 /* Load MB Y position */
	#define BMSK_MFD_H264_0_BSD_MB_CTRL_LOAD_MB_XPOS	0x00ff0000 /* load MB X position */
	#define BMSK_MFD_H264_0_BSD_MB_CTRL_LOAD_MB_ADDR	0x0000ffff /* Load Macroblock address */
	/* Register BITFIELD for MFD_H264_0_BSD_MB_CTRL - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_MB_CTRL_RESERVED	 0x115c, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_MB_CTRL_LOAD_MB_YPOS	 0x115c, 24, 7, 0x7f000000
	#define BITFIELD_MFD_H264_0_BSD_MB_CTRL_LOAD_MB_XPOS	 0x115c, 16, 8, 0x00ff0000
	#define BITFIELD_MFD_H264_0_BSD_MB_CTRL_LOAD_MB_ADDR	 0x115c, 0, 16, 0x0000ffff
#define ROFF_MFD_H264_0_BSD_QM_DEC_START	0x1160 /* MFD H264 0 BSD QM DEC START */ 
	#define BITFIELD_MFD_H264_0_BSD_QM_DEC_START	 0x1160, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_QM_DEC_START */
	#define BLSB_MFD_H264_0_BSD_QM_DEC_START_RESERVED	3
	#define BLSB_MFD_H264_0_BSD_QM_DEC_START_IDC	0
	/* Register Bit Widths for MFD_H264_0_BSD_QM_DEC_START */
	#define BWID_MFD_H264_0_BSD_QM_DEC_START_RESERVED	29
	#define BWID_MFD_H264_0_BSD_QM_DEC_START_IDC	3
	/* Register Bit MASKS for MFD_H264_0_BSD_QM_DEC_START */
	#define BMSK_MFD_H264_0_BSD_QM_DEC_START_RESERVED	0xfffffff8 /* Reserved */
	#define BMSK_MFD_H264_0_BSD_QM_DEC_START_IDC	0x00000007 /* IDC of quantization matrix */
	/* Register BITFIELD for MFD_H264_0_BSD_QM_DEC_START - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_QM_DEC_START_RESERVED	 0x1160, 3, 29, 0xfffffff8
	#define BITFIELD_MFD_H264_0_BSD_QM_DEC_START_IDC	 0x1160, 0, 3, 0x00000007
#define ROFF_MFD_H264_0_BSD_DEC_STAT	0x1164 /* MFD H264 0 BSD DEC STAT */ 
	#define BITFIELD_MFD_H264_0_BSD_DEC_STAT	 0x1164, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_DEC_STAT */
	#define BLSB_MFD_H264_0_BSD_DEC_STAT_RESERVED	22
	#define BLSB_MFD_H264_0_BSD_DEC_STAT_DEBLCK_FILTER_RDY	21
	#define BLSB_MFD_H264_0_BSD_DEC_STAT_IP_RDY	20
	#define BLSB_MFD_H264_0_BSD_DEC_STAT_PIXEL_DEC_RDY	19
	#define BLSB_MFD_H264_0_BSD_DEC_STAT_BO_BUFF_RDY	18
	#define BLSB_MFD_H264_0_BSD_DEC_STAT_CURR_ST_SD	3
	#define BLSB_MFD_H264_0_BSD_DEC_STAT_QT_DEC_STAT	0
	/* Register Bit Widths for MFD_H264_0_BSD_DEC_STAT */
	#define BWID_MFD_H264_0_BSD_DEC_STAT_RESERVED	10
	#define BWID_MFD_H264_0_BSD_DEC_STAT_DEBLCK_FILTER_RDY	1
	#define BWID_MFD_H264_0_BSD_DEC_STAT_IP_RDY	1
	#define BWID_MFD_H264_0_BSD_DEC_STAT_PIXEL_DEC_RDY	1
	#define BWID_MFD_H264_0_BSD_DEC_STAT_BO_BUFF_RDY	1
	#define BWID_MFD_H264_0_BSD_DEC_STAT_CURR_ST_SD	15
	#define BWID_MFD_H264_0_BSD_DEC_STAT_QT_DEC_STAT	3
	/* Register Bit MASKS for MFD_H264_0_BSD_DEC_STAT */
	#define BMSK_MFD_H264_0_BSD_DEC_STAT_RESERVED	0xffc00000 /* Reserved */
	#define BMSK_MFD_H264_0_BSD_DEC_STAT_DEBLCK_FILTER_RDY	(1<<21) /* == 0x00200000: Deblocking filter ready */
	#define BMSK_MFD_H264_0_BSD_DEC_STAT_IP_RDY	(1<<20) /* == 0x00100000: inter prediction ready */
	#define BMSK_MFD_H264_0_BSD_DEC_STAT_PIXEL_DEC_RDY	(1<<19) /* == 0x00080000: Pixel dcoder ready */
	#define BMSK_MFD_H264_0_BSD_DEC_STAT_BO_BUFF_RDY	(1<<18) /* == 0x00040000: Bits out buffer ready */
	#define BMSK_MFD_H264_0_BSD_DEC_STAT_CURR_ST_SD	0x0003fff8 /* current state of slice decoder */
	#define BMSK_MFD_H264_0_BSD_DEC_STAT_QT_DEC_STAT	0x00000007 /* Quantization table decoidng status */
	/* Register BITFIELD for MFD_H264_0_BSD_DEC_STAT - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_DEC_STAT_RESERVED	 0x1164, 22, 10, 0xffc00000
	#define BITFIELD_MFD_H264_0_BSD_DEC_STAT_DEBLCK_FILTER_RDY	 0x1164, 21, 1, 0x00200000
	#define BITFIELD_MFD_H264_0_BSD_DEC_STAT_IP_RDY	 0x1164, 20, 1, 0x00100000
	#define BITFIELD_MFD_H264_0_BSD_DEC_STAT_PIXEL_DEC_RDY	 0x1164, 19, 1, 0x00080000
	#define BITFIELD_MFD_H264_0_BSD_DEC_STAT_BO_BUFF_RDY	 0x1164, 18, 1, 0x00040000
	#define BITFIELD_MFD_H264_0_BSD_DEC_STAT_CURR_ST_SD	 0x1164, 3, 15, 0x0003fff8
	#define BITFIELD_MFD_H264_0_BSD_DEC_STAT_QT_DEC_STAT	 0x1164, 0, 3, 0x00000007
#define ROFF_MFD_H264_0_BSD_QM_LOAD_START	0x1168 /* MFD H264 0 BSD QM LOAD START */ 
	#define BITFIELD_MFD_H264_0_BSD_QM_LOAD_START	 0x1168, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_QM_LOAD_START */
	#define BLSB_MFD_H264_0_BSD_QM_LOAD_START_RESERVED	4
	#define BLSB_MFD_H264_0_BSD_QM_LOAD_START_VALUES	3
	#define BLSB_MFD_H264_0_BSD_QM_LOAD_START_IDC	0
	/* Register Bit Widths for MFD_H264_0_BSD_QM_LOAD_START */
	#define BWID_MFD_H264_0_BSD_QM_LOAD_START_RESERVED	28
	#define BWID_MFD_H264_0_BSD_QM_LOAD_START_VALUES	1
	#define BWID_MFD_H264_0_BSD_QM_LOAD_START_IDC	3
	/* Register Bit MASKS for MFD_H264_0_BSD_QM_LOAD_START */
	#define BMSK_MFD_H264_0_BSD_QM_LOAD_START_RESERVED	0xfffffff0 /* Reserved */
	#define BMSK_MFD_H264_0_BSD_QM_LOAD_START_VALUES	(1<<3) /* == 0x00000008: No values will follow if 1 */
	#define BMSK_MFD_H264_0_BSD_QM_LOAD_START_IDC	0x00000007 /* IDC of quantization matrix */
	/* Register BITFIELD for MFD_H264_0_BSD_QM_LOAD_START - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_QM_LOAD_START_RESERVED	 0x1168, 4, 28, 0xfffffff0
	#define BITFIELD_MFD_H264_0_BSD_QM_LOAD_START_VALUES	 0x1168, 3, 1, 0x00000008
	#define BITFIELD_MFD_H264_0_BSD_QM_LOAD_START_IDC	 0x1168, 0, 3, 0x00000007
#define ROFF_MFD_H264_0_BSD_QM_LOAD_VALUE	0x116c /* MFD H264 0 BSD QM LOAD VALUE */ 
	#define BITFIELD_MFD_H264_0_BSD_QM_LOAD_VALUE	 0x116c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_BSD_BYTE_ALIGN	0x117c /* MFD H264 0 BSD BYTE ALIGN */ 
	#define BITFIELD_MFD_H264_0_BSD_BYTE_ALIGN	 0x117c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_BSD_BBB_TRAIL	0x1180 /* MFD H264 0 BSD BBB TRAIL */ 
	#define BITFIELD_MFD_H264_0_BSD_BBB_TRAIL	 0x1180, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_BSD_GET_BITS01	0x1184 /* MFD H264 0 BSD GET BITS01 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS01	 0x1184, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS01 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS01_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS01_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS01 */
	#define BWID_MFD_H264_0_BSD_GET_BITS01_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS01_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS01 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS01_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS01_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS01 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS01_VALID	 0x1184, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS01_RETURNED_BITS	 0x1184, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS02	0x1188 /* MFD H264 0 BSD GET BITS02 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS02	 0x1188, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS02 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS02_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS02_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS02 */
	#define BWID_MFD_H264_0_BSD_GET_BITS02_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS02_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS02 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS02_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS02_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS02 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS02_VALID	 0x1188, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS02_RETURNED_BITS	 0x1188, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS03	0x118c /* MFD H264 0 BSD GET BITS03 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS03	 0x118c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS03 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS03_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS03_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS03 */
	#define BWID_MFD_H264_0_BSD_GET_BITS03_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS03_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS03 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS03_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS03_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS03 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS03_VALID	 0x118c, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS03_RETURNED_BITS	 0x118c, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS04	0x1190 /* MFD H264 0 BSD GET BITS04 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS04	 0x1190, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS04 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS04_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS04_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS04 */
	#define BWID_MFD_H264_0_BSD_GET_BITS04_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS04_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS04 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS04_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS04_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS04 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS04_VALID	 0x1190, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS04_RETURNED_BITS	 0x1190, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS05	0x1194 /* MFD H264 0 BSD GET BITS05 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS05	 0x1194, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS05 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS05_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS05_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS05 */
	#define BWID_MFD_H264_0_BSD_GET_BITS05_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS05_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS05 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS05_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS05_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS05 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS05_VALID	 0x1194, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS05_RETURNED_BITS	 0x1194, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS06	0x1198 /* MFD H264 0 BSD GET BITS06 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS06	 0x1198, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS06 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS06_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS06_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS06 */
	#define BWID_MFD_H264_0_BSD_GET_BITS06_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS06_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS06 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS06_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS06_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS06 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS06_VALID	 0x1198, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS06_RETURNED_BITS	 0x1198, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS07	0x119c /* MFD H264 0 BSD GET BITS07 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS07	 0x119c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS07 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS07_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS07_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS07 */
	#define BWID_MFD_H264_0_BSD_GET_BITS07_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS07_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS07 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS07_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS07_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS07 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS07_VALID	 0x119c, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS07_RETURNED_BITS	 0x119c, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS08	0x11a0 /* MFD H264 0 BSD GET BITS08 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS08	 0x11a0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS08 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS08_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS08_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS08 */
	#define BWID_MFD_H264_0_BSD_GET_BITS08_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS08_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS08 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS08_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS08_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS08 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS08_VALID	 0x11a0, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS08_RETURNED_BITS	 0x11a0, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS09	0x11a4 /* MFD H264 0 BSD GET BITS09 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS09	 0x11a4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS09 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS09_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS09_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS09 */
	#define BWID_MFD_H264_0_BSD_GET_BITS09_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS09_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS09 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS09_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS09_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS09 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS09_VALID	 0x11a4, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS09_RETURNED_BITS	 0x11a4, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS10	0x11a8 /* MFD H264 0 BSD GET BITS10 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS10	 0x11a8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS10 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS10_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS10_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS10 */
	#define BWID_MFD_H264_0_BSD_GET_BITS10_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS10_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS10 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS10_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS10_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS10 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS10_VALID	 0x11a8, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS10_RETURNED_BITS	 0x11a8, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS11	0x11ac /* MFD H264 0 BSD GET BITS11 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS11	 0x11ac, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS11 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS11_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS11_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS11 */
	#define BWID_MFD_H264_0_BSD_GET_BITS11_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS11_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS11 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS11_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS11_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS11 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS11_VALID	 0x11ac, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS11_RETURNED_BITS	 0x11ac, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS12	0x11b0 /* MFD H264 0 BSD GET BITS12 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS12	 0x11b0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS12 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS12_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS12_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS12 */
	#define BWID_MFD_H264_0_BSD_GET_BITS12_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS12_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS12 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS12_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS12_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS12 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS12_VALID	 0x11b0, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS12_RETURNED_BITS	 0x11b0, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS13	0x11b4 /* MFD H264 0 BSD GET BITS13 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS13	 0x11b4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS13 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS13_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS13_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS13 */
	#define BWID_MFD_H264_0_BSD_GET_BITS13_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS13_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS13 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS13_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS13_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS13 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS13_VALID	 0x11b4, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS13_RETURNED_BITS	 0x11b4, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS14	0x11b8 /* MFD H264 0 BSD GET BITS14 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS14	 0x11b8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS14 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS14_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS14_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS14 */
	#define BWID_MFD_H264_0_BSD_GET_BITS14_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS14_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS14 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS14_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS14_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS14 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS14_VALID	 0x11b8, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS14_RETURNED_BITS	 0x11b8, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS15	0x11bc /* MFD H264 0 BSD GET BITS15 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS15	 0x11bc, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS15 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS15_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS15_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS15 */
	#define BWID_MFD_H264_0_BSD_GET_BITS15_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS15_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS15 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS15_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS15_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS15 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS15_VALID	 0x11bc, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS15_RETURNED_BITS	 0x11bc, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS16	0x11c0 /* MFD H264 0 BSD GET BITS16 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS16	 0x11c0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS16 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS16_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS16_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS16 */
	#define BWID_MFD_H264_0_BSD_GET_BITS16_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS16_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS16 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS16_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS16_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS16 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS16_VALID	 0x11c0, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS16_RETURNED_BITS	 0x11c0, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS17	0x11c4 /* MFD H264 0 BSD GET BITS17 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS17	 0x11c4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS17 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS17_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS17_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS17 */
	#define BWID_MFD_H264_0_BSD_GET_BITS17_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS17_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS17 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS17_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS17_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS17 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS17_VALID	 0x11c4, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS17_RETURNED_BITS	 0x11c4, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS18	0x11c8 /* MFD H264 0 BSD GET BITS18 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS18	 0x11c8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS18 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS18_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS18_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS18 */
	#define BWID_MFD_H264_0_BSD_GET_BITS18_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS18_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS18 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS18_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS18_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS18 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS18_VALID	 0x11c8, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS18_RETURNED_BITS	 0x11c8, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS19	0x11cc /* MFD H264 0 BSD GET BITS19 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS19	 0x11cc, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS19 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS19_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS19_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS19 */
	#define BWID_MFD_H264_0_BSD_GET_BITS19_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS19_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS19 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS19_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS19_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS19 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS19_VALID	 0x11cc, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS19_RETURNED_BITS	 0x11cc, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS20	0x11d0 /* MFD H264 0 BSD GET BITS20 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS20	 0x11d0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS20 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS20_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS20_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS20 */
	#define BWID_MFD_H264_0_BSD_GET_BITS20_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS20_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS20 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS20_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS20_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS20 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS20_VALID	 0x11d0, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS20_RETURNED_BITS	 0x11d0, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS21	0x11d4 /* MFD H264 0 BSD GET BITS21 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS21	 0x11d4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS21 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS21_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS21_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS21 */
	#define BWID_MFD_H264_0_BSD_GET_BITS21_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS21_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS21 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS21_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS21_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS21 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS21_VALID	 0x11d4, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS21_RETURNED_BITS	 0x11d4, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS22	0x11d8 /* MFD H264 0 BSD GET BITS22 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS22	 0x11d8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS22 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS22_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS22_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS22 */
	#define BWID_MFD_H264_0_BSD_GET_BITS22_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS22_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS22 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS22_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS22_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS22 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS22_VALID	 0x11d8, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS22_RETURNED_BITS	 0x11d8, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS23	0x11dc /* MFD H264 0 BSD GET BITS23 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS23	 0x11dc, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS23 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS23_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS23_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS23 */
	#define BWID_MFD_H264_0_BSD_GET_BITS23_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS23_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS23 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS23_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS23_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS23 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS23_VALID	 0x11dc, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS23_RETURNED_BITS	 0x11dc, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS24	0x11e0 /* MFD H264 0 BSD GET BITS24 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS24	 0x11e0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS24 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS24_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS24_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS24 */
	#define BWID_MFD_H264_0_BSD_GET_BITS24_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS24_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS24 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS24_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS24_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS24 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS24_VALID	 0x11e0, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS24_RETURNED_BITS	 0x11e0, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS25	0x11e4 /* MFD H264 0 BSD GET BITS25 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS25	 0x11e4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS25 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS25_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS25_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS25 */
	#define BWID_MFD_H264_0_BSD_GET_BITS25_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS25_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS25 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS25_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS25_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS25 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS25_VALID	 0x11e4, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS25_RETURNED_BITS	 0x11e4, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS26	0x11e8 /* MFD H264 0 BSD GET BITS26 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS26	 0x11e8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS26 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS26_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS26_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS26 */
	#define BWID_MFD_H264_0_BSD_GET_BITS26_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS26_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS26 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS26_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS26_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS26 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS26_VALID	 0x11e8, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS26_RETURNED_BITS	 0x11e8, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS27	0x11ec /* MFD H264 0 BSD GET BITS27 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS27	 0x11ec, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS27 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS27_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS27_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS27 */
	#define BWID_MFD_H264_0_BSD_GET_BITS27_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS27_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS27 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS27_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS27_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS27 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS27_VALID	 0x11ec, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS27_RETURNED_BITS	 0x11ec, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS28	0x11f0 /* MFD H264 0 BSD GET BITS28 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS28	 0x11f0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS28 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS28_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS28_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS28 */
	#define BWID_MFD_H264_0_BSD_GET_BITS28_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS28_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS28 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS28_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS28_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS28 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS28_VALID	 0x11f0, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS28_RETURNED_BITS	 0x11f0, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS29	0x11f4 /* MFD H264 0 BSD GET BITS29 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS29	 0x11f4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS29 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS29_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS29_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS29 */
	#define BWID_MFD_H264_0_BSD_GET_BITS29_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS29_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS29 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS29_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS29_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS29 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS29_VALID	 0x11f4, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS29_RETURNED_BITS	 0x11f4, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS30	0x11f8 /* MFD H264 0 BSD GET BITS30 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS30	 0x11f8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS30 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS30_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS30_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS30 */
	#define BWID_MFD_H264_0_BSD_GET_BITS30_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS30_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS30 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS30_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS30_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS30 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS30_VALID	 0x11f8, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS30_RETURNED_BITS	 0x11f8, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_BSD_GET_BITS31	0x11fc /* MFD H264 0 BSD GET BITS31 */ 
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS31	 0x11fc, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_BSD_GET_BITS31 */
	#define BLSB_MFD_H264_0_BSD_GET_BITS31_VALID	31
	#define BLSB_MFD_H264_0_BSD_GET_BITS31_RETURNED_BITS	0
	/* Register Bit Widths for MFD_H264_0_BSD_GET_BITS31 */
	#define BWID_MFD_H264_0_BSD_GET_BITS31_VALID	1
	#define BWID_MFD_H264_0_BSD_GET_BITS31_RETURNED_BITS	31
	/* Register Bit MASKS for MFD_H264_0_BSD_GET_BITS31 */
	#define BMSK_MFD_H264_0_BSD_GET_BITS31_VALID	(1<<31) /* == 0x80000000: Valid */
	#define BMSK_MFD_H264_0_BSD_GET_BITS31_RETURNED_BITS	0x7fffffff /* Returned Bits */
	/* Register BITFIELD for MFD_H264_0_BSD_GET_BITS31 - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS31_VALID	 0x11fc, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_BSD_GET_BITS31_RETURNED_BITS	 0x11fc, 0, 31, 0x7fffffff
#define ROFF_MFD_H264_0_MPR_TF_POC	0x1300 /* MFD H264 0 MPR TF POC */ 
	#define BITFIELD_MFD_H264_0_MPR_TF_POC	 0x1300, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_MPR_BF_POC	0x1304 /* MFD H264 0 MPR BF POC */ 
	#define BITFIELD_MFD_H264_0_MPR_BF_POC	 0x1304, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_MPR_LST00	0x1380 /* MFD H264 0 MPR LST00 */ 
	#define BITFIELD_MFD_H264_0_MPR_LST00	 0x1380, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_MPR_LST01	0x1384 /* MFD H264 0 MPR LST01 */ 
	#define BITFIELD_MFD_H264_0_MPR_LST01	 0x1384, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_MPR_LST02	0x1388 /* MFD H264 0 MPR LST02 */ 
	#define BITFIELD_MFD_H264_0_MPR_LST02	 0x1388, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_MPR_LST03	0x138c /* MFD H264 0 MPR LST03 */ 
	#define BITFIELD_MFD_H264_0_MPR_LST03	 0x138c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_MPR_LST04	0x1390 /* MFD H264 0 MPR LST04 */ 
	#define BITFIELD_MFD_H264_0_MPR_LST04	 0x1390, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_MPR_LST05	0x1394 /* MFD H264 0 MPR LST05 */ 
	#define BITFIELD_MFD_H264_0_MPR_LST05	 0x1394, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_MPR_LST06	0x1398 /* MFD H264 0 MPR LST06 */ 
	#define BITFIELD_MFD_H264_0_MPR_LST06	 0x1398, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_MPR_LST07	0x139c /* MFD H264 0 MPR LST07 */ 
	#define BITFIELD_MFD_H264_0_MPR_LST07	 0x139c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_MPR_LST08	0x13a0 /* MFD H264 0 MPR LST08 */ 
	#define BITFIELD_MFD_H264_0_MPR_LST08	 0x13a0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_MPR_LST09	0x13a4 /* MFD H264 0 MPR LST09 */ 
	#define BITFIELD_MFD_H264_0_MPR_LST09	 0x13a4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_MPR_LST10	0x13a8 /* MFD H264 0 MPR LST10 */ 
	#define BITFIELD_MFD_H264_0_MPR_LST10	 0x13a8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_MPR_LST11	0x13ac /* MFD H264 0 MPR LST11 */ 
	#define BITFIELD_MFD_H264_0_MPR_LST11	 0x13ac, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_MPR_LST12	0x13b0 /* MFD H264 0 MPR LST12 */ 
	#define BITFIELD_MFD_H264_0_MPR_LST12	 0x13b0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_MPR_LST13	0x13b4 /* MFD H264 0 MPR LST13 */ 
	#define BITFIELD_MFD_H264_0_MPR_LST13	 0x13b4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_MPR_LST14	0x13b8 /* MFD H264 0 MPR LST14 */ 
	#define BITFIELD_MFD_H264_0_MPR_LST14	 0x13b8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_MPR_LST15	0x13bc /* MFD H264 0 MPR LST15 */ 
	#define BITFIELD_MFD_H264_0_MPR_LST15	 0x13bc, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_RSB_DDR_BA	0x1808 /* MFD H264 0 RSB DDR BA */ 
	#define BITFIELD_MFD_H264_0_RSB_DDR_BA	 0x1808, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_RSB_DDR_BA */
	#define BLSB_MFD_H264_0_RSB_DDR_BA_MFD_RSB_ADDR	3
	#define BLSB_MFD_H264_0_RSB_DDR_BA_Reserved	0
	/* Register Bit Widths for MFD_H264_0_RSB_DDR_BA */
	#define BWID_MFD_H264_0_RSB_DDR_BA_MFD_RSB_ADDR	29
	#define BWID_MFD_H264_0_RSB_DDR_BA_Reserved	3
	/* Register Bit MASKS for MFD_H264_0_RSB_DDR_BA */
	#define BMSK_MFD_H264_0_RSB_DDR_BA_MFD_RSB_ADDR	0xfffffff8 /* MFD RSB address */
	#define BMSK_MFD_H264_0_RSB_DDR_BA_Reserved	0x00000007 /* Reserved */
	/* Register BITFIELD for MFD_H264_0_RSB_DDR_BA - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_RSB_DDR_BA_MFD_RSB_ADDR	 0x1808, 3, 29, 0xfffffff8
	#define BITFIELD_MFD_H264_0_RSB_DDR_BA_Reserved	 0x1808, 0, 3, 0x00000007
#define ROFF_MFD_H264_0_DEC_STATUS	0x180c /* MFD H264 0 DEC STATUS */ 
	#define BITFIELD_MFD_H264_0_DEC_STATUS	 0x180c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_DEC_STATUS */
	#define BLSB_MFD_H264_0_DEC_STATUS_RESERVED	2
	#define BLSB_MFD_H264_0_DEC_STATUS_BS_IB_EMPTY_H264	1
	#define BLSB_MFD_H264_0_DEC_STATUS_H264_FR_ACTIVE	0
	/* Register Bit Widths for MFD_H264_0_DEC_STATUS */
	#define BWID_MFD_H264_0_DEC_STATUS_RESERVED	30
	#define BWID_MFD_H264_0_DEC_STATUS_BS_IB_EMPTY_H264	1
	#define BWID_MFD_H264_0_DEC_STATUS_H264_FR_ACTIVE	1
	/* Register Bit MASKS for MFD_H264_0_DEC_STATUS */
	#define BMSK_MFD_H264_0_DEC_STATUS_RESERVED	0xfffffffc /* Reserved */
	#define BMSK_MFD_H264_0_DEC_STATUS_BS_IB_EMPTY_H264	(1<<1) /* == 0x00000002: bs_ib_empty_h264 */
	#define BMSK_MFD_H264_0_DEC_STATUS_H264_FR_ACTIVE	(1<<0) /* == 0x00000001: H264_frame_dec_active */
	/* Register BITFIELD for MFD_H264_0_DEC_STATUS - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_DEC_STATUS_RESERVED	 0x180c, 2, 30, 0xfffffffc
	#define BITFIELD_MFD_H264_0_DEC_STATUS_BS_IB_EMPTY_H264	 0x180c, 1, 1, 0x00000002
	#define BITFIELD_MFD_H264_0_DEC_STATUS_H264_FR_ACTIVE	 0x180c, 0, 1, 0x00000001
#define ROFF_MFD_H264_0_SIF_SMP_RS	0x1810 /* MFD H264 0 SIF SMP RS */ 
	#define BITFIELD_MFD_H264_0_SIF_SMP_RS	 0x1810, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_SIF_SMP_RS */
	#define BLSB_MFD_H264_0_SIF_SMP_RS_SEM_SD	16
	#define BLSB_MFD_H264_0_SIF_SMP_RS_SEM_HOST	0
	/* Register Bit Widths for MFD_H264_0_SIF_SMP_RS */
	#define BWID_MFD_H264_0_SIF_SMP_RS_SEM_SD	16
	#define BWID_MFD_H264_0_SIF_SMP_RS_SEM_HOST	16
	/* Register Bit MASKS for MFD_H264_0_SIF_SMP_RS */
	#define BMSK_MFD_H264_0_SIF_SMP_RS_SEM_SD	0xffff0000 /* Semaphore bits set by slice decoder */
	#define BMSK_MFD_H264_0_SIF_SMP_RS_SEM_HOST	0x0000ffff /* SEmaphore bits set by Host */
	/* Register BITFIELD for MFD_H264_0_SIF_SMP_RS - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_SIF_SMP_RS_SEM_SD	 0x1810, 16, 16, 0xffff0000
	#define BITFIELD_MFD_H264_0_SIF_SMP_RS_SEM_HOST	 0x1810, 0, 16, 0x0000ffff
#define ROFF_MFD_H264_0_SIF_MSK_RS	0x1814 /* MFD H264 0 SIF MSK RS */ 
	#define BITFIELD_MFD_H264_0_SIF_MSK_RS	 0x1814, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_SIF_MSK_RS */
	#define BLSB_MFD_H264_0_SIF_MSK_RS_SEM_SD	16
	#define BLSB_MFD_H264_0_SIF_MSK_RS_SEM_HOST	0
	/* Register Bit Widths for MFD_H264_0_SIF_MSK_RS */
	#define BWID_MFD_H264_0_SIF_MSK_RS_SEM_SD	16
	#define BWID_MFD_H264_0_SIF_MSK_RS_SEM_HOST	16
	/* Register Bit MASKS for MFD_H264_0_SIF_MSK_RS */
	#define BMSK_MFD_H264_0_SIF_MSK_RS_SEM_SD	0xffff0000 /* Semaphore Mask bits set by slice decoder */
	#define BMSK_MFD_H264_0_SIF_MSK_RS_SEM_HOST	0x0000ffff /* SEmaphore Mask bits set by Host */
	/* Register BITFIELD for MFD_H264_0_SIF_MSK_RS - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_SIF_MSK_RS_SEM_SD	 0x1814, 16, 16, 0xffff0000
	#define BITFIELD_MFD_H264_0_SIF_MSK_RS_SEM_HOST	 0x1814, 0, 16, 0x0000ffff
#define ROFF_MFD_H264_0_SIF_HDAT	0x1818 /* MFD H264 0 SIF HDAT */ 
	#define BITFIELD_MFD_H264_0_SIF_HDAT	 0x1818, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_SIF_SDDAT	0x181c /* MFD H264 0 SIF SDDAT */ 
	#define BITFIELD_MFD_H264_0_SIF_SDDAT	 0x181c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_SIF_SMP_RC	0x1820 /* MFD H264 0 SIF SMP RC */ 
	#define BITFIELD_MFD_H264_0_SIF_SMP_RC	 0x1820, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_SIF_SMP_RC */
	#define BLSB_MFD_H264_0_SIF_SMP_RC_SEM_SD	16
	#define BLSB_MFD_H264_0_SIF_SMP_RC_SEM_HOST	0
	/* Register Bit Widths for MFD_H264_0_SIF_SMP_RC */
	#define BWID_MFD_H264_0_SIF_SMP_RC_SEM_SD	16
	#define BWID_MFD_H264_0_SIF_SMP_RC_SEM_HOST	16
	/* Register Bit MASKS for MFD_H264_0_SIF_SMP_RC */
	#define BMSK_MFD_H264_0_SIF_SMP_RC_SEM_SD	0xffff0000 /* Semaphore bits set by slice decoder */
	#define BMSK_MFD_H264_0_SIF_SMP_RC_SEM_HOST	0x0000ffff /* SEmaphore bits set by Host */
	/* Register BITFIELD for MFD_H264_0_SIF_SMP_RC - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_SIF_SMP_RC_SEM_SD	 0x1820, 16, 16, 0xffff0000
	#define BITFIELD_MFD_H264_0_SIF_SMP_RC_SEM_HOST	 0x1820, 0, 16, 0x0000ffff
#define ROFF_MFD_H264_0_SIF_MSK_RC	0x1824 /* MFD H264 0 SIF MSK RC */ 
	#define BITFIELD_MFD_H264_0_SIF_MSK_RC	 0x1824, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_SIF_MSK_RC */
	#define BLSB_MFD_H264_0_SIF_MSK_RC_SEM_SD	16
	#define BLSB_MFD_H264_0_SIF_MSK_RC_SEM_HOST	0
	/* Register Bit Widths for MFD_H264_0_SIF_MSK_RC */
	#define BWID_MFD_H264_0_SIF_MSK_RC_SEM_SD	16
	#define BWID_MFD_H264_0_SIF_MSK_RC_SEM_HOST	16
	/* Register Bit MASKS for MFD_H264_0_SIF_MSK_RC */
	#define BMSK_MFD_H264_0_SIF_MSK_RC_SEM_SD	0xffff0000 /* Semaphore Mask bits set by slice decoder */
	#define BMSK_MFD_H264_0_SIF_MSK_RC_SEM_HOST	0x0000ffff /* SEmaphore Mask bits set by Host */
	/* Register BITFIELD for MFD_H264_0_SIF_MSK_RC - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_SIF_MSK_RC_SEM_SD	 0x1824, 16, 16, 0xffff0000
	#define BITFIELD_MFD_H264_0_SIF_MSK_RC_SEM_HOST	 0x1824, 0, 16, 0x0000ffff
#define ROFF_MFD_H264_0_SED	0x1900 /* MFD H264 0 SED */ 
	#define BITFIELD_MFD_H264_0_SED	 0x1900, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_SED */
	#define BLSB_MFD_H264_0_SED_RESERVED	3
	#define BLSB_MFD_H264_0_SED_BYTESWAP_DBG	2
	#define BLSB_MFD_H264_0_SED_BYTESWAP	1
	#define BLSB_MFD_H264_0_SED_STREAM_EN	0
	/* Register Bit Widths for MFD_H264_0_SED */
	#define BWID_MFD_H264_0_SED_RESERVED	29
	#define BWID_MFD_H264_0_SED_BYTESWAP_DBG	1
	#define BWID_MFD_H264_0_SED_BYTESWAP	1
	#define BWID_MFD_H264_0_SED_STREAM_EN	1
	/* Register Bit MASKS for MFD_H264_0_SED */
	#define BMSK_MFD_H264_0_SED_RESERVED	0xfffffff8 /* Reserved */
	#define BMSK_MFD_H264_0_SED_BYTESWAP_DBG	(1<<2) /* == 0x00000004: Byte swap debug */
	#define BMSK_MFD_H264_0_SED_BYTESWAP	(1<<1) /* == 0x00000002: Byte swap stream data */
	#define BMSK_MFD_H264_0_SED_STREAM_EN	(1<<0) /* == 0x00000001: Stream enable */
	/* Register BITFIELD for MFD_H264_0_SED - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_SED_RESERVED	 0x1900, 3, 29, 0xfffffff8
	#define BITFIELD_MFD_H264_0_SED_BYTESWAP_DBG	 0x1900, 2, 1, 0x00000004
	#define BITFIELD_MFD_H264_0_SED_BYTESWAP	 0x1900, 1, 1, 0x00000002
	#define BITFIELD_MFD_H264_0_SED_STREAM_EN	 0x1900, 0, 1, 0x00000001
#define ROFF_MFD_H264_0_SDEMC	0x1904 /* MFD H264 0 SDEMC */ 
	#define BITFIELD_MFD_H264_0_SDEMC	 0x1904, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_SDEMC */
	#define BLSB_MFD_H264_0_SDEMC_RESERVED	10
	#define BLSB_MFD_H264_0_SDEMC_STREAMDMA_DBG	9
	#define BLSB_MFD_H264_0_SDEMC_STREAMDMA_IDLE	8
	#define BLSB_MFD_H264_0_SDEMC_STREAMDMA_LL_PAUSE	7
	#define BLSB_MFD_H264_0_SDEMC_STREAMDMA_LINEAR_FETCH	6
	#define BLSB_MFD_H264_0_SDEMC_STREAMDMA_PAUSE	5
	#define BLSB_MFD_H264_0_SDEMC_STREAMDMA_MAXBURST	4
	#define BLSB_MFD_H264_0_SDEMC_STREAMDMA_LL	3
	#define BLSB_MFD_H264_0_SDEMC_STREAMDMA_CB_EMPTY	2
	#define BLSB_MFD_H264_0_SDEMC_STREAMDMA_FLUSH	1
	#define BLSB_MFD_H264_0_SDEMC_STREAMDMA_START	0
	/* Register Bit Widths for MFD_H264_0_SDEMC */
	#define BWID_MFD_H264_0_SDEMC_RESERVED	22
	#define BWID_MFD_H264_0_SDEMC_STREAMDMA_DBG	1
	#define BWID_MFD_H264_0_SDEMC_STREAMDMA_IDLE	1
	#define BWID_MFD_H264_0_SDEMC_STREAMDMA_LL_PAUSE	1
	#define BWID_MFD_H264_0_SDEMC_STREAMDMA_LINEAR_FETCH	1
	#define BWID_MFD_H264_0_SDEMC_STREAMDMA_PAUSE	1
	#define BWID_MFD_H264_0_SDEMC_STREAMDMA_MAXBURST	1
	#define BWID_MFD_H264_0_SDEMC_STREAMDMA_LL	1
	#define BWID_MFD_H264_0_SDEMC_STREAMDMA_CB_EMPTY	1
	#define BWID_MFD_H264_0_SDEMC_STREAMDMA_FLUSH	1
	#define BWID_MFD_H264_0_SDEMC_STREAMDMA_START	1
	/* Register Bit MASKS for MFD_H264_0_SDEMC */
	#define BMSK_MFD_H264_0_SDEMC_RESERVED	0xfffffc00 /* reserved */
	#define BMSK_MFD_H264_0_SDEMC_STREAMDMA_DBG	(1<<9) /* == 0x00000200: stream dma debug checksum adder */
	#define BMSK_MFD_H264_0_SDEMC_STREAMDMA_IDLE	(1<<8) /* == 0x00000100: stream dma idle */
	#define BMSK_MFD_H264_0_SDEMC_STREAMDMA_LL_PAUSE	(1<<7) /* == 0x00000080: stream dma linked list pause mode */
	#define BMSK_MFD_H264_0_SDEMC_STREAMDMA_LINEAR_FETCH	(1<<6) /* == 0x00000040: stream dma linear fetch mode */
	#define BMSK_MFD_H264_0_SDEMC_STREAMDMA_PAUSE	(1<<5) /* == 0x00000020: stream dma pause/resume mode */
	#define BMSK_MFD_H264_0_SDEMC_STREAMDMA_MAXBURST	(1<<4) /* == 0x00000010: stream dma maximum burst */
	#define BMSK_MFD_H264_0_SDEMC_STREAMDMA_LL	(1<<3) /* == 0x00000008: stream dma linked list mode */
	#define BMSK_MFD_H264_0_SDEMC_STREAMDMA_CB_EMPTY	(1<<2) /* == 0x00000004: stream dma circular buffer empty */
	#define BMSK_MFD_H264_0_SDEMC_STREAMDMA_FLUSH	(1<<1) /* == 0x00000002: stream dma fifo flush */
	#define BMSK_MFD_H264_0_SDEMC_STREAMDMA_START	(1<<0) /* == 0x00000001: stream dma start */
	/* Register BITFIELD for MFD_H264_0_SDEMC - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_SDEMC_RESERVED	 0x1904, 10, 22, 0xfffffc00
	#define BITFIELD_MFD_H264_0_SDEMC_STREAMDMA_DBG	 0x1904, 9, 1, 0x00000200
	#define BITFIELD_MFD_H264_0_SDEMC_STREAMDMA_IDLE	 0x1904, 8, 1, 0x00000100
	#define BITFIELD_MFD_H264_0_SDEMC_STREAMDMA_LL_PAUSE	 0x1904, 7, 1, 0x00000080
	#define BITFIELD_MFD_H264_0_SDEMC_STREAMDMA_LINEAR_FETCH	 0x1904, 6, 1, 0x00000040
	#define BITFIELD_MFD_H264_0_SDEMC_STREAMDMA_PAUSE	 0x1904, 5, 1, 0x00000020
	#define BITFIELD_MFD_H264_0_SDEMC_STREAMDMA_MAXBURST	 0x1904, 4, 1, 0x00000010
	#define BITFIELD_MFD_H264_0_SDEMC_STREAMDMA_LL	 0x1904, 3, 1, 0x00000008
	#define BITFIELD_MFD_H264_0_SDEMC_STREAMDMA_CB_EMPTY	 0x1904, 2, 1, 0x00000004
	#define BITFIELD_MFD_H264_0_SDEMC_STREAMDMA_FLUSH	 0x1904, 1, 1, 0x00000002
	#define BITFIELD_MFD_H264_0_SDEMC_STREAMDMA_START	 0x1904, 0, 1, 0x00000001
#define ROFF_MFD_H264_0_DMA_CB_BASE	0x1908 /* MFD H264 0 DMA CB BASE */ 
	#define BITFIELD_MFD_H264_0_DMA_CB_BASE	 0x1908, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_DMA_SB_RDPTR	0x190c /* MFD H264 0 DMA SB RDPTR */ 
	#define BITFIELD_MFD_H264_0_DMA_SB_RDPTR	 0x190c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_DMA_CB_SIZE	0x1910 /* MFD H264 0 DMA CB SIZE */ 
	#define BITFIELD_MFD_H264_0_DMA_CB_SIZE	 0x1910, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_DMA_WTRMARK	0x1914 /* MFD H264 0 DMA WTRMARK */ 
	#define BITFIELD_MFD_H264_0_DMA_WTRMARK	 0x1914, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_DMA_WDT	0x1918 /* MFD H264 0 DMA WDT */ 
	#define BITFIELD_MFD_H264_0_DMA_WDT	 0x1918, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_DMA_WDT */
	#define BLSB_MFD_H264_0_DMA_WDT_WDT_EN	31
	#define BLSB_MFD_H264_0_DMA_WDT_RESERVED	24
	#define BLSB_MFD_H264_0_DMA_WDT_WDT_VALUE	0
	/* Register Bit Widths for MFD_H264_0_DMA_WDT */
	#define BWID_MFD_H264_0_DMA_WDT_WDT_EN	1
	#define BWID_MFD_H264_0_DMA_WDT_RESERVED	7
	#define BWID_MFD_H264_0_DMA_WDT_WDT_VALUE	24
	/* Register Bit MASKS for MFD_H264_0_DMA_WDT */
	#define BMSK_MFD_H264_0_DMA_WDT_WDT_EN	(1<<31) /* == 0x80000000: watch dog timer enable */
	#define BMSK_MFD_H264_0_DMA_WDT_RESERVED	0x7f000000 /* reserved */
	#define BMSK_MFD_H264_0_DMA_WDT_WDT_VALUE	0x00ffffff /* watch dog timer time out value */
	/* Register BITFIELD for MFD_H264_0_DMA_WDT - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_DMA_WDT_WDT_EN	 0x1918, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_DMA_WDT_RESERVED	 0x1918, 24, 7, 0x7f000000
	#define BITFIELD_MFD_H264_0_DMA_WDT_WDT_VALUE	 0x1918, 0, 24, 0x00ffffff
#define ROFF_MFD_H264_0_DMA_CB_RDPTR	0x191c /* MFD H264 0 DMA CB RDPTR */ 
	#define BITFIELD_MFD_H264_0_DMA_CB_RDPTR	 0x191c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_DMA_CB_WRPTR	0x1920 /* MFD H264 0 DMA CB WRPTR */ 
	#define BITFIELD_MFD_H264_0_DMA_CB_WRPTR	 0x1920, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_DMA_SDLINK	0x1924 /* MFD H264 0 DMA SDLINK */ 
	#define BITFIELD_MFD_H264_0_DMA_SDLINK	 0x1924, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_DMA_SDLINK */
	#define BLSB_MFD_H264_0_DMA_SDLINK_LINK_ADDR	5
	#define BLSB_MFD_H264_0_DMA_SDLINK_RESERVED	0
	/* Register Bit Widths for MFD_H264_0_DMA_SDLINK */
	#define BWID_MFD_H264_0_DMA_SDLINK_LINK_ADDR	27
	#define BWID_MFD_H264_0_DMA_SDLINK_RESERVED	5
	/* Register Bit MASKS for MFD_H264_0_DMA_SDLINK */
	#define BMSK_MFD_H264_0_DMA_SDLINK_LINK_ADDR	0xffffffe0 /* Link Address */
	#define BMSK_MFD_H264_0_DMA_SDLINK_RESERVED	0x0000001f /* Reserved */
	/* Register BITFIELD for MFD_H264_0_DMA_SDLINK - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_DMA_SDLINK_LINK_ADDR	 0x1924, 5, 27, 0xffffffe0
	#define BITFIELD_MFD_H264_0_DMA_SDLINK_RESERVED	 0x1924, 0, 5, 0x0000001f
#define ROFF_MFD_H264_0_DMA_SDLLSA	0x1928 /* MFD H264 0 DMA SDLLSA */ 
	#define BITFIELD_MFD_H264_0_DMA_SDLLSA	 0x1928, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_DMA_SDLNDA	0x192c /* MFD H264 0 DMA SDLNDA */ 
	#define BITFIELD_MFD_H264_0_DMA_SDLNDA	 0x192c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_DMA_SDLNDA */
	#define BLSB_MFD_H264_0_DMA_SDLNDA_NEXT_DESC_ADDR	5
	#define BLSB_MFD_H264_0_DMA_SDLNDA_RESERVED	0
	/* Register Bit Widths for MFD_H264_0_DMA_SDLNDA */
	#define BWID_MFD_H264_0_DMA_SDLNDA_NEXT_DESC_ADDR	27
	#define BWID_MFD_H264_0_DMA_SDLNDA_RESERVED	5
	/* Register Bit MASKS for MFD_H264_0_DMA_SDLNDA */
	#define BMSK_MFD_H264_0_DMA_SDLNDA_NEXT_DESC_ADDR	0xffffffe0 /* Next Descriptor Address */
	#define BMSK_MFD_H264_0_DMA_SDLNDA_RESERVED	0x0000001f /* Reserved */
	/* Register BITFIELD for MFD_H264_0_DMA_SDLNDA - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_DMA_SDLNDA_NEXT_DESC_ADDR	 0x192c, 5, 27, 0xffffffe0
	#define BITFIELD_MFD_H264_0_DMA_SDLNDA_RESERVED	 0x192c, 0, 5, 0x0000001f
#define ROFF_MFD_H264_0_DMA_SDLDBC	0x1930 /* MFD H264 0 DMA SDLDBC */ 
	#define BITFIELD_MFD_H264_0_DMA_SDLDBC	 0x1930, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_DMA_SDLCBC	0x1934 /* MFD H264 0 DMA SDLCBC */ 
	#define BITFIELD_MFD_H264_0_DMA_SDLCBC	 0x1934, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_DMA_SDLDC	0x1938 /* MFD H264 0 DMA SDLDC */ 
	#define BITFIELD_MFD_H264_0_DMA_SDLDC	 0x1938, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_DMA_SDLDC */
	#define BLSB_MFD_H264_0_DMA_SDLDC_TERM	32
	#define BLSB_MFD_H264_0_DMA_SDLDC_INTR	31
	#define BLSB_MFD_H264_0_DMA_SDLDC_RESERVED	0
	/* Register Bit Widths for MFD_H264_0_DMA_SDLDC */
	#define BWID_MFD_H264_0_DMA_SDLDC_TERM	1
	#define BWID_MFD_H264_0_DMA_SDLDC_INTR	1
	#define BWID_MFD_H264_0_DMA_SDLDC_RESERVED	30
	/* Register Bit MASKS for MFD_H264_0_DMA_SDLDC */
	#define BMSK_MFD_H264_0_DMA_SDLDC_TERM	(1<<32) /* == 0x00000001: Term */
	#define BMSK_MFD_H264_0_DMA_SDLDC_INTR	(1<<31) /* == 0x80000000: Intr */
	#define BMSK_MFD_H264_0_DMA_SDLDC_RESERVED	0x3fffffff /* Reserved */
	/* Register BITFIELD for MFD_H264_0_DMA_SDLDC - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_DMA_SDLDC_TERM	 0x1938, 32, 1, 0x00000001
	#define BITFIELD_MFD_H264_0_DMA_SDLDC_INTR	 0x1938, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_DMA_SDLDC_RESERVED	 0x1938, 0, 30, 0x3fffffff
#define ROFF_MFD_H264_0_DMA_FIFO	0x193c /* MFD H264 0 DMA FIFO */ 
	#define BITFIELD_MFD_H264_0_DMA_FIFO	 0x193c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_DMA_FIFO_STAT	0x1940 /* MFD H264 0 DMA FIFO STAT */ 
	#define BITFIELD_MFD_H264_0_DMA_FIFO_STAT	 0x1940, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_DMA_FIFO_STAT */
	#define BLSB_MFD_H264_0_DMA_FIFO_STAT_RESERVED	13
	#define BLSB_MFD_H264_0_DMA_FIFO_STAT_NUM_BYTES	3
	#define BLSB_MFD_H264_0_DMA_FIFO_STAT_SCD_STALL	2
	#define BLSB_MFD_H264_0_DMA_FIFO_STAT_SYNC_FIFO_EMPTY	1
	#define BLSB_MFD_H264_0_DMA_FIFO_STAT_ASYNC_FIFO_EMPTY	0
	/* Register Bit Widths for MFD_H264_0_DMA_FIFO_STAT */
	#define BWID_MFD_H264_0_DMA_FIFO_STAT_RESERVED	19
	#define BWID_MFD_H264_0_DMA_FIFO_STAT_NUM_BYTES	10
	#define BWID_MFD_H264_0_DMA_FIFO_STAT_SCD_STALL	1
	#define BWID_MFD_H264_0_DMA_FIFO_STAT_SYNC_FIFO_EMPTY	1
	#define BWID_MFD_H264_0_DMA_FIFO_STAT_ASYNC_FIFO_EMPTY	1
	/* Register Bit MASKS for MFD_H264_0_DMA_FIFO_STAT */
	#define BMSK_MFD_H264_0_DMA_FIFO_STAT_RESERVED	0xffffe000 /* Reserved */
	#define BMSK_MFD_H264_0_DMA_FIFO_STAT_NUM_BYTES	0x00001ff8 /* Number of bytes */
	#define BMSK_MFD_H264_0_DMA_FIFO_STAT_SCD_STALL	(1<<2) /* == 0x00000004: SCD stall */
	#define BMSK_MFD_H264_0_DMA_FIFO_STAT_SYNC_FIFO_EMPTY	(1<<1) /* == 0x00000002: synchronous FIFO empty */
	#define BMSK_MFD_H264_0_DMA_FIFO_STAT_ASYNC_FIFO_EMPTY	(1<<0) /* == 0x00000001: asynchronous FIFO empty */
	/* Register BITFIELD for MFD_H264_0_DMA_FIFO_STAT - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_DMA_FIFO_STAT_RESERVED	 0x1940, 13, 19, 0xffffe000
	#define BITFIELD_MFD_H264_0_DMA_FIFO_STAT_NUM_BYTES	 0x1940, 3, 10, 0x00001ff8
	#define BITFIELD_MFD_H264_0_DMA_FIFO_STAT_SCD_STALL	 0x1940, 2, 1, 0x00000004
	#define BITFIELD_MFD_H264_0_DMA_FIFO_STAT_SYNC_FIFO_EMPTY	 0x1940, 1, 1, 0x00000002
	#define BITFIELD_MFD_H264_0_DMA_FIFO_STAT_ASYNC_FIFO_EMPTY	 0x1940, 0, 1, 0x00000001
#define ROFF_MFD_H264_0_DMA_INT_EN	0x1944 /* MFD H264 0 DMA INT EN */ 
	#define BITFIELD_MFD_H264_0_DMA_INT_EN	 0x1944, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_DMA_INT_EN */
	#define BLSB_MFD_H264_0_DMA_INT_EN_RESERVED	6
	#define BLSB_MFD_H264_0_DMA_INT_EN_CD_CNTR_EMPTY	5
	#define BLSB_MFD_H264_0_DMA_INT_EN_EMPTY	4
	#define BLSB_MFD_H264_0_DMA_INT_EN_CB	3
	#define BLSB_MFD_H264_0_DMA_INT_EN_LL	2
	#define BLSB_MFD_H264_0_DMA_INT_EN_WDT	1
	#define BLSB_MFD_H264_0_DMA_INT_EN_LINEAR_EMPTY	0
	/* Register Bit Widths for MFD_H264_0_DMA_INT_EN */
	#define BWID_MFD_H264_0_DMA_INT_EN_RESERVED	26
	#define BWID_MFD_H264_0_DMA_INT_EN_CD_CNTR_EMPTY	1
	#define BWID_MFD_H264_0_DMA_INT_EN_EMPTY	1
	#define BWID_MFD_H264_0_DMA_INT_EN_CB	1
	#define BWID_MFD_H264_0_DMA_INT_EN_LL	1
	#define BWID_MFD_H264_0_DMA_INT_EN_WDT	1
	#define BWID_MFD_H264_0_DMA_INT_EN_LINEAR_EMPTY	1
	/* Register Bit MASKS for MFD_H264_0_DMA_INT_EN */
	#define BMSK_MFD_H264_0_DMA_INT_EN_RESERVED	0xffffffc0 /* Reserved */
	#define BMSK_MFD_H264_0_DMA_INT_EN_CD_CNTR_EMPTY	(1<<5) /* == 0x00000020: DMA Cd counter empty interrupt */
	#define BMSK_MFD_H264_0_DMA_INT_EN_EMPTY	(1<<4) /* == 0x00000010: DMA empty interrupt */
	#define BMSK_MFD_H264_0_DMA_INT_EN_CB	(1<<3) /* == 0x00000008: DMA circular buffer empty interrupt */
	#define BMSK_MFD_H264_0_DMA_INT_EN_LL	(1<<2) /* == 0x00000004: DMA linkedlist interrupt */
	#define BMSK_MFD_H264_0_DMA_INT_EN_WDT	(1<<1) /* == 0x00000002: Watch dog timer interrupt */
	#define BMSK_MFD_H264_0_DMA_INT_EN_LINEAR_EMPTY	(1<<0) /* == 0x00000001: Linear Buffer empty interrupt */
	/* Register BITFIELD for MFD_H264_0_DMA_INT_EN - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_DMA_INT_EN_RESERVED	 0x1944, 6, 26, 0xffffffc0
	#define BITFIELD_MFD_H264_0_DMA_INT_EN_CD_CNTR_EMPTY	 0x1944, 5, 1, 0x00000020
	#define BITFIELD_MFD_H264_0_DMA_INT_EN_EMPTY	 0x1944, 4, 1, 0x00000010
	#define BITFIELD_MFD_H264_0_DMA_INT_EN_CB	 0x1944, 3, 1, 0x00000008
	#define BITFIELD_MFD_H264_0_DMA_INT_EN_LL	 0x1944, 2, 1, 0x00000004
	#define BITFIELD_MFD_H264_0_DMA_INT_EN_WDT	 0x1944, 1, 1, 0x00000002
	#define BITFIELD_MFD_H264_0_DMA_INT_EN_LINEAR_EMPTY	 0x1944, 0, 1, 0x00000001
#define ROFF_MFD_H264_0_DMA_INT_STAT	0x1948 /* MFD H264 0 DMA INT STAT */ 
	#define BITFIELD_MFD_H264_0_DMA_INT_STAT	 0x1948, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_DMA_INT_STAT */
	#define BLSB_MFD_H264_0_DMA_INT_STAT_RESERVED	6
	#define BLSB_MFD_H264_0_DMA_INT_STAT_CD_CNTR_EMPTY	5
	#define BLSB_MFD_H264_0_DMA_INT_STAT_EMPTY	4
	#define BLSB_MFD_H264_0_DMA_INT_STAT_CB	3
	#define BLSB_MFD_H264_0_DMA_INT_STAT_LL	2
	#define BLSB_MFD_H264_0_DMA_INT_STAT_WDT	1
	#define BLSB_MFD_H264_0_DMA_INT_STAT_LINEAR_EMPTY	0
	/* Register Bit Widths for MFD_H264_0_DMA_INT_STAT */
	#define BWID_MFD_H264_0_DMA_INT_STAT_RESERVED	26
	#define BWID_MFD_H264_0_DMA_INT_STAT_CD_CNTR_EMPTY	1
	#define BWID_MFD_H264_0_DMA_INT_STAT_EMPTY	1
	#define BWID_MFD_H264_0_DMA_INT_STAT_CB	1
	#define BWID_MFD_H264_0_DMA_INT_STAT_LL	1
	#define BWID_MFD_H264_0_DMA_INT_STAT_WDT	1
	#define BWID_MFD_H264_0_DMA_INT_STAT_LINEAR_EMPTY	1
	/* Register Bit MASKS for MFD_H264_0_DMA_INT_STAT */
	#define BMSK_MFD_H264_0_DMA_INT_STAT_RESERVED	0xffffffc0 /* Reserved */
	#define BMSK_MFD_H264_0_DMA_INT_STAT_CD_CNTR_EMPTY	(1<<5) /* == 0x00000020: DMA Cd counter empty interrupt */
	#define BMSK_MFD_H264_0_DMA_INT_STAT_EMPTY	(1<<4) /* == 0x00000010: DMA empty interrupt */
	#define BMSK_MFD_H264_0_DMA_INT_STAT_CB	(1<<3) /* == 0x00000008: DMA circular buffer empty interrupt */
	#define BMSK_MFD_H264_0_DMA_INT_STAT_LL	(1<<2) /* == 0x00000004: DMA linkedlist interrupt */
	#define BMSK_MFD_H264_0_DMA_INT_STAT_WDT	(1<<1) /* == 0x00000002: Watch dog timer interrupt */
	#define BMSK_MFD_H264_0_DMA_INT_STAT_LINEAR_EMPTY	(1<<0) /* == 0x00000001: Linear Buffer empty interrupt */
	/* Register BITFIELD for MFD_H264_0_DMA_INT_STAT - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_DMA_INT_STAT_RESERVED	 0x1948, 6, 26, 0xffffffc0
	#define BITFIELD_MFD_H264_0_DMA_INT_STAT_CD_CNTR_EMPTY	 0x1948, 5, 1, 0x00000020
	#define BITFIELD_MFD_H264_0_DMA_INT_STAT_EMPTY	 0x1948, 4, 1, 0x00000010
	#define BITFIELD_MFD_H264_0_DMA_INT_STAT_CB	 0x1948, 3, 1, 0x00000008
	#define BITFIELD_MFD_H264_0_DMA_INT_STAT_LL	 0x1948, 2, 1, 0x00000004
	#define BITFIELD_MFD_H264_0_DMA_INT_STAT_WDT	 0x1948, 1, 1, 0x00000002
	#define BITFIELD_MFD_H264_0_DMA_INT_STAT_LINEAR_EMPTY	 0x1948, 0, 1, 0x00000001
#define ROFF_MFD_H264_0_DMA_BS_CNTR	0x194c /* MFD H264 0 DMA BS CNTR */ 
	#define BITFIELD_MFD_H264_0_DMA_BS_CNTR	 0x194c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_DMA_CD_CNTR	0x1950 /* MFD H264 0 DMA CD CNTR */ 
	#define BITFIELD_MFD_H264_0_DMA_CD_CNTR	 0x1950, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_DMA_CD_CNTR */
	#define BLSB_MFD_H264_0_DMA_CD_CNTR_CD_EN	31
	#define BLSB_MFD_H264_0_DMA_CD_CNTR_RESERVED	20
	#define BLSB_MFD_H264_0_DMA_CD_CNTR_CD_CNTR	0
	/* Register Bit Widths for MFD_H264_0_DMA_CD_CNTR */
	#define BWID_MFD_H264_0_DMA_CD_CNTR_CD_EN	1
	#define BWID_MFD_H264_0_DMA_CD_CNTR_RESERVED	11
	#define BWID_MFD_H264_0_DMA_CD_CNTR_CD_CNTR	20
	/* Register Bit MASKS for MFD_H264_0_DMA_CD_CNTR */
	#define BMSK_MFD_H264_0_DMA_CD_CNTR_CD_EN	(1<<31) /* == 0x80000000: CD enable */
	#define BMSK_MFD_H264_0_DMA_CD_CNTR_RESERVED	0x7ff00000 /* Reserved */
	#define BMSK_MFD_H264_0_DMA_CD_CNTR_CD_CNTR	0x000fffff /* CD counter */
	/* Register BITFIELD for MFD_H264_0_DMA_CD_CNTR - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_DMA_CD_CNTR_CD_EN	 0x1950, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_DMA_CD_CNTR_RESERVED	 0x1950, 20, 11, 0x7ff00000
	#define BITFIELD_MFD_H264_0_DMA_CD_CNTR_CD_CNTR	 0x1950, 0, 20, 0x000fffff
#define ROFF_MFD_H264_0_SCD_XCR	0x1a00 /* MFD H264 0 SCD XCR */ 
	#define BITFIELD_MFD_H264_0_SCD_XCR	 0x1a00, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_SCD_XCR */
	#define BLSB_MFD_H264_0_SCD_XCR_SCDFWEN	24
	/* Register Bit Widths for MFD_H264_0_SCD_XCR */
	#define BWID_MFD_H264_0_SCD_XCR_SCDFWEN	1
	/* Register Bit MASKS for MFD_H264_0_SCD_XCR */
	#define BMSK_MFD_H264_0_SCD_XCR_SCDFWEN	(1<<24) /* == 0x01000000: SCD FW Mode Enable */
	/* Register BITFIELD for MFD_H264_0_SCD_XCR - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_SCD_XCR_SCDFWEN	 0x1a00, 24, 1, 0x01000000
#define ROFF_MFD_H264_0_SCD_XSCR1	0x1a04 /* MFD H264 0 SCD XSCR1 */ 
	#define BITFIELD_MFD_H264_0_SCD_XSCR1	 0x1a04, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_SCD_XSCR2	0x1a08 /* MFD H264 0 SCD XSCR2 */ 
	#define BITFIELD_MFD_H264_0_SCD_XSCR2	 0x1a08, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_SCD_FWPREAD	0x1a0c /* MFD H264 0 SCD FWPREAD */ 
	#define BITFIELD_MFD_H264_0_SCD_FWPREAD	 0x1a0c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_SCD_FWCRTL	0x1a10 /* MFD H264 0 SCD FWCRTL */ 
	#define BITFIELD_MFD_H264_0_SCD_FWCRTL	 0x1a10, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_SCD_FWCRTL */
	#define BLSB_MFD_H264_0_SCD_FWCRTL_GET_BYTE	31
	#define BLSB_MFD_H264_0_SCD_FWCRTL_PYLD_REL	30
	#define BLSB_MFD_H264_0_SCD_FWCRTL_PIPE_DFLUSH	29
	#define BLSB_MFD_H264_0_SCD_FWCRTL_RESERVED2	28
	#define BLSB_MFD_H264_0_SCD_FWCRTL_RESERVED1	18
	#define BLSB_MFD_H264_0_SCD_FWCRTL_STREAM_MSK	17
	#define BLSB_MFD_H264_0_SCD_FWCRTL_SC_DET_ALL	16
	#define BLSB_MFD_H264_0_SCD_FWCRTL_RESERVED0	0
	/* Register Bit Widths for MFD_H264_0_SCD_FWCRTL */
	#define BWID_MFD_H264_0_SCD_FWCRTL_GET_BYTE	1
	#define BWID_MFD_H264_0_SCD_FWCRTL_PYLD_REL	1
	#define BWID_MFD_H264_0_SCD_FWCRTL_PIPE_DFLUSH	1
	#define BWID_MFD_H264_0_SCD_FWCRTL_RESERVED2	1
	#define BWID_MFD_H264_0_SCD_FWCRTL_RESERVED1	10
	#define BWID_MFD_H264_0_SCD_FWCRTL_STREAM_MSK	1
	#define BWID_MFD_H264_0_SCD_FWCRTL_SC_DET_ALL	1
	#define BWID_MFD_H264_0_SCD_FWCRTL_RESERVED0	16
	/* Register Bit MASKS for MFD_H264_0_SCD_FWCRTL */
	#define BMSK_MFD_H264_0_SCD_FWCRTL_GET_BYTE	(1<<31) /* == 0x80000000: initiate single byte pop pf pipeline registers */
	#define BMSK_MFD_H264_0_SCD_FWCRTL_PYLD_REL	(1<<30) /* == 0x40000000: Release payload bytes */
	#define BMSK_MFD_H264_0_SCD_FWCRTL_PIPE_DFLUSH	(1<<29) /* == 0x20000000: Flush captured SC */
	#define BMSK_MFD_H264_0_SCD_FWCRTL_RESERVED2	(1<<28) /* == 0x10000000: Reserved */
	#define BMSK_MFD_H264_0_SCD_FWCRTL_RESERVED1	0x0ffc0000 /* Reserved */
	#define BMSK_MFD_H264_0_SCD_FWCRTL_STREAM_MSK	(1<<17) /* == 0x00020000: mask byte stream data to the decoder */
	#define BMSK_MFD_H264_0_SCD_FWCRTL_SC_DET_ALL	(1<<16) /* == 0x00010000: SCD detects all start codes */
	#define BMSK_MFD_H264_0_SCD_FWCRTL_RESERVED0	0x0000ffff /* Reserved */
	/* Register BITFIELD for MFD_H264_0_SCD_FWCRTL - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_SCD_FWCRTL_GET_BYTE	 0x1a10, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_0_SCD_FWCRTL_PYLD_REL	 0x1a10, 30, 1, 0x40000000
	#define BITFIELD_MFD_H264_0_SCD_FWCRTL_PIPE_DFLUSH	 0x1a10, 29, 1, 0x20000000
	#define BITFIELD_MFD_H264_0_SCD_FWCRTL_RESERVED2	 0x1a10, 28, 1, 0x10000000
	#define BITFIELD_MFD_H264_0_SCD_FWCRTL_RESERVED1	 0x1a10, 18, 10, 0x0ffc0000
	#define BITFIELD_MFD_H264_0_SCD_FWCRTL_STREAM_MSK	 0x1a10, 17, 1, 0x00020000
	#define BITFIELD_MFD_H264_0_SCD_FWCRTL_SC_DET_ALL	 0x1a10, 16, 1, 0x00010000
	#define BITFIELD_MFD_H264_0_SCD_FWCRTL_RESERVED0	 0x1a10, 0, 16, 0x0000ffff
#define ROFF_MFD_H264_0_SCD_FWSTAT	0x1a14 /* MFD H264 0 SCD FWSTAT */ 
	#define BITFIELD_MFD_H264_0_SCD_FWSTAT	 0x1a14, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_SCD_WRCTRL	0x1a18 /* MFD H264 0 SCD WRCTRL */ 
	#define BITFIELD_MFD_H264_0_SCD_WRCTRL	 0x1a18, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_SCD_WRDATA	0x1a1c /* MFD H264 0 SCD WRDATA */ 
	#define BITFIELD_MFD_H264_0_SCD_WRDATA	 0x1a1c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_PIP_CTRL	0x1b00 /* MFD H264 0 PIP CTRL */ 
	#define BITFIELD_MFD_H264_0_PIP_CTRL	 0x1b00, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_PIP_CTRL */
	#define BLSB_MFD_H264_0_PIP_CTRL_RESERVED	3
	#define BLSB_MFD_H264_0_PIP_CTRL_PIP_TEST	2
	#define BLSB_MFD_H264_0_PIP_CTRL_PIP_SCALER_MODE	0
	/* Register Bit Widths for MFD_H264_0_PIP_CTRL */
	#define BWID_MFD_H264_0_PIP_CTRL_RESERVED	29
	#define BWID_MFD_H264_0_PIP_CTRL_PIP_TEST	1
	#define BWID_MFD_H264_0_PIP_CTRL_PIP_SCALER_MODE	2
	/* Register Bit MASKS for MFD_H264_0_PIP_CTRL */
	#define BMSK_MFD_H264_0_PIP_CTRL_RESERVED	0xfffffff8 /* Reserved */
	#define BMSK_MFD_H264_0_PIP_CTRL_PIP_TEST	(1<<2) /* == 0x00000004: Pip_Test */
	#define BMSK_MFD_H264_0_PIP_CTRL_PIP_SCALER_MODE	0x00000003 /* Pip_scaler_mode */
	/* Register BITFIELD for MFD_H264_0_PIP_CTRL - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_PIP_CTRL_RESERVED	 0x1b00, 3, 29, 0xfffffff8
	#define BITFIELD_MFD_H264_0_PIP_CTRL_PIP_TEST	 0x1b00, 2, 1, 0x00000004
	#define BITFIELD_MFD_H264_0_PIP_CTRL_PIP_SCALER_MODE	 0x1b00, 0, 2, 0x00000003
#define ROFF_MFD_H264_0_PIP_STAT	0x1b04 /* MFD H264 0 PIP STAT */ 
	#define BITFIELD_MFD_H264_0_PIP_STAT	 0x1b04, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_PIP_STAT */
	#define BLSB_MFD_H264_0_PIP_STAT_Reserved	1
	#define BLSB_MFD_H264_0_PIP_STAT_PIP_BUSY	0
	/* Register Bit Widths for MFD_H264_0_PIP_STAT */
	#define BWID_MFD_H264_0_PIP_STAT_Reserved	31
	#define BWID_MFD_H264_0_PIP_STAT_PIP_BUSY	1
	/* Register Bit MASKS for MFD_H264_0_PIP_STAT */
	#define BMSK_MFD_H264_0_PIP_STAT_Reserved	0xfffffffe /* Reserved */
	#define BMSK_MFD_H264_0_PIP_STAT_PIP_BUSY	(1<<0) /* == 0x00000001: PIP_busy */
	/* Register BITFIELD for MFD_H264_0_PIP_STAT - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_PIP_STAT_Reserved	 0x1b04, 1, 31, 0xfffffffe
	#define BITFIELD_MFD_H264_0_PIP_STAT_PIP_BUSY	 0x1b04, 0, 1, 0x00000001
#define ROFF_MFD_H264_0_PIP_CDYB	0x1b08 /* MFD H264 0 PIP CDYB */ 
	#define BITFIELD_MFD_H264_0_PIP_CDYB	 0x1b08, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_PIP_CDUB	0x1b0c /* MFD H264 0 PIP CDUB */ 
	#define BITFIELD_MFD_H264_0_PIP_CDUB	 0x1b0c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_PIP_TST_CTRL	0x1b10 /* MFD H264 0 PIP TST CTRL */ 
	#define BITFIELD_MFD_H264_0_PIP_TST_CTRL	 0x1b10, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_0_PIP_TST_CTRL */
	#define BLSB_MFD_H264_0_PIP_TST_CTRL_RESERVED	28
	#define BLSB_MFD_H264_0_PIP_TST_CTRL_PIP_WR_WORDS_PER_ROW	27
	#define BLSB_MFD_H264_0_PIP_TST_CTRL_PIP_WR_NUM_ROWS	23
	#define BLSB_MFD_H264_0_PIP_TST_CTRL_PIP_WR_COL_POS	15
	#define BLSB_MFD_H264_0_PIP_TST_CTRL_PIP_WR_ROW_POS	4
	#define BLSB_MFD_H264_0_PIP_TST_CTRL_PIP_WR_DATA_TYPE	2
	#define BLSB_MFD_H264_0_PIP_TST_CTRL_PIP_WR_FIELD_FRAME	1
	#define BLSB_MFD_H264_0_PIP_TST_CTRL_PIP_WR_GNT	0
	/* Register Bit Widths for MFD_H264_0_PIP_TST_CTRL */
	#define BWID_MFD_H264_0_PIP_TST_CTRL_RESERVED	4
	#define BWID_MFD_H264_0_PIP_TST_CTRL_PIP_WR_WORDS_PER_ROW	1
	#define BWID_MFD_H264_0_PIP_TST_CTRL_PIP_WR_NUM_ROWS	4
	#define BWID_MFD_H264_0_PIP_TST_CTRL_PIP_WR_COL_POS	8
	#define BWID_MFD_H264_0_PIP_TST_CTRL_PIP_WR_ROW_POS	11
	#define BWID_MFD_H264_0_PIP_TST_CTRL_PIP_WR_DATA_TYPE	2
	#define BWID_MFD_H264_0_PIP_TST_CTRL_PIP_WR_FIELD_FRAME	1
	#define BWID_MFD_H264_0_PIP_TST_CTRL_PIP_WR_GNT	1
	/* Register Bit MASKS for MFD_H264_0_PIP_TST_CTRL */
	#define BMSK_MFD_H264_0_PIP_TST_CTRL_RESERVED	0xf0000000 /* Reserved */
	#define BMSK_MFD_H264_0_PIP_TST_CTRL_PIP_WR_WORDS_PER_ROW	(1<<27) /* == 0x08000000: PIP_wr_words_per_row */
	#define BMSK_MFD_H264_0_PIP_TST_CTRL_PIP_WR_NUM_ROWS	0x07800000 /* PIP WR Num rows */
	#define BMSK_MFD_H264_0_PIP_TST_CTRL_PIP_WR_COL_POS	0x007f8000 /* PIP WR Col POS */
	#define BMSK_MFD_H264_0_PIP_TST_CTRL_PIP_WR_ROW_POS	0x00007ff0 /* PIP WR Row Pos */
	#define BMSK_MFD_H264_0_PIP_TST_CTRL_PIP_WR_DATA_TYPE	0x0000000c /* PIP WR data type */
	#define BMSK_MFD_H264_0_PIP_TST_CTRL_PIP_WR_FIELD_FRAME	(1<<1) /* == 0x00000002: PIP WR field frame */
	#define BMSK_MFD_H264_0_PIP_TST_CTRL_PIP_WR_GNT	(1<<0) /* == 0x00000001: PIP WR GNT */
	/* Register BITFIELD for MFD_H264_0_PIP_TST_CTRL - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_0_PIP_TST_CTRL_RESERVED	 0x1b10, 28, 4, 0xf0000000
	#define BITFIELD_MFD_H264_0_PIP_TST_CTRL_PIP_WR_WORDS_PER_ROW	 0x1b10, 27, 1, 0x08000000
	#define BITFIELD_MFD_H264_0_PIP_TST_CTRL_PIP_WR_NUM_ROWS	 0x1b10, 23, 4, 0x07800000
	#define BITFIELD_MFD_H264_0_PIP_TST_CTRL_PIP_WR_COL_POS	 0x1b10, 15, 8, 0x007f8000
	#define BITFIELD_MFD_H264_0_PIP_TST_CTRL_PIP_WR_ROW_POS	 0x1b10, 4, 11, 0x00007ff0
	#define BITFIELD_MFD_H264_0_PIP_TST_CTRL_PIP_WR_DATA_TYPE	 0x1b10, 2, 2, 0x0000000c
	#define BITFIELD_MFD_H264_0_PIP_TST_CTRL_PIP_WR_FIELD_FRAME	 0x1b10, 1, 1, 0x00000002
	#define BITFIELD_MFD_H264_0_PIP_TST_CTRL_PIP_WR_GNT	 0x1b10, 0, 1, 0x00000001
#define ROFF_MFD_H264_0_PIP_TST_WR_DATA_LO	0x1b14 /* MFD H264 0 PIP TST WR DATA LO */ 
	#define BITFIELD_MFD_H264_0_PIP_TST_WR_DATA_LO	 0x1b14, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_0_PIP_TST_WR_DATA_HI	0x1b18 /* MFD H264 0 PIP TST WR DATA HI */ 
	#define BITFIELD_MFD_H264_0_PIP_TST_WR_DATA_HI	 0x1b18, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SMP_RD	0x2000 /* MFD VC1 0 SMP RD */ 
	#define BITFIELD_MFD_VC1_0_SMP_RD	 0x2000, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_INT_EN_RD	0x2004 /* MFD VC1 0 INT EN RD */ 
	#define BITFIELD_MFD_VC1_0_INT_EN_RD	 0x2004, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SMP_SET	0x2008 /* MFD VC1 0 SMP SET */ 
	#define BITFIELD_MFD_VC1_0_SMP_SET	 0x2008, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SMP_CLR	0x200c /* MFD VC1 0 SMP CLR */ 
	#define BITFIELD_MFD_VC1_0_SMP_CLR	 0x200c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SMP_MSK_SET	0x2010 /* MFD VC1 0 SMP MSK SET */ 
	#define BITFIELD_MFD_VC1_0_SMP_MSK_SET	 0x2010, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SMP_MSK_CLR	0x2014 /* MFD VC1 0 SMP MSK CLR */ 
	#define BITFIELD_MFD_VC1_0_SMP_MSK_CLR	 0x2014, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_HDAT	0x2018 /* MFD VC1 0 HDAT */ 
	#define BITFIELD_MFD_VC1_0_HDAT	 0x2018, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SDDAT	0x201c /* MFD VC1 0 SDDAT */ 
	#define BITFIELD_MFD_VC1_0_SDDAT	 0x201c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DQ_PUSH	0x2020 /* MFD VC1 0 DQ PUSH */ 
	#define BITFIELD_MFD_VC1_0_DQ_PUSH	 0x2020, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DQ_STAT	0x2024 /* MFD VC1 0 DQ STAT */ 
	#define BITFIELD_MFD_VC1_0_DQ_STAT	 0x2024, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DPB_INIT	0x2040 /* MFD VC1 0 DPB INIT */ 
	#define BITFIELD_MFD_VC1_0_DPB_INIT	 0x2040, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DPB_FRM_SZ_STAT	0x2044 /* MFD VC1 0 DPB FRM SZ STAT */ 
	#define BITFIELD_MFD_VC1_0_DPB_FRM_SZ_STAT	 0x2044, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DPB_FRM_SZ_CTRL	0x2048 /* MFD VC1 0 DPB FRM SZ CTRL */ 
	#define BITFIELD_MFD_VC1_0_DPB_FRM_SZ_CTRL	 0x2048, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DPB_NUMB_OVR	0x204c /* MFD VC1 0 DPB NUMB_OVR */ 
	#define BITFIELD_MFD_VC1_0_DPB_NUMB_OVR	 0x204c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DPB_FS_SETTING	0x2050 /* MFD VC1 0 DPB FS SETTING */ 
	#define BITFIELD_MFD_VC1_0_DPB_FS_SETTING	 0x2050, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DPB_LOAD_OFFSET	0x2054 /* MFD VC1 0 DPB LOAD OFFSET */ 
	#define BITFIELD_MFD_VC1_0_DPB_LOAD_OFFSET	 0x2054, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_FSD	0x2058 /* MFD VC1 0 FSD */ 
	#define BITFIELD_MFD_VC1_0_FSD	 0x2058, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DANGLING_FIELD	0x205c /* MFD VC1 0 DANGLING FIELD */ 
	#define BITFIELD_MFD_VC1_0_DANGLING_FIELD	 0x205c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DISP_TAG	0x2060 /* MFD VC1 0 DISP TAG */ 
	#define BITFIELD_MFD_VC1_0_DISP_TAG	 0x2060, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DPB_UV_ADDR_LUT_WR	0x2080 /* MFD VC1 0 DPB UV ADDR LUT WR */ 
	#define BITFIELD_MFD_VC1_0_DPB_UV_ADDR_LUT_WR	 0x2080, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DPB_Y_ADDR_LUT_WR	0x2084 /* MFD VC1 0 DPB Y ADDR LUT WR */ 
	#define BITFIELD_MFD_VC1_0_DPB_Y_ADDR_LUT_WR	 0x2084, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_MPS_RD_BYTE_COUNT	0x2088 /* MFD VC1 0 MPS RD BYTE COUNT */ 
	#define BITFIELD_MFD_VC1_0_MPS_RD_BYTE_COUNT	 0x2088, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SLC_IN_FRM_COUNT	0x208c /* MFD VC1 0 SLC IN FRM COUNT */ 
	#define BITFIELD_MFD_VC1_0_SLC_IN_FRM_COUNT	 0x208c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_FRAME_CYC_COUNT	0x2090 /* MFD VC1 0 FRAME CYC COUNT */ 
	#define BITFIELD_MFD_VC1_0_FRAME_CYC_COUNT	 0x2090, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_IB_WAIT_COUNT	0x2094 /* MFD VC1 0 IB WAIT COUNT */ 
	#define BITFIELD_MFD_VC1_0_IB_WAIT_COUNT	 0x2094, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_RBSP_COUNT	0x2098 /* MFD VC1 0 RBSP COUNT */ 
	#define BITFIELD_MFD_VC1_0_RBSP_COUNT	 0x2098, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BS2RBSP_STATUS	0x209c /* MFD VC1 0 BS2RBSP STATUS */ 
	#define BITFIELD_MFD_VC1_0_BS2RBSP_STATUS	 0x209c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_CORE_CONFIG	0x20a0 /* MFD VC1 0 CORE CONFIG */ 
	#define BITFIELD_MFD_VC1_0_CORE_CONFIG	 0x20a0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_RBSP_CTRL	0x20a4 /* MFD VC1 0 RBSP CTRL */ 
	#define BITFIELD_MFD_VC1_0_RBSP_CTRL	 0x20a4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_INT_CTRL	0x20c0 /* MFD VC1 0 INT CTRL */ 
	#define BITFIELD_MFD_VC1_0_INT_CTRL	 0x20c0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_INT_STAT	0x20c4 /* MFD VC1 0 INT STAT */ 
	#define BITFIELD_MFD_VC1_0_INT_STAT	 0x20c4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SOFT_RST	0x20c8 /* MFD VC1 0 SOFT RST */ 
	#define BITFIELD_MFD_VC1_0_SOFT_RST	 0x20c8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_BYTE_ALIGN	0x2100 /* MFD VC1 0 BSP BYTE ALIGN */ 
	#define BITFIELD_MFD_VC1_0_BSP_BYTE_ALIGN	 0x2100, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS01	0x2104 /* MFD VC1 0 BSP GET BITS01 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS01	 0x2104, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS02	0x2108 /* MFD VC1 0 BSP GET BITS02 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS02	 0x2108, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS03	0x210c /* MFD VC1 0 BSP GET BITS03 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS03	 0x210c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS04	0x2110 /* MFD VC1 0 BSP GET BITS04 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS04	 0x2110, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS05	0x2114 /* MFD VC1 0 BSP GET BITS05 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS05	 0x2114, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS06	0x2118 /* MFD VC1 0 BSP GET BITS06 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS06	 0x2118, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS07	0x211c /* MFD VC1 0 BSP GET BITS07 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS07	 0x211c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS08	0x2120 /* MFD VC1 0 BSP GET BITS08 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS08	 0x2120, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS09	0x2124 /* MFD VC1 0 BSP GET BITS09 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS09	 0x2124, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS10	0x2128 /* MFD VC1 0 BSP GET BITS10 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS10	 0x2128, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS11	0x212c /* MFD VC1 0 BSP GET BITS11 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS11	 0x212c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS12	0x2130 /* MFD VC1 0 BSP GET BITS12 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS12	 0x2130, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS13	0x2134 /* MFD VC1 0 BSP GET BITS13 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS13	 0x2134, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS14	0x2138 /* MFD VC1 0 BSP GET BITS14 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS14	 0x2138, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS15	0x213c /* MFD VC1 0 BSP GET BITS15 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS15	 0x213c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS16	0x2140 /* MFD VC1 0 BSP GET BITS16 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS16	 0x2140, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS17	0x2144 /* MFD VC1 0 BSP GET BITS17 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS17	 0x2144, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS18	0x2148 /* MFD VC1 0 BSP GET BITS18 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS18	 0x2148, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS19	0x214c /* MFD VC1 0 BSP GET BITS19 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS19	 0x214c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS20	0x2150 /* MFD VC1 0 BSP GET BITS20 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS20	 0x2150, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS21	0x2154 /* MFD VC1 0 BSP GET BITS21 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS21	 0x2154, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS22	0x2158 /* MFD VC1 0 BSP GET BITS22 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS22	 0x2158, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS23	0x215c /* MFD VC1 0 BSP GET BITS23 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS23	 0x215c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS24	0x2160 /* MFD VC1 0 BSP GET BITS24 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS24	 0x2160, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS25	0x2164 /* MFD VC1 0 BSP GET BITS25 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS25	 0x2164, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS26	0x2168 /* MFD VC1 0 BSP GET BITS26 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS26	 0x2168, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS27	0x216c /* MFD VC1 0 BSP GET BITS27 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS27	 0x216c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS28	0x2170 /* MFD VC1 0 BSP GET BITS28 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS28	 0x2170, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS29	0x2174 /* MFD VC1 0 BSP GET BITS29 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS29	 0x2174, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS30	0x2178 /* MFD VC1 0 BSP GET BITS30 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS30	 0x2178, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_GET_BITS31	0x217c /* MFD VC1 0 BSP GET BITS31 */ 
	#define BITFIELD_MFD_VC1_0_BSP_GET_BITS31	 0x217c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_STATUS	0x2180 /* MFD VC1 0 BSP STATUS */ 
	#define BITFIELD_MFD_VC1_0_BSP_STATUS	 0x2180, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_CTRL	0x2184 /* MFD VC1 0 BSP CTRL */ 
	#define BITFIELD_MFD_VC1_0_BSP_CTRL	 0x2184, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_SHOW_BITS	0x2188 /* MFD VC1 0 BSP SHOW BITS */ 
	#define BITFIELD_MFD_VC1_0_BSP_SHOW_BITS	 0x2188, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_SHOW_BITS_FLPD	0x218c /* MFD VC1 0 BSP SHOW BITS FLPD */ 
	#define BITFIELD_MFD_VC1_0_BSP_SHOW_BITS_FLPD	 0x218c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_IGNORE_BBB_LEVEL	0x2190 /* MFD VC1 0 BSP IGNORE BBB LEVEL */ 
	#define BITFIELD_MFD_VC1_0_BSP_IGNORE_BBB_LEVEL	 0x2190, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_HEADER_VLC_PTYPE	0x21c0 /* MFD VC1 0 BSP HEADER VLC PTYPE */ 
	#define BITFIELD_MFD_VC1_0_BSP_HEADER_VLC_PTYPE	 0x21c0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_HEADER_VLC_FTYPE	0x21c4 /* MFD VC1 0 BSP HEADER VLC FTYPE */ 
	#define BITFIELD_MFD_VC1_0_BSP_HEADER_VLC_FTYPE	 0x21c4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_HEADER_VLC_MVRANGE	0x21c8 /* MFD VC1 0 BSP HEADER VLC MVRANGE */ 
	#define BITFIELD_MFD_VC1_0_BSP_HEADER_VLC_MVRANGE	 0x21c8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_HEADER_VLC_MVMODE	0x21cc /* MFD VC1 0 BSP HEADER VLC MVMODE */ 
	#define BITFIELD_MFD_VC1_0_BSP_HEADER_VLC_MVMODE	 0x21cc, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_HEADER_VLC_MVMODE2	0x21d0 /* MFD VC1 0 BSP HEADER VLC MVMODE2 */ 
	#define BITFIELD_MFD_VC1_0_BSP_HEADER_VLC_MVMODE2	 0x21d0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_HEADER_VLC_DMVRANGE	0x21d4 /* MFD VC1 0 BSP HEADER VLC DMVRANGE */ 
	#define BITFIELD_MFD_VC1_0_BSP_HEADER_VLC_DMVRANGE	 0x21d4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_HEADER_VLC_BPPMODE	0x21d8 /* MFD VC1 0 BSP HEADER VLC BPPMODE */ 
	#define BITFIELD_MFD_VC1_0_BSP_HEADER_VLC_BPPMODE	 0x21d8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_HEADER_VLC_BPPVLC2	0x21dc /* MFD VC1 0 BSP HEADER VLC BPPVLC2 */ 
	#define BITFIELD_MFD_VC1_0_BSP_HEADER_VLC_BPPVLC2	 0x21dc, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_HEADER_VLC_BPPVLC6	0x21e0 /* MFD VC1 0 BSP HEADER VLC BPPVLC6 */ 
	#define BITFIELD_MFD_VC1_0_BSP_HEADER_VLC_BPPVLC6	 0x21e0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_HEADER_VLC_BFRACT	0x21e4 /* MFD VC1 0 BSP HEADER VLC BFRACT */ 
	#define BITFIELD_MFD_VC1_0_BSP_HEADER_VLC_BFRACT	 0x21e4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BSP_HEADER_VLC_REFDIST	0x21e8 /* MFD VC1 0 BSP HEADER VLC REFDIST */ 
	#define BITFIELD_MFD_VC1_0_BSP_HEADER_VLC_REFDIST	 0x21e8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SEQPIC_GENERAL_CORE_CONFIG	0x2200 /* MFD VC1 0 SEQPIC GENERAL CORE CONFIG */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_GENERAL_CORE_CONFIG	 0x2200, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1	0x2204 /* MFD VC1 0 SEQPIC STREAM FORMAT 1 */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1	 0x2204, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_STREAM_FORMAT_1 */
	#define BLSB_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_PROFILE	0
	#define BLSB_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_LEVEL	2
	#define BLSB_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_CHROMAFORMAT	5
	#define BLSB_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_FRMRTQ	7
	#define BLSB_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_BITRTQ	10
	#define BLSB_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_POSTPRO	15
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_STREAM_FORMAT_1 */
	#define BWID_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_PROFILE	2
	#define BWID_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_LEVEL	3
	#define BWID_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_CHROMAFORMAT	2
	#define BWID_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_FRMRTQ	3
	#define BWID_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_BITRTQ	5
	#define BWID_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_POSTPRO	1
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_STREAM_FORMAT_1 */
	#define BMSK_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_PROFILE	0x00000003 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_LEVEL	0x0000001c /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_CHROMAFORMAT	0x00000060 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_FRMRTQ	0x00000380 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_BITRTQ	0x00007c00 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_POSTPRO	(1<<15) /* == 0x00008000:  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_STREAM_FORMAT_1 - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_PROFILE	 0x2204, 0, 2, 0x00000003
	#define BITFIELD_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_LEVEL	 0x2204, 2, 3, 0x0000001c
	#define BITFIELD_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_CHROMAFORMAT	 0x2204, 5, 2, 0x00000060
	#define BITFIELD_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_FRMRTQ	 0x2204, 7, 3, 0x00000380
	#define BITFIELD_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_BITRTQ	 0x2204, 10, 5, 0x00007c00
	#define BITFIELD_MFD_VC1_0_SEQPIC_STREAM_FORMAT_1_POSTPRO	 0x2204, 15, 1, 0x00008000
#define ROFF_MFD_VC1_0_SEQPIC_CODED_SIZE	0x2208 /* MFD VC1 0 SEQPIC CODED SIZE */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_CODED_SIZE	 0x2208, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_CODED_SIZE */
	#define BLSB_MFD_VC1_0_SEQPIC_CODED_SIZE_WIDTH	16
	#define BLSB_MFD_VC1_0_SEQPIC_CODED_SIZE_HEIGHT	0
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_CODED_SIZE */
	#define BWID_MFD_VC1_0_SEQPIC_CODED_SIZE_WIDTH	12
	#define BWID_MFD_VC1_0_SEQPIC_CODED_SIZE_HEIGHT	12
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_CODED_SIZE */
	#define BMSK_MFD_VC1_0_SEQPIC_CODED_SIZE_WIDTH	0x0fff0000 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_CODED_SIZE_HEIGHT	0x00000fff /*  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_CODED_SIZE - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_CODED_SIZE_WIDTH	 0x2208, 16, 12, 0x0fff0000
	#define BITFIELD_MFD_VC1_0_SEQPIC_CODED_SIZE_HEIGHT	 0x2208, 0, 12, 0x00000fff
#define ROFF_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2	0x220c /* MFD VC1 0 SEQPIC STREAM FORMAT 2 */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2	 0x220c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_STREAM_FORMAT_2 */
	#define BLSB_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2_PSF	4
	#define BLSB_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2_FINTERPFLAG	3
	#define BLSB_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2_TFCNTRFLAG	2
	#define BLSB_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2_INTERLACE	1
	#define BLSB_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2_PULLDOWN	0
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_STREAM_FORMAT_2 */
	#define BWID_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2_PSF	1
	#define BWID_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2_FINTERPFLAG	1
	#define BWID_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2_TFCNTRFLAG	1
	#define BWID_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2_INTERLACE	1
	#define BWID_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2_PULLDOWN	1
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_STREAM_FORMAT_2 */
	#define BMSK_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2_PSF	(1<<4) /* == 0x00000010:  */
	#define BMSK_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2_FINTERPFLAG	(1<<3) /* == 0x00000008:  */
	#define BMSK_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2_TFCNTRFLAG	(1<<2) /* == 0x00000004:  */
	#define BMSK_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2_INTERLACE	(1<<1) /* == 0x00000002:  */
	#define BMSK_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2_PULLDOWN	(1<<0) /* == 0x00000001:  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_STREAM_FORMAT_2 - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2_PSF	 0x220c, 4, 1, 0x00000010
	#define BITFIELD_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2_FINTERPFLAG	 0x220c, 3, 1, 0x00000008
	#define BITFIELD_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2_TFCNTRFLAG	 0x220c, 2, 1, 0x00000004
	#define BITFIELD_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2_INTERLACE	 0x220c, 1, 1, 0x00000002
	#define BITFIELD_MFD_VC1_0_SEQPIC_STREAM_FORMAT_2_PULLDOWN	 0x220c, 0, 1, 0x00000001
#define ROFF_MFD_VC1_0_SEQPIC_ENTRY_POINT_1	0x2210 /* MFD VC1 0 SEQPIC ENTRY POINT 1 */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_ENTRY_POINT_1	 0x2210, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_ENTRY_POINT_1 */
	#define BLSB_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_EXTENDED_DMV	13
	#define BLSB_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_QUANTIZER	11
	#define BLSB_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_OVERLAP	10
	#define BLSB_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_VS_TRANSFORM	9
	#define BLSB_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_DQUANT	7
	#define BLSB_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_EXTENDED_MV	6
	#define BLSB_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_FASTUVMC	5
	#define BLSB_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_LOOPFILTER	4
	#define BLSB_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_REFDIST_FLAG	3
	#define BLSB_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_PANSCAN_FLAG	2
	#define BLSB_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_CLOSED_ENTRY	1
	#define BLSB_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_BROKEN_LINK	0
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_ENTRY_POINT_1 */
	#define BWID_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_EXTENDED_DMV	1
	#define BWID_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_QUANTIZER	2
	#define BWID_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_OVERLAP	1
	#define BWID_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_VS_TRANSFORM	1
	#define BWID_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_DQUANT	2
	#define BWID_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_EXTENDED_MV	1
	#define BWID_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_FASTUVMC	1
	#define BWID_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_LOOPFILTER	1
	#define BWID_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_REFDIST_FLAG	1
	#define BWID_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_PANSCAN_FLAG	1
	#define BWID_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_CLOSED_ENTRY	1
	#define BWID_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_BROKEN_LINK	1
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_ENTRY_POINT_1 */
	#define BMSK_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_EXTENDED_DMV	(1<<13) /* == 0x00002000:  */
	#define BMSK_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_QUANTIZER	0x00001800 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_OVERLAP	(1<<10) /* == 0x00000400:  */
	#define BMSK_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_VS_TRANSFORM	(1<<9) /* == 0x00000200:  */
	#define BMSK_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_DQUANT	0x00000180 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_EXTENDED_MV	(1<<6) /* == 0x00000040:  */
	#define BMSK_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_FASTUVMC	(1<<5) /* == 0x00000020:  */
	#define BMSK_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_LOOPFILTER	(1<<4) /* == 0x00000010:  */
	#define BMSK_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_REFDIST_FLAG	(1<<3) /* == 0x00000008:  */
	#define BMSK_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_PANSCAN_FLAG	(1<<2) /* == 0x00000004:  */
	#define BMSK_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_CLOSED_ENTRY	(1<<1) /* == 0x00000002:  */
	#define BMSK_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_BROKEN_LINK	(1<<0) /* == 0x00000001:  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_ENTRY_POINT_1 - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_EXTENDED_DMV	 0x2210, 13, 1, 0x00002000
	#define BITFIELD_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_QUANTIZER	 0x2210, 11, 2, 0x00001800
	#define BITFIELD_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_OVERLAP	 0x2210, 10, 1, 0x00000400
	#define BITFIELD_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_VS_TRANSFORM	 0x2210, 9, 1, 0x00000200
	#define BITFIELD_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_DQUANT	 0x2210, 7, 2, 0x00000180
	#define BITFIELD_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_EXTENDED_MV	 0x2210, 6, 1, 0x00000040
	#define BITFIELD_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_FASTUVMC	 0x2210, 5, 1, 0x00000020
	#define BITFIELD_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_LOOPFILTER	 0x2210, 4, 1, 0x00000010
	#define BITFIELD_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_REFDIST_FLAG	 0x2210, 3, 1, 0x00000008
	#define BITFIELD_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_PANSCAN_FLAG	 0x2210, 2, 1, 0x00000004
	#define BITFIELD_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_CLOSED_ENTRY	 0x2210, 1, 1, 0x00000002
	#define BITFIELD_MFD_VC1_0_SEQPIC_ENTRY_POINT_1_BROKEN_LINK	 0x2210, 0, 1, 0x00000001
#define ROFF_MFD_VC1_0_SEQPIC_RANGE_MAP	0x2214 /* MFD VC1 0 SEQPIC RANGE MAP */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_RANGE_MAP	 0x2214, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_RANGE_MAP */
	#define BLSB_MFD_VC1_0_SEQPIC_RANGE_MAP_RANGE_MAP_UV	5
	#define BLSB_MFD_VC1_0_SEQPIC_RANGE_MAP_RANGE_MAP_UV_FLAG	4
	#define BLSB_MFD_VC1_0_SEQPIC_RANGE_MAP_RANGE_MAP_Y	1
	#define BLSB_MFD_VC1_0_SEQPIC_RANGE_MAP_RANGE_MAP_Y_FLAG	0
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_RANGE_MAP */
	#define BWID_MFD_VC1_0_SEQPIC_RANGE_MAP_RANGE_MAP_UV	3
	#define BWID_MFD_VC1_0_SEQPIC_RANGE_MAP_RANGE_MAP_UV_FLAG	1
	#define BWID_MFD_VC1_0_SEQPIC_RANGE_MAP_RANGE_MAP_Y	3
	#define BWID_MFD_VC1_0_SEQPIC_RANGE_MAP_RANGE_MAP_Y_FLAG	1
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_RANGE_MAP */
	#define BMSK_MFD_VC1_0_SEQPIC_RANGE_MAP_RANGE_MAP_UV	0x000000e0 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_RANGE_MAP_RANGE_MAP_UV_FLAG	(1<<4) /* == 0x00000010:  */
	#define BMSK_MFD_VC1_0_SEQPIC_RANGE_MAP_RANGE_MAP_Y	0x0000000e /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_RANGE_MAP_RANGE_MAP_Y_FLAG	(1<<0) /* == 0x00000001:  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_RANGE_MAP - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_RANGE_MAP_RANGE_MAP_UV	 0x2214, 5, 3, 0x000000e0
	#define BITFIELD_MFD_VC1_0_SEQPIC_RANGE_MAP_RANGE_MAP_UV_FLAG	 0x2214, 4, 1, 0x00000010
	#define BITFIELD_MFD_VC1_0_SEQPIC_RANGE_MAP_RANGE_MAP_Y	 0x2214, 1, 3, 0x0000000e
	#define BITFIELD_MFD_VC1_0_SEQPIC_RANGE_MAP_RANGE_MAP_Y_FLAG	 0x2214, 0, 1, 0x00000001
#define ROFF_MFD_VC1_0_SEQPIC_FRAME_TYPE	0x2218 /* MFD VC1 0 SEQPIC FRAME TYPE */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_FRAME_TYPE	 0x2218, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_FRAME_TYPE */
	#define BLSB_MFD_VC1_0_SEQPIC_FRAME_TYPE_PTYPE	2
	#define BLSB_MFD_VC1_0_SEQPIC_FRAME_TYPE_FCM	0
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_FRAME_TYPE */
	#define BWID_MFD_VC1_0_SEQPIC_FRAME_TYPE_PTYPE	4
	#define BWID_MFD_VC1_0_SEQPIC_FRAME_TYPE_FCM	2
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_FRAME_TYPE */
	#define BMSK_MFD_VC1_0_SEQPIC_FRAME_TYPE_PTYPE	0x0000003c /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_FRAME_TYPE_FCM	0x00000003 /*  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_FRAME_TYPE - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_FRAME_TYPE_PTYPE	 0x2218, 2, 4, 0x0000003c
	#define BITFIELD_MFD_VC1_0_SEQPIC_FRAME_TYPE_FCM	 0x2218, 0, 2, 0x00000003
#define ROFF_MFD_VC1_0_SEQPIC_RECON_CONTROL	0x221c /* MFD VC1 0 SEQPIC RECON CONTROL */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_RECON_CONTROL	 0x221c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_RECON_CONTROL */
	#define BLSB_MFD_VC1_0_SEQPIC_RECON_CONTROL_RNDCTRL	0
	#define BLSB_MFD_VC1_0_SEQPIC_RECON_CONTROL_UVSAMP	1
	#define BLSB_MFD_VC1_0_SEQPIC_RECON_CONTROL_PQUANT	3
	#define BLSB_MFD_VC1_0_SEQPIC_RECON_CONTROL_HALFQP	8
	#define BLSB_MFD_VC1_0_SEQPIC_RECON_CONTROL_UNIFORM_QNT	9
	#define BLSB_MFD_VC1_0_SEQPIC_RECON_CONTROL_POSTPROC	10
	#define BLSB_MFD_VC1_0_SEQPIC_RECON_CONTROL_CONDOVER	12
	#define BLSB_MFD_VC1_0_SEQPIC_RECON_CONTROL_PQINDEX_LE8	14
	#define BLSB_MFD_VC1_0_SEQPIC_RECON_CONTROL_RANGE_REF_RED_TYPE	15
	#define BLSB_MFD_VC1_0_SEQPIC_RECON_CONTROL_RANGE_REF_RED_EN	16
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_RECON_CONTROL */
	#define BWID_MFD_VC1_0_SEQPIC_RECON_CONTROL_RNDCTRL	1
	#define BWID_MFD_VC1_0_SEQPIC_RECON_CONTROL_UVSAMP	1
	#define BWID_MFD_VC1_0_SEQPIC_RECON_CONTROL_PQUANT	5
	#define BWID_MFD_VC1_0_SEQPIC_RECON_CONTROL_HALFQP	1
	#define BWID_MFD_VC1_0_SEQPIC_RECON_CONTROL_UNIFORM_QNT	1
	#define BWID_MFD_VC1_0_SEQPIC_RECON_CONTROL_POSTPROC	2
	#define BWID_MFD_VC1_0_SEQPIC_RECON_CONTROL_CONDOVER	2
	#define BWID_MFD_VC1_0_SEQPIC_RECON_CONTROL_PQINDEX_LE8	1
	#define BWID_MFD_VC1_0_SEQPIC_RECON_CONTROL_RANGE_REF_RED_TYPE	1
	#define BWID_MFD_VC1_0_SEQPIC_RECON_CONTROL_RANGE_REF_RED_EN	1
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_RECON_CONTROL */
	#define BMSK_MFD_VC1_0_SEQPIC_RECON_CONTROL_RNDCTRL	(1<<0) /* == 0x00000001:  */
	#define BMSK_MFD_VC1_0_SEQPIC_RECON_CONTROL_UVSAMP	(1<<1) /* == 0x00000002:  */
	#define BMSK_MFD_VC1_0_SEQPIC_RECON_CONTROL_PQUANT	0x000000f8 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_RECON_CONTROL_HALFQP	(1<<8) /* == 0x00000100:  */
	#define BMSK_MFD_VC1_0_SEQPIC_RECON_CONTROL_UNIFORM_QNT	(1<<9) /* == 0x00000200:  */
	#define BMSK_MFD_VC1_0_SEQPIC_RECON_CONTROL_POSTPROC	0x00000c00 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_RECON_CONTROL_CONDOVER	0x00003000 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_RECON_CONTROL_PQINDEX_LE8	(1<<14) /* == 0x00004000:  */
	#define BMSK_MFD_VC1_0_SEQPIC_RECON_CONTROL_RANGE_REF_RED_TYPE	(1<<15) /* == 0x00008000:  */
	#define BMSK_MFD_VC1_0_SEQPIC_RECON_CONTROL_RANGE_REF_RED_EN	(1<<16) /* == 0x00010000:  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_RECON_CONTROL - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_RECON_CONTROL_RNDCTRL	 0x221c, 0, 1, 0x00000001
	#define BITFIELD_MFD_VC1_0_SEQPIC_RECON_CONTROL_UVSAMP	 0x221c, 1, 1, 0x00000002
	#define BITFIELD_MFD_VC1_0_SEQPIC_RECON_CONTROL_PQUANT	 0x221c, 3, 5, 0x000000f8
	#define BITFIELD_MFD_VC1_0_SEQPIC_RECON_CONTROL_HALFQP	 0x221c, 8, 1, 0x00000100
	#define BITFIELD_MFD_VC1_0_SEQPIC_RECON_CONTROL_UNIFORM_QNT	 0x221c, 9, 1, 0x00000200
	#define BITFIELD_MFD_VC1_0_SEQPIC_RECON_CONTROL_POSTPROC	 0x221c, 10, 2, 0x00000c00
	#define BITFIELD_MFD_VC1_0_SEQPIC_RECON_CONTROL_CONDOVER	 0x221c, 12, 2, 0x00003000
	#define BITFIELD_MFD_VC1_0_SEQPIC_RECON_CONTROL_PQINDEX_LE8	 0x221c, 14, 1, 0x00004000
	#define BITFIELD_MFD_VC1_0_SEQPIC_RECON_CONTROL_RANGE_REF_RED_TYPE	 0x221c, 15, 1, 0x00008000
	#define BITFIELD_MFD_VC1_0_SEQPIC_RECON_CONTROL_RANGE_REF_RED_EN	 0x221c, 16, 1, 0x00010000
#define ROFF_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL	0x2220 /* MFD VC1 0 SEQPIC MOTION VECTOR CONTROL */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL	 0x2220, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL */
	#define BLSB_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_MVRANGE	0
	#define BLSB_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_MVMODE	2
	#define BLSB_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_MVTAB	17
	#define BLSB_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_DMVRANGE	20
	#define BLSB_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_MV4SWITCH	22
	#define BLSB_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_MBMODETAB	24
	#define BLSB_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_NUMREF	27
	#define BLSB_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_REFFIELD	28
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL */
	#define BWID_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_MVRANGE	2
	#define BWID_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_MVMODE	3
	#define BWID_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_MVTAB	3
	#define BWID_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_DMVRANGE	2
	#define BWID_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_MV4SWITCH	1
	#define BWID_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_MBMODETAB	3
	#define BWID_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_NUMREF	1
	#define BWID_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_REFFIELD	1
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL */
	#define BMSK_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_MVRANGE	0x00000003 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_MVMODE	0x0000001c /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_MVTAB	0x000e0000 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_DMVRANGE	0x00300000 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_MV4SWITCH	(1<<22) /* == 0x00400000:  */
	#define BMSK_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_MBMODETAB	0x07000000 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_NUMREF	(1<<27) /* == 0x08000000:  */
	#define BMSK_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_REFFIELD	(1<<28) /* == 0x10000000:  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_MVRANGE	 0x2220, 0, 2, 0x00000003
	#define BITFIELD_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_MVMODE	 0x2220, 2, 3, 0x0000001c
	#define BITFIELD_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_MVTAB	 0x2220, 17, 3, 0x000e0000
	#define BITFIELD_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_DMVRANGE	 0x2220, 20, 2, 0x00300000
	#define BITFIELD_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_MV4SWITCH	 0x2220, 22, 1, 0x00400000
	#define BITFIELD_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_MBMODETAB	 0x2220, 24, 3, 0x07000000
	#define BITFIELD_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_NUMREF	 0x2220, 27, 1, 0x08000000
	#define BITFIELD_MFD_VC1_0_SEQPIC_MOTION_VECTOR_CONTROL_REFFIELD	 0x2220, 28, 1, 0x10000000
#define ROFF_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION	0x2224 /* MFD VC1 0 SEQPIC INTENSITY COMPENSATION */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION	 0x2224, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION */
	#define BLSB_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_INT_COMP_1	0
	#define BLSB_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_LUMA_SCALE_1	1
	#define BLSB_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_LUMA_SHIFT_1	7
	#define BLSB_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_INT_COMP_2	13
	#define BLSB_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_LUMA_SCALE_2	14
	#define BLSB_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_LUMA_SHIFT_2	20
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION */
	#define BWID_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_INT_COMP_1	1
	#define BWID_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_LUMA_SCALE_1	6
	#define BWID_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_LUMA_SHIFT_1	6
	#define BWID_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_INT_COMP_2	1
	#define BWID_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_LUMA_SCALE_2	6
	#define BWID_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_LUMA_SHIFT_2	6
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION */
	#define BMSK_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_INT_COMP_1	(1<<0) /* == 0x00000001:  */
	#define BMSK_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_LUMA_SCALE_1	0x0000007e /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_LUMA_SHIFT_1	0x00001f80 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_INT_COMP_2	(1<<13) /* == 0x00002000:  */
	#define BMSK_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_LUMA_SCALE_2	0x000fc000 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_LUMA_SHIFT_2	0x03f00000 /*  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_INT_COMP_1	 0x2224, 0, 1, 0x00000001
	#define BITFIELD_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_LUMA_SCALE_1	 0x2224, 1, 6, 0x0000007e
	#define BITFIELD_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_LUMA_SHIFT_1	 0x2224, 7, 6, 0x00001f80
	#define BITFIELD_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_INT_COMP_2	 0x2224, 13, 1, 0x00002000
	#define BITFIELD_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_LUMA_SCALE_2	 0x2224, 14, 6, 0x000fc000
	#define BITFIELD_MFD_VC1_0_SEQPIC_INTENSITY_COMPENSATION_LUMA_SHIFT_2	 0x2224, 20, 6, 0x03f00000
#define ROFF_MFD_VC1_0_SEQPIC_REFERENCE_B_FRACTION	0x2228 /* MFD VC1 0 SEQPIC REFERENCE B FRACTION */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_REFERENCE_B_FRACTION	 0x2228, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_REFERENCE_B_FRACTION */
	#define BLSB_MFD_VC1_0_SEQPIC_REFERENCE_B_FRACTION_BFRACTION_DEN	0
	#define BLSB_MFD_VC1_0_SEQPIC_REFERENCE_B_FRACTION_BFRACTION_NUM	4
	#define BLSB_MFD_VC1_0_SEQPIC_REFERENCE_B_FRACTION_REFDIST	8
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_REFERENCE_B_FRACTION */
	#define BWID_MFD_VC1_0_SEQPIC_REFERENCE_B_FRACTION_BFRACTION_DEN	4
	#define BWID_MFD_VC1_0_SEQPIC_REFERENCE_B_FRACTION_BFRACTION_NUM	4
	#define BWID_MFD_VC1_0_SEQPIC_REFERENCE_B_FRACTION_REFDIST	4
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_REFERENCE_B_FRACTION */
	#define BMSK_MFD_VC1_0_SEQPIC_REFERENCE_B_FRACTION_BFRACTION_DEN	0x0000000f /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_REFERENCE_B_FRACTION_BFRACTION_NUM	0x000000f0 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_REFERENCE_B_FRACTION_REFDIST	0x00000f00 /*  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_REFERENCE_B_FRACTION - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_REFERENCE_B_FRACTION_BFRACTION_DEN	 0x2228, 0, 4, 0x0000000f
	#define BITFIELD_MFD_VC1_0_SEQPIC_REFERENCE_B_FRACTION_BFRACTION_NUM	 0x2228, 4, 4, 0x000000f0
	#define BITFIELD_MFD_VC1_0_SEQPIC_REFERENCE_B_FRACTION_REFDIST	 0x2228, 8, 4, 0x00000f00
#define ROFF_MFD_VC1_0_SEQPIC_BLOCK_CONTROL	0x222c /* MFD VC1 0 SEQPIC BLOCK CONTROL */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_BLOCK_CONTROL	 0x222c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_BLOCK_CONTROL */
	#define BLSB_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_CBPTAB	0
	#define BLSB_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_TTMFB	3
	#define BLSB_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_TTFRM	4
	#define BLSB_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_MV2BPTAB	6
	#define BLSB_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_MV4BPTAB	8
	#define BLSB_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_INITIAL_MV_Y	10
	#define BLSB_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_BP_RAW_ID2	17
	#define BLSB_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_BP_RAW_ID1	18
	#define BLSB_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_BP_RAW_ID0	19
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_BLOCK_CONTROL */
	#define BWID_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_CBPTAB	3
	#define BWID_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_TTMFB	1
	#define BWID_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_TTFRM	2
	#define BWID_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_MV2BPTAB	2
	#define BWID_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_MV4BPTAB	2
	#define BWID_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_INITIAL_MV_Y	7
	#define BWID_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_BP_RAW_ID2	1
	#define BWID_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_BP_RAW_ID1	1
	#define BWID_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_BP_RAW_ID0	1
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_BLOCK_CONTROL */
	#define BMSK_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_CBPTAB	0x00000007 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_TTMFB	(1<<3) /* == 0x00000008:  */
	#define BMSK_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_TTFRM	0x00000030 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_MV2BPTAB	0x000000c0 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_MV4BPTAB	0x00000300 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_INITIAL_MV_Y	0x0001fc00 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_BP_RAW_ID2	(1<<17) /* == 0x00020000:  */
	#define BMSK_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_BP_RAW_ID1	(1<<18) /* == 0x00040000:  */
	#define BMSK_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_BP_RAW_ID0	(1<<19) /* == 0x00080000:  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_BLOCK_CONTROL - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_CBPTAB	 0x222c, 0, 3, 0x00000007
	#define BITFIELD_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_TTMFB	 0x222c, 3, 1, 0x00000008
	#define BITFIELD_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_TTFRM	 0x222c, 4, 2, 0x00000030
	#define BITFIELD_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_MV2BPTAB	 0x222c, 6, 2, 0x000000c0
	#define BITFIELD_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_MV4BPTAB	 0x222c, 8, 2, 0x00000300
	#define BITFIELD_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_INITIAL_MV_Y	 0x222c, 10, 7, 0x0001fc00
	#define BITFIELD_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_BP_RAW_ID2	 0x222c, 17, 1, 0x00020000
	#define BITFIELD_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_BP_RAW_ID1	 0x222c, 18, 1, 0x00040000
	#define BITFIELD_MFD_VC1_0_SEQPIC_BLOCK_CONTROL_BP_RAW_ID0	 0x222c, 19, 1, 0x00080000
#define ROFF_MFD_VC1_0_SEQPIC_TRANSFORM_DATA	0x2230 /* MFD VC1 0 SEQPIC TRANSFORM DATA */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_TRANSFORM_DATA	 0x2230, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_TRANSFORM_DATA */
	#define BLSB_MFD_VC1_0_SEQPIC_TRANSFORM_DATA_TRANSACFRM	0
	#define BLSB_MFD_VC1_0_SEQPIC_TRANSFORM_DATA_TRANSACFRM2	2
	#define BLSB_MFD_VC1_0_SEQPIC_TRANSFORM_DATA_TRANSDCTAB	4
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_TRANSFORM_DATA */
	#define BWID_MFD_VC1_0_SEQPIC_TRANSFORM_DATA_TRANSACFRM	2
	#define BWID_MFD_VC1_0_SEQPIC_TRANSFORM_DATA_TRANSACFRM2	2
	#define BWID_MFD_VC1_0_SEQPIC_TRANSFORM_DATA_TRANSDCTAB	1
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_TRANSFORM_DATA */
	#define BMSK_MFD_VC1_0_SEQPIC_TRANSFORM_DATA_TRANSACFRM	0x00000003 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_TRANSFORM_DATA_TRANSACFRM2	0x0000000c /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_TRANSFORM_DATA_TRANSDCTAB	(1<<4) /* == 0x00000010:  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_TRANSFORM_DATA - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_TRANSFORM_DATA_TRANSACFRM	 0x2230, 0, 2, 0x00000003
	#define BITFIELD_MFD_VC1_0_SEQPIC_TRANSFORM_DATA_TRANSACFRM2	 0x2230, 2, 2, 0x0000000c
	#define BITFIELD_MFD_VC1_0_SEQPIC_TRANSFORM_DATA_TRANSDCTAB	 0x2230, 4, 1, 0x00000010
#define ROFF_MFD_VC1_0_SEQPIC_VOP_DEQUANT	0x2234 /* MFD VC1 0 SEQPIC VOP DEQUANT */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_VOP_DEQUANT	 0x2234, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_VOP_DEQUANT */
	#define BLSB_MFD_VC1_0_SEQPIC_VOP_DEQUANT_PQUANT_ALT	0
	#define BLSB_MFD_VC1_0_SEQPIC_VOP_DEQUANT_DQUANTFRM	5
	#define BLSB_MFD_VC1_0_SEQPIC_VOP_DEQUANT_DQPROFILE	6
	#define BLSB_MFD_VC1_0_SEQPIC_VOP_DEQUANT_DQES	8
	#define BLSB_MFD_VC1_0_SEQPIC_VOP_DEQUANT_DQBILEVEL	10
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_VOP_DEQUANT */
	#define BWID_MFD_VC1_0_SEQPIC_VOP_DEQUANT_PQUANT_ALT	5
	#define BWID_MFD_VC1_0_SEQPIC_VOP_DEQUANT_DQUANTFRM	1
	#define BWID_MFD_VC1_0_SEQPIC_VOP_DEQUANT_DQPROFILE	2
	#define BWID_MFD_VC1_0_SEQPIC_VOP_DEQUANT_DQES	2
	#define BWID_MFD_VC1_0_SEQPIC_VOP_DEQUANT_DQBILEVEL	1
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_VOP_DEQUANT */
	#define BMSK_MFD_VC1_0_SEQPIC_VOP_DEQUANT_PQUANT_ALT	0x0000001f /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_VOP_DEQUANT_DQUANTFRM	(1<<5) /* == 0x00000020:  */
	#define BMSK_MFD_VC1_0_SEQPIC_VOP_DEQUANT_DQPROFILE	0x000000c0 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_VOP_DEQUANT_DQES	0x00000300 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_VOP_DEQUANT_DQBILEVEL	(1<<10) /* == 0x00000400:  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_VOP_DEQUANT - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_VOP_DEQUANT_PQUANT_ALT	 0x2234, 0, 5, 0x0000001f
	#define BITFIELD_MFD_VC1_0_SEQPIC_VOP_DEQUANT_DQUANTFRM	 0x2234, 5, 1, 0x00000020
	#define BITFIELD_MFD_VC1_0_SEQPIC_VOP_DEQUANT_DQPROFILE	 0x2234, 6, 2, 0x000000c0
	#define BITFIELD_MFD_VC1_0_SEQPIC_VOP_DEQUANT_DQES	 0x2234, 8, 2, 0x00000300
	#define BITFIELD_MFD_VC1_0_SEQPIC_VOP_DEQUANT_DQBILEVEL	 0x2234, 10, 1, 0x00000400
#define ROFF_MFD_VC1_0_SEQPIC_CURR_FRAME_ID	0x2238 /* MFD VC1 0 SEQPIC CURR FRAME ID */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_CURR_FRAME_ID	 0x2238, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_CURR_FRAME_ID */
	#define BLSB_MFD_VC1_0_SEQPIC_CURR_FRAME_ID_FBID	0
	#define BLSB_MFD_VC1_0_SEQPIC_CURR_FRAME_ID_FCM	30
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_CURR_FRAME_ID */
	#define BWID_MFD_VC1_0_SEQPIC_CURR_FRAME_ID_FBID	5
	#define BWID_MFD_VC1_0_SEQPIC_CURR_FRAME_ID_FCM	2
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_CURR_FRAME_ID */
	#define BMSK_MFD_VC1_0_SEQPIC_CURR_FRAME_ID_FBID	0x0000001f /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_CURR_FRAME_ID_FCM	0xc0000000 /*  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_CURR_FRAME_ID - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_CURR_FRAME_ID_FBID	 0x2238, 0, 5, 0x0000001f
	#define BITFIELD_MFD_VC1_0_SEQPIC_CURR_FRAME_ID_FCM	 0x2238, 30, 2, 0xc0000000
#define ROFF_MFD_VC1_0_SEQPIC_CURR_DISPLAY_ID	0x223c /* MFD VC1 0 SEQPIC CURR DISPLAY ID */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_CURR_DISPLAY_ID	 0x223c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_CURR_DISPLAY_ID */
	#define BLSB_MFD_VC1_0_SEQPIC_CURR_DISPLAY_ID_FBID	0
	#define BLSB_MFD_VC1_0_SEQPIC_CURR_DISPLAY_ID_FCM	30
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_CURR_DISPLAY_ID */
	#define BWID_MFD_VC1_0_SEQPIC_CURR_DISPLAY_ID_FBID	5
	#define BWID_MFD_VC1_0_SEQPIC_CURR_DISPLAY_ID_FCM	2
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_CURR_DISPLAY_ID */
	#define BMSK_MFD_VC1_0_SEQPIC_CURR_DISPLAY_ID_FBID	0x0000001f /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_CURR_DISPLAY_ID_FCM	0xc0000000 /*  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_CURR_DISPLAY_ID - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_CURR_DISPLAY_ID_FBID	 0x223c, 0, 5, 0x0000001f
	#define BITFIELD_MFD_VC1_0_SEQPIC_CURR_DISPLAY_ID_FCM	 0x223c, 30, 2, 0xc0000000
#define ROFF_MFD_VC1_0_SEQPIC_FWD_REF_FRAME_ID	0x2240 /* MFD VC1 0 SEQPIC FWD REF FRAME ID */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_FWD_REF_FRAME_ID	 0x2240, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_FWD_REF_FRAME_ID */
	#define BLSB_MFD_VC1_0_SEQPIC_FWD_REF_FRAME_ID_FBID	0
	#define BLSB_MFD_VC1_0_SEQPIC_FWD_REF_FRAME_ID_FCM	30
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_FWD_REF_FRAME_ID */
	#define BWID_MFD_VC1_0_SEQPIC_FWD_REF_FRAME_ID_FBID	5
	#define BWID_MFD_VC1_0_SEQPIC_FWD_REF_FRAME_ID_FCM	2
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_FWD_REF_FRAME_ID */
	#define BMSK_MFD_VC1_0_SEQPIC_FWD_REF_FRAME_ID_FBID	0x0000001f /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_FWD_REF_FRAME_ID_FCM	0xc0000000 /*  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_FWD_REF_FRAME_ID - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_FWD_REF_FRAME_ID_FBID	 0x2240, 0, 5, 0x0000001f
	#define BITFIELD_MFD_VC1_0_SEQPIC_FWD_REF_FRAME_ID_FCM	 0x2240, 30, 2, 0xc0000000
#define ROFF_MFD_VC1_0_SEQPIC_BWD_REF_FRAME_ID	0x2244 /* MFD VC1 0 SEQPIC BWD REF FRAME ID */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_BWD_REF_FRAME_ID	 0x2244, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_BWD_REF_FRAME_ID */
	#define BLSB_MFD_VC1_0_SEQPIC_BWD_REF_FRAME_ID_FBID	0
	#define BLSB_MFD_VC1_0_SEQPIC_BWD_REF_FRAME_ID_FCM	30
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_BWD_REF_FRAME_ID */
	#define BWID_MFD_VC1_0_SEQPIC_BWD_REF_FRAME_ID_FBID	5
	#define BWID_MFD_VC1_0_SEQPIC_BWD_REF_FRAME_ID_FCM	2
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_BWD_REF_FRAME_ID */
	#define BMSK_MFD_VC1_0_SEQPIC_BWD_REF_FRAME_ID_FBID	0x0000001f /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_BWD_REF_FRAME_ID_FCM	0xc0000000 /*  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_BWD_REF_FRAME_ID - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_BWD_REF_FRAME_ID_FBID	 0x2244, 0, 5, 0x0000001f
	#define BITFIELD_MFD_VC1_0_SEQPIC_BWD_REF_FRAME_ID_FCM	 0x2244, 30, 2, 0xc0000000
#define ROFF_MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID	0x2248 /* MFD VC1 0 SEQPIC FIELD REF FRAME ID */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID	 0x2248, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID */
	#define BLSB_MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID_TOP_FIELD	0
	#define BLSB_MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID_SECOND_FIELD	1
	#define BLSB_MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID_ANCHOR	2
	#define BLSB_MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID_CUR_REF	3
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID */
	#define BWID_MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID_TOP_FIELD	1
	#define BWID_MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID_SECOND_FIELD	1
	#define BWID_MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID_ANCHOR	1
	#define BWID_MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID_CUR_REF	1
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID */
	#define BMSK_MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID_TOP_FIELD	(1<<0) /* == 0x00000001:  */
	#define BMSK_MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID_SECOND_FIELD	(1<<1) /* == 0x00000002:  */
	#define BMSK_MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID_ANCHOR	(1<<2) /* == 0x00000004:  */
	#define BMSK_MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID_CUR_REF	(1<<3) /* == 0x00000008:  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID_TOP_FIELD	 0x2248, 0, 1, 0x00000001
	#define BITFIELD_MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID_SECOND_FIELD	 0x2248, 1, 1, 0x00000002
	#define BITFIELD_MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID_ANCHOR	 0x2248, 2, 1, 0x00000004
	#define BITFIELD_MFD_VC1_0_SEQPIC_FIELD_REF_FRAME_ID_CUR_REF	 0x2248, 3, 1, 0x00000008
#define ROFF_MFD_VC1_0_SEQPIC_AUX_FRAME_CONTROL	0x224c /* MFD VC1 0 SEQPIC AUX FRAME CONTROL */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_AUX_FRAME_CONTROL	 0x224c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_AUX_FRAME_CONTROL */
	#define BLSB_MFD_VC1_0_SEQPIC_AUX_FRAME_CONTROL_FBID	0
	#define BLSB_MFD_VC1_0_SEQPIC_AUX_FRAME_CONTROL_FCM	30
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_AUX_FRAME_CONTROL */
	#define BWID_MFD_VC1_0_SEQPIC_AUX_FRAME_CONTROL_FBID	5
	#define BWID_MFD_VC1_0_SEQPIC_AUX_FRAME_CONTROL_FCM	2
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_AUX_FRAME_CONTROL */
	#define BMSK_MFD_VC1_0_SEQPIC_AUX_FRAME_CONTROL_FBID	0x0000001f /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_AUX_FRAME_CONTROL_FCM	0xc0000000 /*  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_AUX_FRAME_CONTROL - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_AUX_FRAME_CONTROL_FBID	 0x224c, 0, 5, 0x0000001f
	#define BITFIELD_MFD_VC1_0_SEQPIC_AUX_FRAME_CONTROL_FCM	 0x224c, 30, 2, 0xc0000000
#define ROFF_MFD_VC1_0_SEQPIC_IMAGE_STRUCTURE	0x2250 /* MFD VC1 0 SEQPIC IMAGE STRUCTURE */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_IMAGE_STRUCTURE	 0x2250, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_IMAGE_STRUCTURE */
	#define BLSB_MFD_VC1_0_SEQPIC_IMAGE_STRUCTURE_IMG_STRUC	0
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_IMAGE_STRUCTURE */
	#define BWID_MFD_VC1_0_SEQPIC_IMAGE_STRUCTURE_IMG_STRUC	2
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_IMAGE_STRUCTURE */
	#define BMSK_MFD_VC1_0_SEQPIC_IMAGE_STRUCTURE_IMG_STRUC	0x00000003 /*  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_IMAGE_STRUCTURE - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_IMAGE_STRUCTURE_IMG_STRUC	 0x2250, 0, 2, 0x00000003
#define ROFF_MFD_VC1_0_SEQPIC_ALT_FRAME_TYPE	0x2254 /* MFD VC1 0 SEQPIC ALT FRAME TYPE */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_ALT_FRAME_TYPE	 0x2254, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_ALT_FRAME_TYPE */
	#define BLSB_MFD_VC1_0_SEQPIC_ALT_FRAME_TYPE_FCM	0
	#define BLSB_MFD_VC1_0_SEQPIC_ALT_FRAME_TYPE_PTYPE	2
	#define BLSB_MFD_VC1_0_SEQPIC_ALT_FRAME_TYPE_PQUANT	6
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_ALT_FRAME_TYPE */
	#define BWID_MFD_VC1_0_SEQPIC_ALT_FRAME_TYPE_FCM	2
	#define BWID_MFD_VC1_0_SEQPIC_ALT_FRAME_TYPE_PTYPE	4
	#define BWID_MFD_VC1_0_SEQPIC_ALT_FRAME_TYPE_PQUANT	5
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_ALT_FRAME_TYPE */
	#define BMSK_MFD_VC1_0_SEQPIC_ALT_FRAME_TYPE_FCM	0x00000003 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_ALT_FRAME_TYPE_PTYPE	0x0000003c /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_ALT_FRAME_TYPE_PQUANT	0x000007c0 /*  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_ALT_FRAME_TYPE - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_ALT_FRAME_TYPE_FCM	 0x2254, 0, 2, 0x00000003
	#define BITFIELD_MFD_VC1_0_SEQPIC_ALT_FRAME_TYPE_PTYPE	 0x2254, 2, 4, 0x0000003c
	#define BITFIELD_MFD_VC1_0_SEQPIC_ALT_FRAME_TYPE_PQUANT	 0x2254, 6, 5, 0x000007c0
#define ROFF_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT	0x2258 /* MFD VC1 0 INTENSITY COMPENSATION FWD BOT */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT	 0x2258, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT */
	#define BLSB_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_INT_COMP_1	0
	#define BLSB_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_LUMA_SCALE_1	1
	#define BLSB_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_LUMA_SHIFT_1	7
	#define BLSB_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_INT_COMP_2	13
	#define BLSB_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_LUMA_SCALE_2	14
	#define BLSB_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_LUMA_SHIFT_2	20
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT */
	#define BWID_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_INT_COMP_1	1
	#define BWID_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_LUMA_SCALE_1	6
	#define BWID_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_LUMA_SHIFT_1	6
	#define BWID_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_INT_COMP_2	1
	#define BWID_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_LUMA_SCALE_2	6
	#define BWID_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_LUMA_SHIFT_2	6
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT */
	#define BMSK_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_INT_COMP_1	(1<<0) /* == 0x00000001:  */
	#define BMSK_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_LUMA_SCALE_1	0x0000007e /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_LUMA_SHIFT_1	0x00001f80 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_INT_COMP_2	(1<<13) /* == 0x00002000:  */
	#define BMSK_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_LUMA_SCALE_2	0x000fc000 /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_LUMA_SHIFT_2	0x03f00000 /*  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_INT_COMP_1	 0x2258, 0, 1, 0x00000001
	#define BITFIELD_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_LUMA_SCALE_1	 0x2258, 1, 6, 0x0000007e
	#define BITFIELD_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_LUMA_SHIFT_1	 0x2258, 7, 6, 0x00001f80
	#define BITFIELD_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_INT_COMP_2	 0x2258, 13, 1, 0x00002000
	#define BITFIELD_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_LUMA_SCALE_2	 0x2258, 14, 6, 0x000fc000
	#define BITFIELD_MFD_VC1_0_SEQPIC_INT_COMP_FWD_BOT_LUMA_SHIFT_2	 0x2258, 20, 6, 0x03f00000
#define ROFF_MFD_VC1_0_SEQPIC_INT_COMP_BWD_TOP	0x225c /* MFD VC1 0 INTENSITY COMPENSATION BWD TOP */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_INT_COMP_BWD_TOP	 0x225c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_INT_COMP_BWD_TOP */
	#define BLSB_MFD_VC1_0_SEQPIC_INT_COMP_BWD_TOP_INT_COMP_1	0
	#define BLSB_MFD_VC1_0_SEQPIC_INT_COMP_BWD_TOP_LUMA_SCALE_1	1
	#define BLSB_MFD_VC1_0_SEQPIC_INT_COMP_BWD_TOP_LUMA_SHIFT_1	7
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_INT_COMP_BWD_TOP */
	#define BWID_MFD_VC1_0_SEQPIC_INT_COMP_BWD_TOP_INT_COMP_1	1
	#define BWID_MFD_VC1_0_SEQPIC_INT_COMP_BWD_TOP_LUMA_SCALE_1	6
	#define BWID_MFD_VC1_0_SEQPIC_INT_COMP_BWD_TOP_LUMA_SHIFT_1	6
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_INT_COMP_BWD_TOP */
	#define BMSK_MFD_VC1_0_SEQPIC_INT_COMP_BWD_TOP_INT_COMP_1	(1<<0) /* == 0x00000001:  */
	#define BMSK_MFD_VC1_0_SEQPIC_INT_COMP_BWD_TOP_LUMA_SCALE_1	0x0000007e /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_INT_COMP_BWD_TOP_LUMA_SHIFT_1	0x00001f80 /*  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_INT_COMP_BWD_TOP - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_INT_COMP_BWD_TOP_INT_COMP_1	 0x225c, 0, 1, 0x00000001
	#define BITFIELD_MFD_VC1_0_SEQPIC_INT_COMP_BWD_TOP_LUMA_SCALE_1	 0x225c, 1, 6, 0x0000007e
	#define BITFIELD_MFD_VC1_0_SEQPIC_INT_COMP_BWD_TOP_LUMA_SHIFT_1	 0x225c, 7, 6, 0x00001f80
#define ROFF_MFD_VC1_0_SEQPIC_INT_COMP_BWD_BOT	0x2260 /* MFD VC1 0 INTENSITY COMPENSATION BWD BOT */ 
	#define BITFIELD_MFD_VC1_0_SEQPIC_INT_COMP_BWD_BOT	 0x2260, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SEQPIC_INT_COMP_BWD_BOT */
	#define BLSB_MFD_VC1_0_SEQPIC_INT_COMP_BWD_BOT_INT_COMP_1	0
	#define BLSB_MFD_VC1_0_SEQPIC_INT_COMP_BWD_BOT_LUMA_SCALE_1	1
	#define BLSB_MFD_VC1_0_SEQPIC_INT_COMP_BWD_BOT_LUMA_SHIFT_1	7
	/* Register Bit Widths for MFD_VC1_0_SEQPIC_INT_COMP_BWD_BOT */
	#define BWID_MFD_VC1_0_SEQPIC_INT_COMP_BWD_BOT_INT_COMP_1	1
	#define BWID_MFD_VC1_0_SEQPIC_INT_COMP_BWD_BOT_LUMA_SCALE_1	6
	#define BWID_MFD_VC1_0_SEQPIC_INT_COMP_BWD_BOT_LUMA_SHIFT_1	6
	/* Register Bit MASKS for MFD_VC1_0_SEQPIC_INT_COMP_BWD_BOT */
	#define BMSK_MFD_VC1_0_SEQPIC_INT_COMP_BWD_BOT_INT_COMP_1	(1<<0) /* == 0x00000001:  */
	#define BMSK_MFD_VC1_0_SEQPIC_INT_COMP_BWD_BOT_LUMA_SCALE_1	0x0000007e /*  */
	#define BMSK_MFD_VC1_0_SEQPIC_INT_COMP_BWD_BOT_LUMA_SHIFT_1	0x00001f80 /*  */
	/* Register BITFIELD for MFD_VC1_0_SEQPIC_INT_COMP_BWD_BOT - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SEQPIC_INT_COMP_BWD_BOT_INT_COMP_1	 0x2260, 0, 1, 0x00000001
	#define BITFIELD_MFD_VC1_0_SEQPIC_INT_COMP_BWD_BOT_LUMA_SCALE_1	 0x2260, 1, 6, 0x0000007e
	#define BITFIELD_MFD_VC1_0_SEQPIC_INT_COMP_BWD_BOT_LUMA_SHIFT_1	 0x2260, 7, 6, 0x00001f80
#define ROFF_MFD_VC1_0_MBDEC_STATUS	0x2300 /* MFD VC1 0 MBDEC STATUS */ 
	#define BITFIELD_MFD_VC1_0_MBDEC_STATUS	 0x2300, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_MBDEC_STATUS */
	#define BLSB_MFD_VC1_0_MBDEC_STATUS_DONE	0
	#define BLSB_MFD_VC1_0_MBDEC_STATUS_MB_ERROR	1
	#define BLSB_MFD_VC1_0_MBDEC_STATUS_BE_PIC_DONE	2
	#define BLSB_MFD_VC1_0_MBDEC_STATUS_BE_ROW_DONE	3
	#define BLSB_MFD_VC1_0_MBDEC_STATUS_MBX	8
	#define BLSB_MFD_VC1_0_MBDEC_STATUS_MBY	16
	#define BLSB_MFD_VC1_0_MBDEC_STATUS_MBDSTATE	24
	/* Register Bit Widths for MFD_VC1_0_MBDEC_STATUS */
	#define BWID_MFD_VC1_0_MBDEC_STATUS_DONE	1
	#define BWID_MFD_VC1_0_MBDEC_STATUS_MB_ERROR	1
	#define BWID_MFD_VC1_0_MBDEC_STATUS_BE_PIC_DONE	1
	#define BWID_MFD_VC1_0_MBDEC_STATUS_BE_ROW_DONE	1
	#define BWID_MFD_VC1_0_MBDEC_STATUS_MBX	8
	#define BWID_MFD_VC1_0_MBDEC_STATUS_MBY	8
	#define BWID_MFD_VC1_0_MBDEC_STATUS_MBDSTATE	8
	/* Register Bit MASKS for MFD_VC1_0_MBDEC_STATUS */
	#define BMSK_MFD_VC1_0_MBDEC_STATUS_DONE	(1<<0) /* == 0x00000001:  */
	#define BMSK_MFD_VC1_0_MBDEC_STATUS_MB_ERROR	(1<<1) /* == 0x00000002:  */
	#define BMSK_MFD_VC1_0_MBDEC_STATUS_BE_PIC_DONE	(1<<2) /* == 0x00000004:  */
	#define BMSK_MFD_VC1_0_MBDEC_STATUS_BE_ROW_DONE	(1<<3) /* == 0x00000008:  */
	#define BMSK_MFD_VC1_0_MBDEC_STATUS_MBX	0x0000ff00 /*  */
	#define BMSK_MFD_VC1_0_MBDEC_STATUS_MBY	0x00ff0000 /*  */
	#define BMSK_MFD_VC1_0_MBDEC_STATUS_MBDSTATE	0xff000000 /*  */
	/* Register BITFIELD for MFD_VC1_0_MBDEC_STATUS - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_MBDEC_STATUS_DONE	 0x2300, 0, 1, 0x00000001
	#define BITFIELD_MFD_VC1_0_MBDEC_STATUS_MB_ERROR	 0x2300, 1, 1, 0x00000002
	#define BITFIELD_MFD_VC1_0_MBDEC_STATUS_BE_PIC_DONE	 0x2300, 2, 1, 0x00000004
	#define BITFIELD_MFD_VC1_0_MBDEC_STATUS_BE_ROW_DONE	 0x2300, 3, 1, 0x00000008
	#define BITFIELD_MFD_VC1_0_MBDEC_STATUS_MBX	 0x2300, 8, 8, 0x0000ff00
	#define BITFIELD_MFD_VC1_0_MBDEC_STATUS_MBY	 0x2300, 16, 8, 0x00ff0000
	#define BITFIELD_MFD_VC1_0_MBDEC_STATUS_MBDSTATE	 0x2300, 24, 8, 0xff000000
#define ROFF_MFD_VC1_0_MBDEC_FRAME_START	0x2304 /* MFD VC1 0 MBDEC FRAME START */ 
	#define BITFIELD_MFD_VC1_0_MBDEC_FRAME_START	 0x2304, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_MBDEC_FW_DEBUG	0x2308 /* MFD VC1 0 MBDEC FW DEBUG */ 
	#define BITFIELD_MFD_VC1_0_MBDEC_FW_DEBUG	 0x2308, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_MBDEC_MBQDEBUG	0x230c /* MFD VC1 0 MBDEC MBQDEBUG */ 
	#define BITFIELD_MFD_VC1_0_MBDEC_MBQDEBUG	 0x230c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_MBDEC_MPRDEBUG	0x2310 /* MFD VC1 0 MBDEC MPRDEBUG */ 
	#define BITFIELD_MFD_VC1_0_MBDEC_MPRDEBUG	 0x2310, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_MBDEC_MASDEBUG	0x2314 /* MFD VC1 0 MBDEC MASDEBUG */ 
	#define BITFIELD_MFD_VC1_0_MBDEC_MASDEBUG	 0x2314, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_MBDEC_BPPDEBUG	0x2318 /* MFD VC1 0 MBDEC BPPDEBUG */ 
	#define BITFIELD_MFD_VC1_0_MBDEC_BPPDEBUG	 0x2318, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_MBDEC_DPBMCDEBUG	0x231c /* MFD VC1 0 MBDEC DPBMCDEBUG */ 
	#define BITFIELD_MFD_VC1_0_MBDEC_DPBMCDEBUG	 0x231c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_MBDEC_GENDEBUG	0x2320 /* MFD VC1 0 MBDEC GENDEBUG */ 
	#define BITFIELD_MFD_VC1_0_MBDEC_GENDEBUG	 0x2320, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_FW_DEBUG	0x2324 /* MFD VC1 0 FW DEBUG */ 
	#define BITFIELD_MFD_VC1_0_FW_DEBUG	 0x2324, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_MBDEC_ERROR_CONCEAL_CONTROL	0x2340 /* MFD VC1 0 MBDEC ERROR CONCEAL CONTROL */ 
	#define BITFIELD_MFD_VC1_0_MBDEC_ERROR_CONCEAL_CONTROL	 0x2340, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BP_CONTROL_STATUS	0x2400 /* MFD VC1 0 BP CONTROL STATUS */ 
	#define BITFIELD_MFD_VC1_0_BP_CONTROL_STATUS	 0x2400, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_BP_CONTROL_STATUS */
	#define BLSB_MFD_VC1_0_BP_CONTROL_STATUS_BPP_START	0
	#define BLSB_MFD_VC1_0_BP_CONTROL_STATUS_RDBACK_MODE	10
	#define BLSB_MFD_VC1_0_BP_CONTROL_STATUS_EXIT_RDBACK	11
	#define BLSB_MFD_VC1_0_BP_CONTROL_STATUS_ACT_BUF	12
	#define BLSB_MFD_VC1_0_BP_CONTROL_STATUS_IDLE	30
	#define BLSB_MFD_VC1_0_BP_CONTROL_STATUS_ENDIAN	31
	/* Register Bit Widths for MFD_VC1_0_BP_CONTROL_STATUS */
	#define BWID_MFD_VC1_0_BP_CONTROL_STATUS_BPP_START	1
	#define BWID_MFD_VC1_0_BP_CONTROL_STATUS_RDBACK_MODE	1
	#define BWID_MFD_VC1_0_BP_CONTROL_STATUS_EXIT_RDBACK	1
	#define BWID_MFD_VC1_0_BP_CONTROL_STATUS_ACT_BUF	2
	#define BWID_MFD_VC1_0_BP_CONTROL_STATUS_IDLE	1
	#define BWID_MFD_VC1_0_BP_CONTROL_STATUS_ENDIAN	1
	/* Register Bit MASKS for MFD_VC1_0_BP_CONTROL_STATUS */
	#define BMSK_MFD_VC1_0_BP_CONTROL_STATUS_BPP_START	(1<<0) /* == 0x00000001:  */
	#define BMSK_MFD_VC1_0_BP_CONTROL_STATUS_RDBACK_MODE	(1<<10) /* == 0x00000400:  */
	#define BMSK_MFD_VC1_0_BP_CONTROL_STATUS_EXIT_RDBACK	(1<<11) /* == 0x00000800:  */
	#define BMSK_MFD_VC1_0_BP_CONTROL_STATUS_ACT_BUF	0x00003000 /*  */
	#define BMSK_MFD_VC1_0_BP_CONTROL_STATUS_IDLE	(1<<30) /* == 0x40000000:  */
	#define BMSK_MFD_VC1_0_BP_CONTROL_STATUS_ENDIAN	(1<<31) /* == 0x80000000:  */
	/* Register BITFIELD for MFD_VC1_0_BP_CONTROL_STATUS - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_BP_CONTROL_STATUS_BPP_START	 0x2400, 0, 1, 0x00000001
	#define BITFIELD_MFD_VC1_0_BP_CONTROL_STATUS_RDBACK_MODE	 0x2400, 10, 1, 0x00000400
	#define BITFIELD_MFD_VC1_0_BP_CONTROL_STATUS_EXIT_RDBACK	 0x2400, 11, 1, 0x00000800
	#define BITFIELD_MFD_VC1_0_BP_CONTROL_STATUS_ACT_BUF	 0x2400, 12, 2, 0x00003000
	#define BITFIELD_MFD_VC1_0_BP_CONTROL_STATUS_IDLE	 0x2400, 30, 1, 0x40000000
	#define BITFIELD_MFD_VC1_0_BP_CONTROL_STATUS_ENDIAN	 0x2400, 31, 1, 0x80000000
#define ROFF_MFD_VC1_0_BP_DATA_IN_STATUS	0x2404 /* MFD VC1 0 BP DATA IN STATUS */ 
	#define BITFIELD_MFD_VC1_0_BP_DATA_IN_STATUS	 0x2404, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BP_DATA_IN_VALUE	0x2408 /* MFD VC1 0 BP DATA IN VALUE */ 
	#define BITFIELD_MFD_VC1_0_BP_DATA_IN_VALUE	 0x2408, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE	0x240c /* MFD VC1 0 BP DATA IN POSITION N SIZE */ 
	#define BITFIELD_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE	 0x240c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE */
	#define BLSB_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE_MB_PER_ROW	0
	#define BLSB_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE_COL_POS	8
	#define BLSB_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE_ROW_POS	16
	#define BLSB_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE_FULL_WORD	30
	#define BLSB_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE_BITBUILD	31
	/* Register Bit Widths for MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE */
	#define BWID_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE_MB_PER_ROW	6
	#define BWID_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE_COL_POS	2
	#define BWID_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE_ROW_POS	7
	#define BWID_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE_FULL_WORD	1
	#define BWID_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE_BITBUILD	1
	/* Register Bit MASKS for MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE */
	#define BMSK_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE_MB_PER_ROW	0x0000003f /*  */
	#define BMSK_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE_COL_POS	0x00000300 /*  */
	#define BMSK_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE_ROW_POS	0x007f0000 /*  */
	#define BMSK_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE_FULL_WORD	(1<<30) /* == 0x40000000:  */
	#define BMSK_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE_BITBUILD	(1<<31) /* == 0x80000000:  */
	/* Register BITFIELD for MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE_MB_PER_ROW	 0x240c, 0, 6, 0x0000003f
	#define BITFIELD_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE_COL_POS	 0x240c, 8, 2, 0x00000300
	#define BITFIELD_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE_ROW_POS	 0x240c, 16, 7, 0x007f0000
	#define BITFIELD_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE_FULL_WORD	 0x240c, 30, 1, 0x40000000
	#define BITFIELD_MFD_VC1_0_BP_DATA_IN_POSITION_N_SIZE_BITBUILD	 0x240c, 31, 1, 0x80000000
#define ROFF_MFD_VC1_0_MBA_ENABLE	0x2800 /* MFD VC1 0 MBA ENABLE */ 
	#define BITFIELD_MFD_VC1_0_MBA_ENABLE	 0x2800, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_RSB_DDR_BA	0x2808 /* MFD VC1 0 RSB DDR BA */ 
	#define BITFIELD_MFD_VC1_0_RSB_DDR_BA	 0x2808, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DEC_STATUS	0x280c /* MFD VC1 0 DEC STATUS */ 
	#define BITFIELD_MFD_VC1_0_DEC_STATUS	 0x280c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SIF_SMP_RS	0x2810 /* MFD VC1 0 SIF SMP RS */ 
	#define BITFIELD_MFD_VC1_0_SIF_SMP_RS	 0x2810, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SIF_MSK_RS	0x2814 /* MFD VC1 0 SIF MSK RS */ 
	#define BITFIELD_MFD_VC1_0_SIF_MSK_RS	 0x2814, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SIF_HDAT	0x2818 /* MFD VC1 0 SIF HDAT */ 
	#define BITFIELD_MFD_VC1_0_SIF_HDAT	 0x2818, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SIF_SDDAT	0x281c /* MFD VC1 0 SIF SDDAT */ 
	#define BITFIELD_MFD_VC1_0_SIF_SDDAT	 0x281c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SIF_SMP_RC	0x2820 /* MFD VC1 0 SIF SMP RC */ 
	#define BITFIELD_MFD_VC1_0_SIF_SMP_RC	 0x2820, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SIF_MSK_RC	0x2824 /* MFD VC1 0 SIF MSK RC */ 
	#define BITFIELD_MFD_VC1_0_SIF_MSK_RC	 0x2824, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SED	0x2900 /* MFD VC1 0 SED */ 
	#define BITFIELD_MFD_VC1_0_SED	 0x2900, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SDEMC	0x2904 /* MFD VC1 0 SDEMC */ 
	#define BITFIELD_MFD_VC1_0_SDEMC	 0x2904, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DMA_CB_BASE	0x2908 /* MFD VC1 0 DMA CB BASE */ 
	#define BITFIELD_MFD_VC1_0_DMA_CB_BASE	 0x2908, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DMA_SB_RDPTR	0x290c /* MFD VC1 0 DMA SB RDPTR */ 
	#define BITFIELD_MFD_VC1_0_DMA_SB_RDPTR	 0x290c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DMA_CB_SIZE	0x2910 /* MFD VC1 0 DMA CB SIZE */ 
	#define BITFIELD_MFD_VC1_0_DMA_CB_SIZE	 0x2910, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DMA_WTRMARK	0x2914 /* MFD VC1 0 DMA WTRMARK */ 
	#define BITFIELD_MFD_VC1_0_DMA_WTRMARK	 0x2914, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DMA_WDT	0x2918 /* MFD VC1 0 DMA WDT */ 
	#define BITFIELD_MFD_VC1_0_DMA_WDT	 0x2918, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DMA_CB_RDPTR	0x291c /* MFD VC1 0 DMA CB RDPTR */ 
	#define BITFIELD_MFD_VC1_0_DMA_CB_RDPTR	 0x291c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DMA_CB_WRPTR	0x2920 /* MFD VC1 0 DMA CB WRPTR */ 
	#define BITFIELD_MFD_VC1_0_DMA_CB_WRPTR	 0x2920, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DMA_SDLINK	0x2924 /* MFD VC1 0 DMA SDLINK */ 
	#define BITFIELD_MFD_VC1_0_DMA_SDLINK	 0x2924, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DMA_SDLLSA	0x2928 /* MFD VC1 0 DMA SDLLSA */ 
	#define BITFIELD_MFD_VC1_0_DMA_SDLLSA	 0x2928, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DMA_SDLNDA	0x292c /* MFD VC1 0 DMA SDLNDA */ 
	#define BITFIELD_MFD_VC1_0_DMA_SDLNDA	 0x292c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DMA_SDLDBC	0x2930 /* MFD VC1 0 DMA SDLDBC */ 
	#define BITFIELD_MFD_VC1_0_DMA_SDLDBC	 0x2930, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DMA_SDLCBC	0x2934 /* MFD VC1 0 DMA SDLCBC */ 
	#define BITFIELD_MFD_VC1_0_DMA_SDLCBC	 0x2934, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DMA_SDLDC	0x2938 /* MFD VC1 0 DMA SDLDC */ 
	#define BITFIELD_MFD_VC1_0_DMA_SDLDC	 0x2938, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DMA_FIFO	0x293c /* MFD VC1 0 DMA FIFO */ 
	#define BITFIELD_MFD_VC1_0_DMA_FIFO	 0x293c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DMA_FIFO_STAT	0x2940 /* MFD VC1 0 DMA FIFO STAT */ 
	#define BITFIELD_MFD_VC1_0_DMA_FIFO_STAT	 0x2940, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DMA_INT_EN	0x2944 /* MFD VC1 0 DMA INT EN */ 
	#define BITFIELD_MFD_VC1_0_DMA_INT_EN	 0x2944, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DMA_INT_STAT	0x2948 /* MFD VC1 0 DMA INT STAT */ 
	#define BITFIELD_MFD_VC1_0_DMA_INT_STAT	 0x2948, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_DMA_BS_CNTR	0x294c /* MFD VC1 0 DMA BS CNTR */ 
	#define BITFIELD_MFD_VC1_0_DMA_BS_CNTR	 0x294c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SCD_XCR	0x2a00 /* MFD VC1 0 SCD XCR */ 
	#define BITFIELD_MFD_VC1_0_SCD_XCR	 0x2a00, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SCD_XCR */
	#define BLSB_MFD_VC1_0_SCD_XCR_SCDFWEN	24
	/* Register Bit Widths for MFD_VC1_0_SCD_XCR */
	#define BWID_MFD_VC1_0_SCD_XCR_SCDFWEN	1
	/* Register Bit MASKS for MFD_VC1_0_SCD_XCR */
	#define BMSK_MFD_VC1_0_SCD_XCR_SCDFWEN	(1<<24) /* == 0x01000000: SCD FW Mode Enable */
	/* Register BITFIELD for MFD_VC1_0_SCD_XCR - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SCD_XCR_SCDFWEN	 0x2a00, 24, 1, 0x01000000
#define ROFF_MFD_VC1_0_SCD_XSCR1	0x2a04 /* MFD VC1 0 SCD XSCR1 */ 
	#define BITFIELD_MFD_VC1_0_SCD_XSCR1	 0x2a04, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SCD_XSCR2	0x2a08 /* MFD VC1 0 SCD XSCR2 */ 
	#define BITFIELD_MFD_VC1_0_SCD_XSCR2	 0x2a08, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SCD_FWPREAD	0x2a0c /* MFD VC1 0 SCD FWPREAD */ 
	#define BITFIELD_MFD_VC1_0_SCD_FWPREAD	 0x2a0c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SCD_FWCRTL	0x2a10 /* MFD VC1 0 SCD FWCRTL */ 
	#define BITFIELD_MFD_VC1_0_SCD_FWCRTL	 0x2a10, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_0_SCD_FWCRTL */
	#define BLSB_MFD_VC1_0_SCD_FWCRTL_GET_BYTE	31
	#define BLSB_MFD_VC1_0_SCD_FWCRTL_PYLD_REL	30
	#define BLSB_MFD_VC1_0_SCD_FWCRTL_PIPE_DFLUSH	29
	#define BLSB_MFD_VC1_0_SCD_FWCRTL_RESERVED2	28
	#define BLSB_MFD_VC1_0_SCD_FWCRTL_RESERVED1	18
	#define BLSB_MFD_VC1_0_SCD_FWCRTL_STREAM_MSK	17
	#define BLSB_MFD_VC1_0_SCD_FWCRTL_SC_DET_ALL	16
	#define BLSB_MFD_VC1_0_SCD_FWCRTL_RESERVED0	0
	/* Register Bit Widths for MFD_VC1_0_SCD_FWCRTL */
	#define BWID_MFD_VC1_0_SCD_FWCRTL_GET_BYTE	1
	#define BWID_MFD_VC1_0_SCD_FWCRTL_PYLD_REL	1
	#define BWID_MFD_VC1_0_SCD_FWCRTL_PIPE_DFLUSH	1
	#define BWID_MFD_VC1_0_SCD_FWCRTL_RESERVED2	1
	#define BWID_MFD_VC1_0_SCD_FWCRTL_RESERVED1	10
	#define BWID_MFD_VC1_0_SCD_FWCRTL_STREAM_MSK	1
	#define BWID_MFD_VC1_0_SCD_FWCRTL_SC_DET_ALL	1
	#define BWID_MFD_VC1_0_SCD_FWCRTL_RESERVED0	16
	/* Register Bit MASKS for MFD_VC1_0_SCD_FWCRTL */
	#define BMSK_MFD_VC1_0_SCD_FWCRTL_GET_BYTE	(1<<31) /* == 0x80000000: initiate single byte pop pf pipeline registers */
	#define BMSK_MFD_VC1_0_SCD_FWCRTL_PYLD_REL	(1<<30) /* == 0x40000000: Release payload bytes */
	#define BMSK_MFD_VC1_0_SCD_FWCRTL_PIPE_DFLUSH	(1<<29) /* == 0x20000000: Flush captured SC */
	#define BMSK_MFD_VC1_0_SCD_FWCRTL_RESERVED2	(1<<28) /* == 0x10000000: Reserved */
	#define BMSK_MFD_VC1_0_SCD_FWCRTL_RESERVED1	0x0ffc0000 /* Reserved */
	#define BMSK_MFD_VC1_0_SCD_FWCRTL_STREAM_MSK	(1<<17) /* == 0x00020000: mask byte stream data to the decoder */
	#define BMSK_MFD_VC1_0_SCD_FWCRTL_SC_DET_ALL	(1<<16) /* == 0x00010000: SCD detects all start codes */
	#define BMSK_MFD_VC1_0_SCD_FWCRTL_RESERVED0	0x0000ffff /* Reserved */
	/* Register BITFIELD for MFD_VC1_0_SCD_FWCRTL - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_0_SCD_FWCRTL_GET_BYTE	 0x2a10, 31, 1, 0x80000000
	#define BITFIELD_MFD_VC1_0_SCD_FWCRTL_PYLD_REL	 0x2a10, 30, 1, 0x40000000
	#define BITFIELD_MFD_VC1_0_SCD_FWCRTL_PIPE_DFLUSH	 0x2a10, 29, 1, 0x20000000
	#define BITFIELD_MFD_VC1_0_SCD_FWCRTL_RESERVED2	 0x2a10, 28, 1, 0x10000000
	#define BITFIELD_MFD_VC1_0_SCD_FWCRTL_RESERVED1	 0x2a10, 18, 10, 0x0ffc0000
	#define BITFIELD_MFD_VC1_0_SCD_FWCRTL_STREAM_MSK	 0x2a10, 17, 1, 0x00020000
	#define BITFIELD_MFD_VC1_0_SCD_FWCRTL_SC_DET_ALL	 0x2a10, 16, 1, 0x00010000
	#define BITFIELD_MFD_VC1_0_SCD_FWCRTL_RESERVED0	 0x2a10, 0, 16, 0x0000ffff
#define ROFF_MFD_VC1_0_SCD_FWSTAT	0x2a14 /* MFD VC1 0 SCD FWSTAT */ 
	#define BITFIELD_MFD_VC1_0_SCD_FWSTAT	 0x2a14, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SCD_WRCTRL	0x2a18 /* MFD VC1 0 SCD WRCTRL */ 
	#define BITFIELD_MFD_VC1_0_SCD_WRCTRL	 0x2a18, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_SCD_WRDATA	0x2a1c /* MFD VC1 0 SCD WRDATA */ 
	#define BITFIELD_MFD_VC1_0_SCD_WRDATA	 0x2a1c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_PIP_CTRL	0x2b00 /* MFD VC1 0 PIP CTRL */ 
	#define BITFIELD_MFD_VC1_0_PIP_CTRL	 0x2b00, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_PIP_STAT	0x2b04 /* MFD VC1 0 PIP STAT */ 
	#define BITFIELD_MFD_VC1_0_PIP_STAT	 0x2b04, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_PIP_CDYB	0x2b08 /* MFD VC1 0 PIP CDYB */ 
	#define BITFIELD_MFD_VC1_0_PIP_CDYB	 0x2b08, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_PIP_CDUB	0x2b0c /* MFD VC1 0 PIP CDUB */ 
	#define BITFIELD_MFD_VC1_0_PIP_CDUB	 0x2b0c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_PIP_TST_CTRL	0x2b10 /* MFD VC1 0 PIP TST CTRL */ 
	#define BITFIELD_MFD_VC1_0_PIP_TST_CTRL	 0x2b10, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_PIP_TST_WR_DATA_LO	0x2b14 /* MFD VC1 0 PIP TST WR DATA LO */ 
	#define BITFIELD_MFD_VC1_0_PIP_TST_WR_DATA_LO	 0x2b14, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_0_PIP_TST_WR_DATA_HI	0x2b18 /* MFD VC1 0 PIP TST WR DATA HI */ 
	#define BITFIELD_MFD_VC1_0_PIP_TST_WR_DATA_HI	 0x2b18, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_SAS	0x3000 /* MFD MPG2VD SAS */ 
	#define BITFIELD_MFD_MPG2VD_SAS	 0x3000, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_IM	0x3004 /* MFD MPG2VD IM */ 
	#define BITFIELD_MFD_MPG2VD_IM	 0x3004, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_IS	0x3008 /* MFD MPG2VD IS */ 
	#define BITFIELD_MFD_MPG2VD_IS	 0x3008, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DCC	0x300c /* MFD MPG2VD DCC */ 
	#define BITFIELD_MFD_MPG2VD_DCC	 0x300c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DCSI1	0x3010 /* MFD MPG2VD DCSI1 */ 
	#define BITFIELD_MFD_MPG2VD_DCSI1	 0x3010, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DCSI2	0x3014 /* MFD MPG2VD DCSI2 */ 
	#define BITFIELD_MFD_MPG2VD_DCSI2	 0x3014, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DCPI1	0x3018 /* MFD MPG2VD DCPI1 */ 
	#define BITFIELD_MFD_MPG2VD_DCPI1	 0x3018, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DCPCE1	0x301c /* MFD MPG2VD DCPCE1 */ 
	#define BITFIELD_MFD_MPG2VD_DCPCE1	 0x301c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_PPE	0x3020 /* MFD MPG2VD PPE */ 
	#define BITFIELD_MFD_MPG2VD_PPE	 0x3020, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_QMA	0x3024 /* MFD MPG2VD QMA */ 
	#define BITFIELD_MFD_MPG2VD_QMA	 0x3024, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_QMD	0x3028 /* MFD MPG2VD QMD */ 
	#define BITFIELD_MFD_MPG2VD_QMD	 0x3028, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_CDYB	0x302c /* MFD MPG2VD CDYB */ 
	#define BITFIELD_MFD_MPG2VD_CDYB	 0x302c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_CDUB	0x3030 /* MFD MPG2VD CDUB */ 
	#define BITFIELD_MFD_MPG2VD_CDUB	 0x3030, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_BRYB	0x3034 /* MFD MPG2VD BRYB */ 
	#define BITFIELD_MFD_MPG2VD_BRYB	 0x3034, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_BRUB	0x3038 /* MFD MPG2VD BRUB */ 
	#define BITFIELD_MFD_MPG2VD_BRUB	 0x3038, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_FRYB	0x303c /* MFD MPG2VD FRYB */ 
	#define BITFIELD_MFD_MPG2VD_FRYB	 0x303c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_FRUB	0x3040 /* MFD MPG2VD FRUB */ 
	#define BITFIELD_MFD_MPG2VD_FRUB	 0x3040, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_STAT	0x3044 /* MFD MPG2VD STAT */ 
	#define BITFIELD_MFD_MPG2VD_STAT	 0x3044, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DBF_CTRL	0x3400 /* MFD MPG2VD DBF CTRL */ 
	#define BITFIELD_MFD_MPG2VD_DBF_CTRL	 0x3400, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DBF_YDDA	0x3404 /* MFD MPG2VD DBF YDDA */ 
	#define BITFIELD_MFD_MPG2VD_DBF_YDDA	 0x3404, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DBF_CDDA	0x3408 /* MFD MPG2VD DBF CDDA */ 
	#define BITFIELD_MFD_MPG2VD_DBF_CDDA	 0x3408, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DBF_QSMF	0x340c /* MFD MPG2VD DBF QSMF */ 
	#define BITFIELD_MFD_MPG2VD_DBF_QSMF	 0x340c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DBF_IFSV	0x3410 /* MFD MPG2VD DBF IFSV */ 
	#define BITFIELD_MFD_MPG2VD_DBF_IFSV	 0x3410, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DBF_PFSV	0x3414 /* MFD MPG2VD DBF PFSV */ 
	#define BITFIELD_MFD_MPG2VD_DBF_PFSV	 0x3414, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DBF_BFSV	0x3418 /* MFD MPG2VD DBF BFSV */ 
	#define BITFIELD_MFD_MPG2VD_DBF_BFSV	 0x3418, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_MBAC_ENABLE	0x3800 /* MFD MPG2VD MBAC ENABLE */ 
	#define BITFIELD_MFD_MPG2VD_MBAC_ENABLE	 0x3800, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DEC_STATUS	0x3824 /* MFD MPG2VD DEC STATUS */ 
	#define BITFIELD_MFD_MPG2VD_DEC_STATUS	 0x3824, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_SED	0x3900 /* MFD MPG2VD SED */ 
	#define BITFIELD_MFD_MPG2VD_SED	 0x3900, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_SDEMC	0x3904 /* MFD MPG2VD SDEMC */ 
	#define BITFIELD_MFD_MPG2VD_SDEMC	 0x3904, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DMA_CB_BASE	0x3908 /* MFD MPG2VD DMA CB BASE */ 
	#define BITFIELD_MFD_MPG2VD_DMA_CB_BASE	 0x3908, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DMA_SB_RDPTR	0x390c /* MFD MPG2VD DMA SB RDPTR */ 
	#define BITFIELD_MFD_MPG2VD_DMA_SB_RDPTR	 0x390c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DMA_CB_SIZE	0x3910 /* MFD MPG2VD DMA CB SIZE */ 
	#define BITFIELD_MFD_MPG2VD_DMA_CB_SIZE	 0x3910, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DMA_WTRMARK	0x3914 /* MFD MPG2VD DMA WTRMARK */ 
	#define BITFIELD_MFD_MPG2VD_DMA_WTRMARK	 0x3914, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DMA_WDT	0x3918 /* MFD MPG2VD DMA WDT */ 
	#define BITFIELD_MFD_MPG2VD_DMA_WDT	 0x3918, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DMA_CB_RDPTR	0x391c /* MFD MPG2VD DMA CB RDPTR */ 
	#define BITFIELD_MFD_MPG2VD_DMA_CB_RDPTR	 0x391c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DMA_CB_WRPTR	0x3920 /* MFD MPG2VD DMA CB WRPTR */ 
	#define BITFIELD_MFD_MPG2VD_DMA_CB_WRPTR	 0x3920, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DMA_SDLINK	0x3924 /* MFD MPG2VD DMA SDLINK */ 
	#define BITFIELD_MFD_MPG2VD_DMA_SDLINK	 0x3924, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DMA_SDLLSA	0x3928 /* MFD MPG2VD DMA SDLLSA */ 
	#define BITFIELD_MFD_MPG2VD_DMA_SDLLSA	 0x3928, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DMA_SDLNDA	0x392c /* MFD MPG2VD DMA SDLNDA */ 
	#define BITFIELD_MFD_MPG2VD_DMA_SDLNDA	 0x392c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DMA_SDLDBC	0x3930 /* MFD MPG2VD DMA SDLDBC */ 
	#define BITFIELD_MFD_MPG2VD_DMA_SDLDBC	 0x3930, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DMA_SDLCBC	0x3934 /* MFD MPG2VD DMA SDLCBC */ 
	#define BITFIELD_MFD_MPG2VD_DMA_SDLCBC	 0x3934, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DMA_SDLDC	0x3938 /* MFD MPG2VD DMA SDLDC */ 
	#define BITFIELD_MFD_MPG2VD_DMA_SDLDC	 0x3938, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DMA_FIFO	0x393c /* MFD MPG2VD DMA FIFO */ 
	#define BITFIELD_MFD_MPG2VD_DMA_FIFO	 0x393c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DMA_FIFO_STAT	0x3940 /* MFD MPG2VD DMA FIFO STAT */ 
	#define BITFIELD_MFD_MPG2VD_DMA_FIFO_STAT	 0x3940, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DMA_INT_EN	0x3944 /* MFD MPG2VD DMA INT EN */ 
	#define BITFIELD_MFD_MPG2VD_DMA_INT_EN	 0x3944, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DMA_INT_STAT	0x3948 /* MFD MPG2VD DMA INT STAT */ 
	#define BITFIELD_MFD_MPG2VD_DMA_INT_STAT	 0x3948, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_DMA_BS_CNTR	0x394c /* MFD MPG2VD DMA BS CNTR */ 
	#define BITFIELD_MFD_MPG2VD_DMA_BS_CNTR	 0x394c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_SCD_XCR	0x3a00 /* MFD MPG2VD SCD XCR */ 
	#define BITFIELD_MFD_MPG2VD_SCD_XCR	 0x3a00, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_MPG2VD_SCD_XCR */
	#define BLSB_MFD_MPG2VD_SCD_XCR_SCDFWEN	24
	/* Register Bit Widths for MFD_MPG2VD_SCD_XCR */
	#define BWID_MFD_MPG2VD_SCD_XCR_SCDFWEN	1
	/* Register Bit MASKS for MFD_MPG2VD_SCD_XCR */
	#define BMSK_MFD_MPG2VD_SCD_XCR_SCDFWEN	(1<<24) /* == 0x01000000: SCD FW Mode Enable */
	/* Register BITFIELD for MFD_MPG2VD_SCD_XCR - roff, lsb, width, mask */
	#define BITFIELD_MFD_MPG2VD_SCD_XCR_SCDFWEN	 0x3a00, 24, 1, 0x01000000
#define ROFF_MFD_MPG2VD_SCD_XSCR1	0x3a04 /* MFD MPG2VD SCD XSCR1 */ 
	#define BITFIELD_MFD_MPG2VD_SCD_XSCR1	 0x3a04, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_SCD_XSCR2	0x3a08 /* MFD MPG2VD SCD XSCR2 */ 
	#define BITFIELD_MFD_MPG2VD_SCD_XSCR2	 0x3a08, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_SCD_FWPREA	0x3a0c /* MFD MPG2VD SCD FWPREA */ 
	#define BITFIELD_MFD_MPG2VD_SCD_FWPREA	 0x3a0c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_SCD_FWCRTL	0x3a10 /* MFD MPG2VD SCD FWCRTL */ 
	#define BITFIELD_MFD_MPG2VD_SCD_FWCRTL	 0x3a10, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_MPG2VD_SCD_FWCRTL */
	#define BLSB_MFD_MPG2VD_SCD_FWCRTL_GET_BYTE	31
	#define BLSB_MFD_MPG2VD_SCD_FWCRTL_PYLD_REL	30
	#define BLSB_MFD_MPG2VD_SCD_FWCRTL_PIPE_DFLUSH	29
	#define BLSB_MFD_MPG2VD_SCD_FWCRTL_RESERVED2	28
	#define BLSB_MFD_MPG2VD_SCD_FWCRTL_RESERVED1	18
	#define BLSB_MFD_MPG2VD_SCD_FWCRTL_STREAM_MSK	17
	#define BLSB_MFD_MPG2VD_SCD_FWCRTL_SC_DET_ALL	16
	#define BLSB_MFD_MPG2VD_SCD_FWCRTL_RESERVED0	0
	/* Register Bit Widths for MFD_MPG2VD_SCD_FWCRTL */
	#define BWID_MFD_MPG2VD_SCD_FWCRTL_GET_BYTE	1
	#define BWID_MFD_MPG2VD_SCD_FWCRTL_PYLD_REL	1
	#define BWID_MFD_MPG2VD_SCD_FWCRTL_PIPE_DFLUSH	1
	#define BWID_MFD_MPG2VD_SCD_FWCRTL_RESERVED2	1
	#define BWID_MFD_MPG2VD_SCD_FWCRTL_RESERVED1	10
	#define BWID_MFD_MPG2VD_SCD_FWCRTL_STREAM_MSK	1
	#define BWID_MFD_MPG2VD_SCD_FWCRTL_SC_DET_ALL	1
	#define BWID_MFD_MPG2VD_SCD_FWCRTL_RESERVED0	16
	/* Register Bit MASKS for MFD_MPG2VD_SCD_FWCRTL */
	#define BMSK_MFD_MPG2VD_SCD_FWCRTL_GET_BYTE	(1<<31) /* == 0x80000000: initiate single byte pop pf pipeline registers */
	#define BMSK_MFD_MPG2VD_SCD_FWCRTL_PYLD_REL	(1<<30) /* == 0x40000000: Release payload bytes */
	#define BMSK_MFD_MPG2VD_SCD_FWCRTL_PIPE_DFLUSH	(1<<29) /* == 0x20000000: Flush captured SC */
	#define BMSK_MFD_MPG2VD_SCD_FWCRTL_RESERVED2	(1<<28) /* == 0x10000000: Reserved */
	#define BMSK_MFD_MPG2VD_SCD_FWCRTL_RESERVED1	0x0ffc0000 /* Reserved */
	#define BMSK_MFD_MPG2VD_SCD_FWCRTL_STREAM_MSK	(1<<17) /* == 0x00020000: mask byte stream data to the decoder */
	#define BMSK_MFD_MPG2VD_SCD_FWCRTL_SC_DET_ALL	(1<<16) /* == 0x00010000: SCD detects all start codes */
	#define BMSK_MFD_MPG2VD_SCD_FWCRTL_RESERVED0	0x0000ffff /* Reserved */
	/* Register BITFIELD for MFD_MPG2VD_SCD_FWCRTL - roff, lsb, width, mask */
	#define BITFIELD_MFD_MPG2VD_SCD_FWCRTL_GET_BYTE	 0x3a10, 31, 1, 0x80000000
	#define BITFIELD_MFD_MPG2VD_SCD_FWCRTL_PYLD_REL	 0x3a10, 30, 1, 0x40000000
	#define BITFIELD_MFD_MPG2VD_SCD_FWCRTL_PIPE_DFLUSH	 0x3a10, 29, 1, 0x20000000
	#define BITFIELD_MFD_MPG2VD_SCD_FWCRTL_RESERVED2	 0x3a10, 28, 1, 0x10000000
	#define BITFIELD_MFD_MPG2VD_SCD_FWCRTL_RESERVED1	 0x3a10, 18, 10, 0x0ffc0000
	#define BITFIELD_MFD_MPG2VD_SCD_FWCRTL_STREAM_MSK	 0x3a10, 17, 1, 0x00020000
	#define BITFIELD_MFD_MPG2VD_SCD_FWCRTL_SC_DET_ALL	 0x3a10, 16, 1, 0x00010000
	#define BITFIELD_MFD_MPG2VD_SCD_FWCRTL_RESERVED0	 0x3a10, 0, 16, 0x0000ffff
#define ROFF_MFD_MPG2VD_SCD_FWSTAT	0x3a14 /* MFD MPG2VD SCD FWSTAT */ 
	#define BITFIELD_MFD_MPG2VD_SCD_FWSTAT	 0x3a14, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_SCD_WRCTRL	0x3a18 /* MFD MPG2VD SCD WRCTRL */ 
	#define BITFIELD_MFD_MPG2VD_SCD_WRCTRL	 0x3a18, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_SCD_WRDATA	0x3a1c /* MFD MPG2VD SCD WRDATA */ 
	#define BITFIELD_MFD_MPG2VD_SCD_WRDATA	 0x3a1c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_PIP_CTRL	0x3b00 /* MFD MPG2VD PIP CTRL */ 
	#define BITFIELD_MFD_MPG2VD_PIP_CTRL	 0x3b00, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_PIP_STAT	0x3b04 /* MFD MPG2VD PIP STAT */ 
	#define BITFIELD_MFD_MPG2VD_PIP_STAT	 0x3b04, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_PIP_CDYB	0x3b08 /* MFD MPG2VD PIP CDYB */ 
	#define BITFIELD_MFD_MPG2VD_PIP_CDYB	 0x3b08, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_PIP_CDUB	0x3b0c /* MFD MPG2VD PIP CDUB */ 
	#define BITFIELD_MFD_MPG2VD_PIP_CDUB	 0x3b0c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_PIP_TST_CTRL	0x3b10 /* MFD MPG2VD PIP TST CTRL */ 
	#define BITFIELD_MFD_MPG2VD_PIP_TST_CTRL	 0x3b10, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_PIP_TST_WR_DATA_LO	0x3b14 /* MFD MPG2VD PIP TST WR DATA LO */ 
	#define BITFIELD_MFD_MPG2VD_PIP_TST_WR_DATA_LO	 0x3b14, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG2VD_PIP_TST_WR_DATA_HI	0x3b18 /* MFD MPG2VD PIP TST WR DATA HI */ 
	#define BITFIELD_MFD_MPG2VD_PIP_TST_WR_DATA_HI	 0x3b18, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SMP_RD	0x4000 /* MFD H264 1 SMP RD */ 
	#define BITFIELD_MFD_H264_1_SMP_RD	 0x4000, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_INT_EN_RD	0x4004 /* MFD H264 1 INT EN RD */ 
	#define BITFIELD_MFD_H264_1_INT_EN_RD	 0x4004, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SMP_SET	0x4008 /* MFD H264 1 SMP SET */ 
	#define BITFIELD_MFD_H264_1_SMP_SET	 0x4008, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SMP_CLR	0x400c /* MFD H264 1 SMP CLR */ 
	#define BITFIELD_MFD_H264_1_SMP_CLR	 0x400c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SMP_MSK_SET	0x4010 /* MFD H264 1 SMP MSK SET */ 
	#define BITFIELD_MFD_H264_1_SMP_MSK_SET	 0x4010, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SMP_MSK_CLR	0x4014 /* MFD H264 1 SMP MSK CLR */ 
	#define BITFIELD_MFD_H264_1_SMP_MSK_CLR	 0x4014, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_HDAT	0x4018 /* MFD H264 1 HDAT */ 
	#define BITFIELD_MFD_H264_1_HDAT	 0x4018, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SDDAT	0x401c /* MFD H264 1 SDDAT */ 
	#define BITFIELD_MFD_H264_1_SDDAT	 0x401c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DQ_PUSH	0x4020 /* MFD H264 1 DQ PUSH */ 
	#define BITFIELD_MFD_H264_1_DQ_PUSH	 0x4020, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DQ_STAT	0x4024 /* MFD H264 1 DQ STAT */ 
	#define BITFIELD_MFD_H264_1_DQ_STAT	 0x4024, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DPB_INIT	0x4040 /* MFD H264 1 DPB INIT */ 
	#define BITFIELD_MFD_H264_1_DPB_INIT	 0x4040, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DPB_FRM_SZ_STAT	0x4044 /* MFD H264 1 DPB FRM SZ STAT */ 
	#define BITFIELD_MFD_H264_1_DPB_FRM_SZ_STAT	 0x4044, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DPB_FRM_SZ_CTRL	0x4048 /* MFD H264 1 DPB FRM SZ CTRL */ 
	#define BITFIELD_MFD_H264_1_DPB_FRM_SZ_CTRL	 0x4048, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DPB_NUMB_OVR	0x404c /* MFD H264 1 DPB NUMB OVR */ 
	#define BITFIELD_MFD_H264_1_DPB_NUMB_OVR	 0x404c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DPB_FS_VALUES	0x4050 /* MFD H264 1 DPB FS VALUES */ 
	#define BITFIELD_MFD_H264_1_DPB_FS_VALUES	 0x4050, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DPB_FS_OFFSET	0x4054 /* MFD H264 1 DPB FS OFFSET */ 
	#define BITFIELD_MFD_H264_1_DPB_FS_OFFSET	 0x4054, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_FSD	0x4058 /* MFD H264 1 FSD */ 
	#define BITFIELD_MFD_H264_1_FSD	 0x4058, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DANGLING_FIELD	0x405c /* MFD H264 1 DANGLING FIELD */ 
	#define BITFIELD_MFD_H264_1_DANGLING_FIELD	 0x405c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DISP_TAG	0x4060 /* MFD H264 1 DISP TAG */ 
	#define BITFIELD_MFD_H264_1_DISP_TAG	 0x4060, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DPB_MBI_ADDR_LUT_WR	0x407c /* MFD H264 1 DPB MBI ADDR LUT WR */ 
	#define BITFIELD_MFD_H264_1_DPB_MBI_ADDR_LUT_WR	 0x407c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DPB_UV_ADDR_LUT_WR	0x4080 /* MFD H264 1 DPB UV ADDR LUT WR */ 
	#define BITFIELD_MFD_H264_1_DPB_UV_ADDR_LUT_WR	 0x4080, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DPB_Y_ADDR_LUT_WR	0x4084 /* MFD H264 1 DPB Y ADDR LUT WR */ 
	#define BITFIELD_MFD_H264_1_DPB_Y_ADDR_LUT_WR	 0x4084, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_FRAME_CYC_COUNT	0x4090 /* MFD H264 1 FRAME CYC COUNT */ 
	#define BITFIELD_MFD_H264_1_FRAME_CYC_COUNT	 0x4090, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_IB_WAIT_COUNT	0x4094 /* MFD H264 1 IB WAIT COUNT */ 
	#define BITFIELD_MFD_H264_1_IB_WAIT_COUNT	 0x4094, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_RBSP_COUNT	0x4098 /* MFD H264 1 RBSP COUNT */ 
	#define BITFIELD_MFD_H264_1_RBSP_COUNT	 0x4098, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_MPR_COUNT	0x409c /* MFD H264 1 MPR COUNT */ 
	#define BITFIELD_MFD_H264_1_MPR_COUNT	 0x409c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_CORE_CONFIG	0x40a0 /* MFD H264 1 CORE CONFIG */ 
	#define BITFIELD_MFD_H264_1_CORE_CONFIG	 0x40a0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_INT_CTRL	0x40c0 /* MFD H264 1 INT CTRL */ 
	#define BITFIELD_MFD_H264_1_INT_CTRL	 0x40c0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_INT_STAT	0x40c4 /* MFD H264 1 INT STAT */ 
	#define BITFIELD_MFD_H264_1_INT_STAT	 0x40c4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SOFT_RST	0x40fc /* MFD H264 1 SOFT RST */ 
	#define BITFIELD_MFD_H264_1_SOFT_RST	 0x40fc, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_PSR_STAT	0x4100 /* MFD H264 1 BSD PSR STAT */ 
	#define BITFIELD_MFD_H264_1_BSD_PSR_STAT	 0x4100, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_STAT	0x4104 /* MFD H264 1 BSD STAT */ 
	#define BITFIELD_MFD_H264_1_BSD_STAT	 0x4104, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_RBSP_CTRL	0x4110 /* MFD H264 1 BSD RBSP CTRL */ 
	#define BITFIELD_MFD_H264_1_BSD_RBSP_CTRL	 0x4110, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_DATA	0x4114 /* MFD H264 1 BSD DATA */ 
	#define BITFIELD_MFD_H264_1_BSD_DATA	 0x4114, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_NAL_TYPE	0x4118 /* MFD H264 1 BSD NAL TYPE */ 
	#define BITFIELD_MFD_H264_1_BSD_NAL_TYPE	 0x4118, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_BBB_STAT	0x411c /* MFD H264 1 BSD BBB STAT */ 
	#define BITFIELD_MFD_H264_1_BSD_BBB_STAT	 0x411c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GUE_DEC	0x4120 /* MFD H264 1 BSD GUE DEC */ 
	#define BITFIELD_MFD_H264_1_BSD_GUE_DEC	 0x4120, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GSE_DEC	0x4124 /* MFD H264 1 BSD GSE DEC */ 
	#define BITFIELD_MFD_H264_1_BSD_GSE_DEC	 0x4124, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_EXP_GME_INTRA	0x4128 /* MFD H264 1 BSD EXP GME_INTRA */ 
	#define BITFIELD_MFD_H264_1_BSD_EXP_GME_INTRA	 0x4128, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_EXP_GME_INTER	0x4138 /* MFD H264 1 BSD EXP GME_INTER */ 
	#define BITFIELD_MFD_H264_1_BSD_EXP_GME_INTER	 0x4138, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_IMG_INIT	0x4140 /* MFD H264 1 BSD IMG INIT */ 
	#define BITFIELD_MFD_H264_1_BSD_IMG_INIT	 0x4140, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_SLICE_P1	0x4150 /* MFD H264 1 BSD SLICE P1 */ 
	#define BITFIELD_MFD_H264_1_BSD_SLICE_P1	 0x4150, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_SLICE_P2	0x4154 /* MFD H264 1 BSD SLICE P2 */ 
	#define BITFIELD_MFD_H264_1_BSD_SLICE_P2	 0x4154, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_SLICE_START	0x4158 /* MFD H264 1 BSD SLICE START */ 
	#define BITFIELD_MFD_H264_1_BSD_SLICE_START	 0x4158, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_MB_CTRL	0x415c /* MFD H264 1 BSD MB CTRL */ 
	#define BITFIELD_MFD_H264_1_BSD_MB_CTRL	 0x415c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_QM_DEC_START	0x4160 /* MFD H264 1 BSD QM DEC START */ 
	#define BITFIELD_MFD_H264_1_BSD_QM_DEC_START	 0x4160, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_DEC_STAT	0x4164 /* MFD H264 1 BSD DEC STAT */ 
	#define BITFIELD_MFD_H264_1_BSD_DEC_STAT	 0x4164, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_QM_LOAD_START	0x4168 /* MFD H264 1 BSD QM LOAD START */ 
	#define BITFIELD_MFD_H264_1_BSD_QM_LOAD_START	 0x4168, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_QM_LOAD_VALUE	0x416c /* MFD H264 1 BSD QM LOAD VALUE */ 
	#define BITFIELD_MFD_H264_1_BSD_QM_LOAD_VALUE	 0x416c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_BYTE_ALIGN	0x417c /* MFD H264 1 BSD BYTE ALIGN */ 
	#define BITFIELD_MFD_H264_1_BSD_BYTE_ALIGN	 0x417c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_BBB_TRAIL	0x4180 /* MFD H264 1 BSD BBB TRAIL */ 
	#define BITFIELD_MFD_H264_1_BSD_BBB_TRAIL	 0x4180, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS01	0x4184 /* MFD H264 1 BSD GET BITS01 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS01	 0x4184, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS02	0x4188 /* MFD H264 1 BSD GET BITS02 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS02	 0x4188, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS03	0x418c /* MFD H264 1 BSD GET BITS03 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS03	 0x418c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS04	0x4190 /* MFD H264 1 BSD GET BITS04 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS04	 0x4190, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS05	0x4194 /* MFD H264 1 BSD GET BITS05 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS05	 0x4194, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS06	0x4198 /* MFD H264 1 BSD GET BITS06 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS06	 0x4198, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS07	0x419c /* MFD H264 1 BSD GET BITS07 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS07	 0x419c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS08	0x41a0 /* MFD H264 1 BSD GET BITS08 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS08	 0x41a0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS09	0x41a4 /* MFD H264 1 BSD GET BITS09 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS09	 0x41a4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS10	0x41a8 /* MFD H264 1 BSD GET BITS10 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS10	 0x41a8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS11	0x41ac /* MFD H264 1 BSD GET BITS11 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS11	 0x41ac, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS12	0x41b0 /* MFD H264 1 BSD GET BITS12 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS12	 0x41b0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS13	0x41b4 /* MFD H264 1 BSD GET BITS13 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS13	 0x41b4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS14	0x41b8 /* MFD H264 1 BSD GET BITS14 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS14	 0x41b8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS15	0x41bc /* MFD H264 1 BSD GET BITS15 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS15	 0x41bc, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS16	0x41c0 /* MFD H264 1 BSD GET BITS16 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS16	 0x41c0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS17	0x41c4 /* MFD H264 1 BSD GET BITS17 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS17	 0x41c4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS18	0x41c8 /* MFD H264 1 BSD GET BITS18 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS18	 0x41c8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS19	0x41cc /* MFD H264 1 BSD GET BITS19 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS19	 0x41cc, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS20	0x41d0 /* MFD H264 1 BSD GET BITS20 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS20	 0x41d0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS21	0x41d4 /* MFD H264 1 BSD GET BITS21 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS21	 0x41d4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS22	0x41d8 /* MFD H264 1 BSD GET BITS22 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS22	 0x41d8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS23	0x41dc /* MFD H264 1 BSD GET BITS23 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS23	 0x41dc, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS24	0x41e0 /* MFD H264 1 BSD GET BITS24 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS24	 0x41e0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS25	0x41e4 /* MFD H264 1 BSD GET BITS25 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS25	 0x41e4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS26	0x41e8 /* MFD H264 1 BSD GET BITS26 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS26	 0x41e8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS27	0x41ec /* MFD H264 1 BSD GET BITS27 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS27	 0x41ec, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS28	0x41f0 /* MFD H264 1 BSD GET BITS28 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS28	 0x41f0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS29	0x41f4 /* MFD H264 1 BSD GET BITS29 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS29	 0x41f4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS30	0x41f8 /* MFD H264 1 BSD GET BITS30 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS30	 0x41f8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_BSD_GET_BITS31	0x41fc /* MFD H264 1 BSD GET BITS31 */ 
	#define BITFIELD_MFD_H264_1_BSD_GET_BITS31	 0x41fc, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_MPR_TF_POC	0x4300 /* MFD H264 1 MPR TF POC */ 
	#define BITFIELD_MFD_H264_1_MPR_TF_POC	 0x4300, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_MPR_BF_POC	0x4304 /* MFD H264 1 MPR BF POC */ 
	#define BITFIELD_MFD_H264_1_MPR_BF_POC	 0x4304, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_MPR_LST00	0x4380 /* MFD H264 1 MPR LST00 */ 
	#define BITFIELD_MFD_H264_1_MPR_LST00	 0x4380, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_MPR_LST01	0x4384 /* MFD H264 1 MPR LST01 */ 
	#define BITFIELD_MFD_H264_1_MPR_LST01	 0x4384, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_MPR_LST02	0x4388 /* MFD H264 1 MPR LST02 */ 
	#define BITFIELD_MFD_H264_1_MPR_LST02	 0x4388, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_MPR_LST03	0x438c /* MFD H264 1 MPR LST03 */ 
	#define BITFIELD_MFD_H264_1_MPR_LST03	 0x438c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_MPR_LST04	0x4390 /* MFD H264 1 MPR LST04 */ 
	#define BITFIELD_MFD_H264_1_MPR_LST04	 0x4390, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_MPR_LST05	0x4394 /* MFD H264 1 MPR LST05 */ 
	#define BITFIELD_MFD_H264_1_MPR_LST05	 0x4394, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_MPR_LST06	0x4398 /* MFD H264 1 MPR LST06 */ 
	#define BITFIELD_MFD_H264_1_MPR_LST06	 0x4398, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_MPR_LST07	0x439c /* MFD H264 1 MPR LST07 */ 
	#define BITFIELD_MFD_H264_1_MPR_LST07	 0x439c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_MPR_LST08	0x43a0 /* MFD H264 1 MPR LST08 */ 
	#define BITFIELD_MFD_H264_1_MPR_LST08	 0x43a0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_MPR_LST09	0x43a4 /* MFD H264 1 MPR LST09 */ 
	#define BITFIELD_MFD_H264_1_MPR_LST09	 0x43a4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_MPR_LST10	0x43a8 /* MFD H264 1 MPR LST10 */ 
	#define BITFIELD_MFD_H264_1_MPR_LST10	 0x43a8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_MPR_LST11	0x43ac /* MFD H264 1 MPR LST11 */ 
	#define BITFIELD_MFD_H264_1_MPR_LST11	 0x43ac, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_MPR_LST12	0x43b0 /* MFD H264 1 MPR LST12 */ 
	#define BITFIELD_MFD_H264_1_MPR_LST12	 0x43b0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_MPR_LST13	0x43b4 /* MFD H264 1 MPR LST13 */ 
	#define BITFIELD_MFD_H264_1_MPR_LST13	 0x43b4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_MPR_LST14	0x43b8 /* MFD H264 1 MPR LST14 */ 
	#define BITFIELD_MFD_H264_1_MPR_LST14	 0x43b8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_MPR_LST15	0x43bc /* MFD H264 1 MPR LST15 */ 
	#define BITFIELD_MFD_H264_1_MPR_LST15	 0x43bc, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_RSB_DDR_BA	0x4808 /* MFD H264 1 RSB DDR BA */ 
	#define BITFIELD_MFD_H264_1_RSB_DDR_BA	 0x4808, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DEC_STATUS	0x480c /* MFD H264 1 DEC STATUS */ 
	#define BITFIELD_MFD_H264_1_DEC_STATUS	 0x480c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SIF_SMP_RS	0x4810 /* MFD H264 1 SIF SMP RS */ 
	#define BITFIELD_MFD_H264_1_SIF_SMP_RS	 0x4810, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SIF_MSK_RS	0x4814 /* MFD H264 1 SIF MSK RS */ 
	#define BITFIELD_MFD_H264_1_SIF_MSK_RS	 0x4814, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SIF_HDAT	0x4818 /* MFD H264 1 SIF HDAT */ 
	#define BITFIELD_MFD_H264_1_SIF_HDAT	 0x4818, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SIF_SDDAT	0x481c /* MFD H264 1 SIF SDDAT */ 
	#define BITFIELD_MFD_H264_1_SIF_SDDAT	 0x481c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SIF_SMP_RC	0x4820 /* MFD H264 1 SIF SMP RC */ 
	#define BITFIELD_MFD_H264_1_SIF_SMP_RC	 0x4820, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SIF_MSK_RC	0x4824 /* MFD H264 1 SIF MSK RC */ 
	#define BITFIELD_MFD_H264_1_SIF_MSK_RC	 0x4824, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SED	0x4900 /* MFD H264 1 SED */ 
	#define BITFIELD_MFD_H264_1_SED	 0x4900, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SDEMC	0x4904 /* MFD H264 1 SDEMC */ 
	#define BITFIELD_MFD_H264_1_SDEMC	 0x4904, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DMA_CB_BASE	0x4908 /* MFD H264 1 DMA CB BASE */ 
	#define BITFIELD_MFD_H264_1_DMA_CB_BASE	 0x4908, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DMA_SB_RDPTR	0x490c /* MFD H264 1 DMA SB RDPTR */ 
	#define BITFIELD_MFD_H264_1_DMA_SB_RDPTR	 0x490c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DMA_CB_SIZE	0x4910 /* MFD H264 1 DMA CB SIZE */ 
	#define BITFIELD_MFD_H264_1_DMA_CB_SIZE	 0x4910, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DMA_WTRMARK	0x4914 /* MFD H264 1 DMA WTRMARK */ 
	#define BITFIELD_MFD_H264_1_DMA_WTRMARK	 0x4914, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DMA_WDT	0x4918 /* MFD H264 1 DMA WDT */ 
	#define BITFIELD_MFD_H264_1_DMA_WDT	 0x4918, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DMA_CB_RDPTR	0x491c /* MFD H264 1 DMA CB RDPTR */ 
	#define BITFIELD_MFD_H264_1_DMA_CB_RDPTR	 0x491c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DMA_CB_WRPTR	0x4920 /* MFD H264 1 DMA CB WRPTR */ 
	#define BITFIELD_MFD_H264_1_DMA_CB_WRPTR	 0x4920, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DMA_SDLINK	0x4924 /* MFD H264 1 DMA SDLINK */ 
	#define BITFIELD_MFD_H264_1_DMA_SDLINK	 0x4924, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DMA_SDLLSA	0x4928 /* MFD H264 1 DMA SDLLSA */ 
	#define BITFIELD_MFD_H264_1_DMA_SDLLSA	 0x4928, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DMA_SDLNDA	0x492c /* MFD H264 1 DMA SDLNDA */ 
	#define BITFIELD_MFD_H264_1_DMA_SDLNDA	 0x492c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DMA_SDLDBC	0x4930 /* MFD H264 1 DMA SDLDBC */ 
	#define BITFIELD_MFD_H264_1_DMA_SDLDBC	 0x4930, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DMA_SDLCBC	0x4934 /* MFD H264 1 DMA SDLCBC */ 
	#define BITFIELD_MFD_H264_1_DMA_SDLCBC	 0x4934, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DMA_SDLDC	0x4938 /* MFD H264 1 DMA SDLDC */ 
	#define BITFIELD_MFD_H264_1_DMA_SDLDC	 0x4938, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DMA_FIFO	0x493c /* MFD H264 1 DMA FIFO */ 
	#define BITFIELD_MFD_H264_1_DMA_FIFO	 0x493c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DMA_FIFO_STAT	0x4940 /* MFD H264 1 DMA FIFO STAT */ 
	#define BITFIELD_MFD_H264_1_DMA_FIFO_STAT	 0x4940, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DMA_INT_EN	0x4944 /* MFD H264 1 DMA INT EN */ 
	#define BITFIELD_MFD_H264_1_DMA_INT_EN	 0x4944, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DMA_INT_STAT	0x4948 /* MFD H264 1 DMA INT STAT */ 
	#define BITFIELD_MFD_H264_1_DMA_INT_STAT	 0x4948, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_DMA_BS_CNTR	0x494c /* MFD H264 1 DMA BS CNTR */ 
	#define BITFIELD_MFD_H264_1_DMA_BS_CNTR	 0x494c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SCD_XCR	0x4a00 /* MFD H264 1 SCD XCR */ 
	#define BITFIELD_MFD_H264_1_SCD_XCR	 0x4a00, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_1_SCD_XCR */
	#define BLSB_MFD_H264_1_SCD_XCR_SCDFWEN	24
	/* Register Bit Widths for MFD_H264_1_SCD_XCR */
	#define BWID_MFD_H264_1_SCD_XCR_SCDFWEN	1
	/* Register Bit MASKS for MFD_H264_1_SCD_XCR */
	#define BMSK_MFD_H264_1_SCD_XCR_SCDFWEN	(1<<24) /* == 0x01000000: SCD FW Mode Enable */
	/* Register BITFIELD for MFD_H264_1_SCD_XCR - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_1_SCD_XCR_SCDFWEN	 0x4a00, 24, 1, 0x01000000
#define ROFF_MFD_H264_1_SCD_XSCR1	0x4a04 /* MFD H264 1 SCD XSCR1 */ 
	#define BITFIELD_MFD_H264_1_SCD_XSCR1	 0x4a04, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SCD_XSCR2	0x4a08 /* MFD H264 1 SCD XSCR2 */ 
	#define BITFIELD_MFD_H264_1_SCD_XSCR2	 0x4a08, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SCD_FWPREAD	0x4a0c /* MFD H264 1 SCD FWPREAD */ 
	#define BITFIELD_MFD_H264_1_SCD_FWPREAD	 0x4a0c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SCD_FWCRTL	0x4a10 /* MFD H264 1 SCD FWCRTL */ 
	#define BITFIELD_MFD_H264_1_SCD_FWCRTL	 0x4a10, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_H264_1_SCD_FWCRTL */
	#define BLSB_MFD_H264_1_SCD_FWCRTL_GET_BYTE	31
	#define BLSB_MFD_H264_1_SCD_FWCRTL_PYLD_REL	30
	#define BLSB_MFD_H264_1_SCD_FWCRTL_PIPE_DFLUSH	29
	#define BLSB_MFD_H264_1_SCD_FWCRTL_RESERVED2	28
	#define BLSB_MFD_H264_1_SCD_FWCRTL_RESERVED1	18
	#define BLSB_MFD_H264_1_SCD_FWCRTL_STREAM_MSK	17
	#define BLSB_MFD_H264_1_SCD_FWCRTL_SC_DET_ALL	16
	#define BLSB_MFD_H264_1_SCD_FWCRTL_RESERVED0	0
	/* Register Bit Widths for MFD_H264_1_SCD_FWCRTL */
	#define BWID_MFD_H264_1_SCD_FWCRTL_GET_BYTE	1
	#define BWID_MFD_H264_1_SCD_FWCRTL_PYLD_REL	1
	#define BWID_MFD_H264_1_SCD_FWCRTL_PIPE_DFLUSH	1
	#define BWID_MFD_H264_1_SCD_FWCRTL_RESERVED2	1
	#define BWID_MFD_H264_1_SCD_FWCRTL_RESERVED1	10
	#define BWID_MFD_H264_1_SCD_FWCRTL_STREAM_MSK	1
	#define BWID_MFD_H264_1_SCD_FWCRTL_SC_DET_ALL	1
	#define BWID_MFD_H264_1_SCD_FWCRTL_RESERVED0	16
	/* Register Bit MASKS for MFD_H264_1_SCD_FWCRTL */
	#define BMSK_MFD_H264_1_SCD_FWCRTL_GET_BYTE	(1<<31) /* == 0x80000000: initiate single byte pop pf pipeline registers */
	#define BMSK_MFD_H264_1_SCD_FWCRTL_PYLD_REL	(1<<30) /* == 0x40000000: Release payload bytes */
	#define BMSK_MFD_H264_1_SCD_FWCRTL_PIPE_DFLUSH	(1<<29) /* == 0x20000000: Flush captured SC */
	#define BMSK_MFD_H264_1_SCD_FWCRTL_RESERVED2	(1<<28) /* == 0x10000000: Reserved */
	#define BMSK_MFD_H264_1_SCD_FWCRTL_RESERVED1	0x0ffc0000 /* Reserved */
	#define BMSK_MFD_H264_1_SCD_FWCRTL_STREAM_MSK	(1<<17) /* == 0x00020000: mask byte stream data to the decoder */
	#define BMSK_MFD_H264_1_SCD_FWCRTL_SC_DET_ALL	(1<<16) /* == 0x00010000: SCD detects all start codes */
	#define BMSK_MFD_H264_1_SCD_FWCRTL_RESERVED0	0x0000ffff /* Reserved */
	/* Register BITFIELD for MFD_H264_1_SCD_FWCRTL - roff, lsb, width, mask */
	#define BITFIELD_MFD_H264_1_SCD_FWCRTL_GET_BYTE	 0x4a10, 31, 1, 0x80000000
	#define BITFIELD_MFD_H264_1_SCD_FWCRTL_PYLD_REL	 0x4a10, 30, 1, 0x40000000
	#define BITFIELD_MFD_H264_1_SCD_FWCRTL_PIPE_DFLUSH	 0x4a10, 29, 1, 0x20000000
	#define BITFIELD_MFD_H264_1_SCD_FWCRTL_RESERVED2	 0x4a10, 28, 1, 0x10000000
	#define BITFIELD_MFD_H264_1_SCD_FWCRTL_RESERVED1	 0x4a10, 18, 10, 0x0ffc0000
	#define BITFIELD_MFD_H264_1_SCD_FWCRTL_STREAM_MSK	 0x4a10, 17, 1, 0x00020000
	#define BITFIELD_MFD_H264_1_SCD_FWCRTL_SC_DET_ALL	 0x4a10, 16, 1, 0x00010000
	#define BITFIELD_MFD_H264_1_SCD_FWCRTL_RESERVED0	 0x4a10, 0, 16, 0x0000ffff
#define ROFF_MFD_H264_1_SCD_FWSTAT	0x4a14 /* MFD H264 1 SCD FWSTAT */ 
	#define BITFIELD_MFD_H264_1_SCD_FWSTAT	 0x4a14, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SCD_WRCTRL	0x4a18 /* MFD H264 1 SCD WRCTRL */ 
	#define BITFIELD_MFD_H264_1_SCD_WRCTRL	 0x4a18, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_SCD_WRDATA	0x4a1c /* MFD H264 1 SCD WRDATA */ 
	#define BITFIELD_MFD_H264_1_SCD_WRDATA	 0x4a1c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_PIP_CTRL	0x4b00 /* MFD H264 1 PIP CTRL */ 
	#define BITFIELD_MFD_H264_1_PIP_CTRL	 0x4b00, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_PIP_STAT	0x4b04 /* MFD H264 1 PIP STAT */ 
	#define BITFIELD_MFD_H264_1_PIP_STAT	 0x4b04, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_PIP_CDYB	0x4b08 /* MFD H264 1 PIP CDYB */ 
	#define BITFIELD_MFD_H264_1_PIP_CDYB	 0x4b08, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_PIP_CDUB	0x4b0c /* MFD H264 1 PIP CDUB */ 
	#define BITFIELD_MFD_H264_1_PIP_CDUB	 0x4b0c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_PIP_TST_CTRL	0x4b10 /* MFD H264 1 PIP TST CTRL */ 
	#define BITFIELD_MFD_H264_1_PIP_TST_CTRL	 0x4b10, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_PIP_TST_WR_DATA_LO	0x4b14 /* MFD H264 1 PIP TST WR DATA LO */ 
	#define BITFIELD_MFD_H264_1_PIP_TST_WR_DATA_LO	 0x4b14, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_H264_1_PIP_TST_WR_DATA_HI	0x4b18 /* MFD H264 1 PIP TST WR DATA HI */ 
	#define BITFIELD_MFD_H264_1_PIP_TST_WR_DATA_HI	 0x4b18, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SMP_RD	0x5000 /* MFD VC1 1 SMP RD */ 
	#define BITFIELD_MFD_VC1_1_SMP_RD	 0x5000, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_INT_EN_RD	0x5004 /* MFD VC1 1 INT EN RD */ 
	#define BITFIELD_MFD_VC1_1_INT_EN_RD	 0x5004, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SMP_SET	0x5008 /* MFD VC1 1 SMP SET */ 
	#define BITFIELD_MFD_VC1_1_SMP_SET	 0x5008, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SMP_CLR	0x500c /* MFD VC1 1 SMP CLR */ 
	#define BITFIELD_MFD_VC1_1_SMP_CLR	 0x500c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SMP_MSK_SET	0x5010 /* MFD VC1 1 SMP MSK SET */ 
	#define BITFIELD_MFD_VC1_1_SMP_MSK_SET	 0x5010, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SMP_MSK_CLR	0x5014 /* MFD VC1 1 SMP MSK CLR */ 
	#define BITFIELD_MFD_VC1_1_SMP_MSK_CLR	 0x5014, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_HDAT	0x5018 /* MFD VC1 1 HDAT */ 
	#define BITFIELD_MFD_VC1_1_HDAT	 0x5018, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SDDAT	0x501c /* MFD VC1 1 SDDAT */ 
	#define BITFIELD_MFD_VC1_1_SDDAT	 0x501c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DQ_PUSH	0x5020 /* MFD VC1 1 DQ PUSH */ 
	#define BITFIELD_MFD_VC1_1_DQ_PUSH	 0x5020, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DQ_STAT	0x5024 /* MFD VC1 1 DQ STAT */ 
	#define BITFIELD_MFD_VC1_1_DQ_STAT	 0x5024, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DPB_INIT	0x5040 /* MFD VC1 1 DPB INIT */ 
	#define BITFIELD_MFD_VC1_1_DPB_INIT	 0x5040, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DPB_FRM_SZ_STAT	0x5044 /* MFD VC1 1 DPB FRM SZ STAT */ 
	#define BITFIELD_MFD_VC1_1_DPB_FRM_SZ_STAT	 0x5044, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DPB_FRM_SZ_CTRL	0x5048 /* MFD VC1 1 DPB FRM SZ CTRL */ 
	#define BITFIELD_MFD_VC1_1_DPB_FRM_SZ_CTRL	 0x5048, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DPB_NUMB_OVR	0x504c /* MFD VC1 1 DPB NUMB OVR */ 
	#define BITFIELD_MFD_VC1_1_DPB_NUMB_OVR	 0x504c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DPB_FS_SETTING	0x5050 /* MFD VC1 1 DPB FS SETTING */ 
	#define BITFIELD_MFD_VC1_1_DPB_FS_SETTING	 0x5050, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DPB_LOAD_OFFSET	0x5054 /* MFD VC1 1 DPB LOAD OFFSET */ 
	#define BITFIELD_MFD_VC1_1_DPB_LOAD_OFFSET	 0x5054, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_FSD	0x5058 /* MFD VC1 1 FSD */ 
	#define BITFIELD_MFD_VC1_1_FSD	 0x5058, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DANGLING_FIELD	0x505c /* MFD VC1 1 DANGLING FIELD */ 
	#define BITFIELD_MFD_VC1_1_DANGLING_FIELD	 0x505c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DISP_TAG	0x5060 /* MFD VC1 1 DISP TAG */ 
	#define BITFIELD_MFD_VC1_1_DISP_TAG	 0x5060, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DPB_UV_ADDR_LUT_WR	0x2080 /* MFD VC1 1 DPB UV ADDR LUT WR */ 
	#define BITFIELD_MFD_VC1_1_DPB_UV_ADDR_LUT_WR	 0x2080, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DPB_Y_ADDR_LUT_WR	0x2084 /* MFD VC1 1 DPB Y ADDR LUT WR */ 
	#define BITFIELD_MFD_VC1_1_DPB_Y_ADDR_LUT_WR	 0x2084, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_MPS_RD_BYTE_COUNT	0x5088 /* MFD VC1 1 MPS RD BYTE COUNT */ 
	#define BITFIELD_MFD_VC1_1_MPS_RD_BYTE_COUNT	 0x5088, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SLC_IN_FRM_COUNT	0x508c /* MFD VC1 1 SLC IN FRM COUNT */ 
	#define BITFIELD_MFD_VC1_1_SLC_IN_FRM_COUNT	 0x508c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_FRAME_CYC_COUNT	0x5090 /* MFD VC1 1 FRAME CYC COUNT */ 
	#define BITFIELD_MFD_VC1_1_FRAME_CYC_COUNT	 0x5090, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_IB_WAIT_COUNT	0x5094 /* MFD VC1 1 IB WAIT COUNT */ 
	#define BITFIELD_MFD_VC1_1_IB_WAIT_COUNT	 0x5094, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_RBSP_COUNT	0x5098 /* MFD VC1 1 RBSP COUNT */ 
	#define BITFIELD_MFD_VC1_1_RBSP_COUNT	 0x5098, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BS2RBSP_STATUS	0x509c /* MFD VC1 1 BS2RBSP STATUS */ 
	#define BITFIELD_MFD_VC1_1_BS2RBSP_STATUS	 0x509c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_CORE_CONFIG	0x50a0 /* MFD VC1 1 CORE CONFIG */ 
	#define BITFIELD_MFD_VC1_1_CORE_CONFIG	 0x50a0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_RBSP_CTRL	0x50a4 /* MFD VC1 1 RBSP CTRL */ 
	#define BITFIELD_MFD_VC1_1_RBSP_CTRL	 0x50a4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_INT_CTRL	0x50c0 /* MFD VC1 1 INT CTRL */ 
	#define BITFIELD_MFD_VC1_1_INT_CTRL	 0x50c0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_INT_STAT	0x50c4 /* MFD VC1 1 INT STAT */ 
	#define BITFIELD_MFD_VC1_1_INT_STAT	 0x50c4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SOFT_RST	0x50c8 /* MFD VC1 1 SOFT RST */ 
	#define BITFIELD_MFD_VC1_1_SOFT_RST	 0x50c8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_BYTE_ALIGN	0x5100 /* MFD VC1 1 BSP BYTE ALIGN */ 
	#define BITFIELD_MFD_VC1_1_BSP_BYTE_ALIGN	 0x5100, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS01	0x5104 /* MFD VC1 1 BSP GET BITS01 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS01	 0x5104, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS02	0x5108 /* MFD VC1 1 BSP GET BITS02 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS02	 0x5108, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS03	0x510c /* MFD VC1 1 BSP GET BITS03 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS03	 0x510c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS04	0x5110 /* MFD VC1 1 BSP GET BITS04 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS04	 0x5110, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS05	0x5114 /* MFD VC1 1 BSP GET BITS05 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS05	 0x5114, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS06	0x5118 /* MFD VC1 1 BSP GET BITS06 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS06	 0x5118, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS07	0x511c /* MFD VC1 1 BSP GET BITS07 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS07	 0x511c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS08	0x5120 /* MFD VC1 1 BSP GET BITS08 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS08	 0x5120, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS09	0x5124 /* MFD VC1 1 BSP GET BITS09 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS09	 0x5124, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS10	0x5128 /* MFD VC1 1 BSP GET BITS10 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS10	 0x5128, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS11	0x512c /* MFD VC1 1 BSP GET BITS11 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS11	 0x512c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS12	0x5130 /* MFD VC1 1 BSP GET BITS12 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS12	 0x5130, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS13	0x5134 /* MFD VC1 1 BSP GET BITS13 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS13	 0x5134, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS14	0x5138 /* MFD VC1 1 BSP GET BITS14 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS14	 0x5138, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS15	0x513c /* MFD VC1 1 BSP GET BITS15 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS15	 0x513c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS16	0x5140 /* MFD VC1 1 BSP GET BITS16 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS16	 0x5140, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS17	0x5144 /* MFD VC1 1 BSP GET BITS17 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS17	 0x5144, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS18	0x5148 /* MFD VC1 1 BSP GET BITS18 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS18	 0x5148, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS19	0x514c /* MFD VC1 1 BSP GET BITS19 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS19	 0x514c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS20	0x5150 /* MFD VC1 1 BSP GET BITS20 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS20	 0x5150, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS21	0x5154 /* MFD VC1 1 BSP GET BITS21 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS21	 0x5154, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS22	0x5158 /* MFD VC1 1 BSP GET BITS22 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS22	 0x5158, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS23	0x515c /* MFD VC1 1 BSP GET BITS23 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS23	 0x515c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS24	0x5160 /* MFD VC1 1 BSP GET BITS24 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS24	 0x5160, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS25	0x5164 /* MFD VC1 1 BSP GET BITS25 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS25	 0x5164, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS26	0x5168 /* MFD VC1 1 BSP GET BITS26 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS26	 0x5168, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS27	0x516c /* MFD VC1 1 BSP GET BITS27 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS27	 0x516c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS28	0x5170 /* MFD VC1 1 BSP GET BITS28 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS28	 0x5170, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS29	0x5174 /* MFD VC1 1 BSP GET BITS29 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS29	 0x5174, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS30	0x5178 /* MFD VC1 1 BSP GET BITS30 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS30	 0x5178, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_GET_BITS31	0x517c /* MFD VC1 1 BSP GET BITS31 */ 
	#define BITFIELD_MFD_VC1_1_BSP_GET_BITS31	 0x517c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_STATUS	0x5180 /* MFD VC1 1 BSP STATUS */ 
	#define BITFIELD_MFD_VC1_1_BSP_STATUS	 0x5180, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_CTRL	0x5184 /* MFD VC1 1 BSP CTRL */ 
	#define BITFIELD_MFD_VC1_1_BSP_CTRL	 0x5184, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_SHOW_BITS	0x5188 /* MFD VC1 1 BSP SHOW BITS */ 
	#define BITFIELD_MFD_VC1_1_BSP_SHOW_BITS	 0x5188, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_SHOW_BITS_FLPD	0x518c /* MFD VC1 1 BSP SHOW BITS FLPD */ 
	#define BITFIELD_MFD_VC1_1_BSP_SHOW_BITS_FLPD	 0x518c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_IGNORE_BBB_LEVEL	0x5190 /* MFD VC1 1 BSP IGNORE BBB LEVEL */ 
	#define BITFIELD_MFD_VC1_1_BSP_IGNORE_BBB_LEVEL	 0x5190, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_HEADER_VLC_PTYPE	0x51c0 /* MFD VC1 1 BSP HEADER VLC PTYPE */ 
	#define BITFIELD_MFD_VC1_1_BSP_HEADER_VLC_PTYPE	 0x51c0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_HEADER_VLC_FTYPE	0x51c4 /* MFD VC1 1 BSP HEADER VLC FTYPE */ 
	#define BITFIELD_MFD_VC1_1_BSP_HEADER_VLC_FTYPE	 0x51c4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_HEADER_VLC_MVRANGE	0x51c8 /* MFD VC1 1 BSP HEADER VLC MVRANGE */ 
	#define BITFIELD_MFD_VC1_1_BSP_HEADER_VLC_MVRANGE	 0x51c8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_HEADER_VLC_MVMODE	0x51cc /* MFD VC1 1 BSP HEADER VLC MVMODE */ 
	#define BITFIELD_MFD_VC1_1_BSP_HEADER_VLC_MVMODE	 0x51cc, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_HEADER_VLC_MVMODE2	0x51d0 /* MFD VC1 1 BSP HEADER VLC MVMODE2 */ 
	#define BITFIELD_MFD_VC1_1_BSP_HEADER_VLC_MVMODE2	 0x51d0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_HEADER_VLC_DMVRANGE	0x51d4 /* MFD VC1 1 BSP HEADER VLC DMVRANGE */ 
	#define BITFIELD_MFD_VC1_1_BSP_HEADER_VLC_DMVRANGE	 0x51d4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_HEADER_VLC_BPPMODE	0x51d8 /* MFD VC1 1 BSP HEADER VLC BPPMODE */ 
	#define BITFIELD_MFD_VC1_1_BSP_HEADER_VLC_BPPMODE	 0x51d8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_HEADER_VLC_BPPVLC2	0x51dc /* MFD VC1 1 BSP HEADER VLC BPPVLC2 */ 
	#define BITFIELD_MFD_VC1_1_BSP_HEADER_VLC_BPPVLC2	 0x51dc, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_HEADER_VLC_BPPVLC6	0x51e0 /* MFD VC1 1 BSP HEADER VLC BPPVLC6 */ 
	#define BITFIELD_MFD_VC1_1_BSP_HEADER_VLC_BPPVLC6	 0x51e0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_HEADER_VLC_BFRACT	0x51e4 /* MFD VC1 1 BSP HEADER VLC BFRACT */ 
	#define BITFIELD_MFD_VC1_1_BSP_HEADER_VLC_BFRACT	 0x51e4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BSP_HEADER_VLC_REFDIST	0x51e8 /* MFD VC1 1 BSP HEADER VLC REFDIST */ 
	#define BITFIELD_MFD_VC1_1_BSP_HEADER_VLC_REFDIST	 0x51e8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_GENERAL_CORE_CONFIG	0x5200 /* MFD VC1 1 SEQPIC GENERAL CORE CONFIG */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_GENERAL_CORE_CONFIG	 0x5200, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_STREAM_FORMAT_1	0x5204 /* MFD VC1 1 SEQPIC STREAM FORMAT 1 */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_STREAM_FORMAT_1	 0x5204, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_CODED_SIZE	0x5208 /* MFD VC1 1 SEQPIC CODED SIZE */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_CODED_SIZE	 0x5208, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_STREAM_FORMAT_2	0x520c /* MFD VC1 1 SEQPIC STREAM FORMAT 2 */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_STREAM_FORMAT_2	 0x520c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_ENTRY_POINT_1	0x5210 /* MFD VC1 1 SEQPIC ENTRY POINT 1 */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_ENTRY_POINT_1	 0x5210, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_RANGE_MAP	0x5214 /* MFD VC1 1 SEQPIC RANGE MAP */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_RANGE_MAP	 0x5214, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_FRAME_TYPE	0x5218 /* MFD VC1 1 SEQPIC FRAME TYPE */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_FRAME_TYPE	 0x5218, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_RECON_CONTROL	0x521c /* MFD VC1 1 SEQPIC RECON CONTROL */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_RECON_CONTROL	 0x521c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_MOTION_VECTOR_CONTROL	0x5220 /* MFD VC1 1 SEQPIC MOTION VECTOR CONTROL */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_MOTION_VECTOR_CONTROL	 0x5220, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_INTENSITY_COMPENSATION	0x5224 /* MFD VC1 1 SEQPIC INTENSITY COMPENSATION */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_INTENSITY_COMPENSATION	 0x5224, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_REFERENCE_B_FRACTION	0x5228 /* MFD VC1 1 SEQPIC REFERENCE B FRACTION */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_REFERENCE_B_FRACTION	 0x5228, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_BLOCK_CONTROL	0x522c /* MFD VC1 1 SEQPIC BLOCK CONTROL */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_BLOCK_CONTROL	 0x522c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_TRANSFORM_DATA	0x5230 /* MFD VC1 1 SEQPIC TRANSFORM DATA */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_TRANSFORM_DATA	 0x5230, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_VOP_DEQUANT	0x5234 /* MFD VC1 1 SEQPIC VOP DEQUANT */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_VOP_DEQUANT	 0x5234, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_CURR_FRAME_ID	0x5238 /* MFD VC1 1 SEQPIC CURR FRAME ID */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_CURR_FRAME_ID	 0x5238, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_CURR_DISPLAY_ID	0x523c /* MFD VC1 1 SEQPIC CURR DISPLAY ID */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_CURR_DISPLAY_ID	 0x523c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_FWD_REF_FRAME_ID	0x5240 /* MFD VC1 1 SEQPIC FWD REF FRAME ID */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_FWD_REF_FRAME_ID	 0x5240, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_BWD_REF_FRAME_ID	0x5244 /* MFD VC1 1 SEQPIC BWD REF FRAME ID */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_BWD_REF_FRAME_ID	 0x5244, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_FIELD_REF_FRAME_ID	0x5248 /* MFD VC1 1 SEQPIC FIELD REF FRAME ID */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_FIELD_REF_FRAME_ID	 0x5248, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_AUX_FRAME_CONTROL	0x524c /* MFD VC1 1 SEQPIC AUX FRAME CONTROL */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_AUX_FRAME_CONTROL	 0x524c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_IMAGE_STRUCTURE	0x5250 /* MFD VC1 1 SEQPIC IMAGE STRUCTURE */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_IMAGE_STRUCTURE	 0x5250, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SEQPIC_ALT_FRAME_TYPE	0x5254 /* MFD VC1 1 SEQPIC ALT FRAME TYPE */ 
	#define BITFIELD_MFD_VC1_1_SEQPIC_ALT_FRAME_TYPE	 0x5254, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_MBDEC_STATUS	0x5300 /* MFD VC1 1 MBDEC STATUS */ 
	#define BITFIELD_MFD_VC1_1_MBDEC_STATUS	 0x5300, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_MBDEC_FRAME_START	0x5304 /* MFD VC1 1 MBDEC FRAME START */ 
	#define BITFIELD_MFD_VC1_1_MBDEC_FRAME_START	 0x5304, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_MBDEC_FW_DEBUG	0x5308 /* MFD VC1 1 MBDEC FW DEBUG */ 
	#define BITFIELD_MFD_VC1_1_MBDEC_FW_DEBUG	 0x5308, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_MBDEC_MBQDEBUG	0x530c /* MFD VC1 1 MBDEC MBQDEBUG */ 
	#define BITFIELD_MFD_VC1_1_MBDEC_MBQDEBUG	 0x530c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_MBDEC_MPRDEBUG	0x5310 /* MFD VC1 1 MBDEC MPRDEBUG */ 
	#define BITFIELD_MFD_VC1_1_MBDEC_MPRDEBUG	 0x5310, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_MBDEC_MASDEBUG	0x5314 /* MFD VC1 1 MBDEC MASDEBUG */ 
	#define BITFIELD_MFD_VC1_1_MBDEC_MASDEBUG	 0x5314, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_MBDEC_BPPDEBUG	0x5318 /* MFD VC1 1 MBDEC BPPDEBUG */ 
	#define BITFIELD_MFD_VC1_1_MBDEC_BPPDEBUG	 0x5318, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_MBDEC_DPBMCDEBUG	0x531c /* MFD VC1 1 MBDEC DPBMCDEBUG */ 
	#define BITFIELD_MFD_VC1_1_MBDEC_DPBMCDEBUG	 0x531c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_MBDEC_GENDEBUG	0x5320 /* MFD VC1 1 MBDEC GENDEBUG */ 
	#define BITFIELD_MFD_VC1_1_MBDEC_GENDEBUG	 0x5320, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_FW_DEBUG	0x5324 /* MFD VC1 1 FW DEBUG */ 
	#define BITFIELD_MFD_VC1_1_FW_DEBUG	 0x5324, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_MBDEC_ERROR_CONCEAL_CONTROL	0x5340 /* MFD VC1 1 MBDEC ERROR CONCEAL CONTROL */ 
	#define BITFIELD_MFD_VC1_1_MBDEC_ERROR_CONCEAL_CONTROL	 0x5340, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BP_CONTROL_STATUS	0x5400 /* MFD VC1 1 BP CONTROL STATUS */ 
	#define BITFIELD_MFD_VC1_1_BP_CONTROL_STATUS	 0x5400, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BP_DATA_IN_STATUS	0x5404 /* MFD VC1 1 BP DATA IN STATUS */ 
	#define BITFIELD_MFD_VC1_1_BP_DATA_IN_STATUS	 0x5404, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BP_DATA_IN_VALUE	0x5408 /* MFD VC1 1 BP DATA IN VALUE */ 
	#define BITFIELD_MFD_VC1_1_BP_DATA_IN_VALUE	 0x5408, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_BP_DATA_IN_POSITION_N_SIZE	0x540c /* MFD VC1 1 BP DATA IN POSITION N SIZE */ 
	#define BITFIELD_MFD_VC1_1_BP_DATA_IN_POSITION_N_SIZE	 0x540c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_MBA_ENABLE	0x5800 /* MFD VC1 1 MBA ENABLE */ 
	#define BITFIELD_MFD_VC1_1_MBA_ENABLE	 0x5800, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_RSB_DDR_BA	0x5808 /* MFD VC1 1 RSB DDR BA */ 
	#define BITFIELD_MFD_VC1_1_RSB_DDR_BA	 0x5808, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DEC_STATUS	0x580c /* MFD VC1 1 DEC STATUS */ 
	#define BITFIELD_MFD_VC1_1_DEC_STATUS	 0x580c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SIF_SMP_RS	0x5810 /* MFD VC1 1 SIF SMP RS */ 
	#define BITFIELD_MFD_VC1_1_SIF_SMP_RS	 0x5810, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SIF_MSK_RS	0x5814 /* MFD VC1 1 SIF MSK RS */ 
	#define BITFIELD_MFD_VC1_1_SIF_MSK_RS	 0x5814, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SIF_HDAT	0x5818 /* MFD VC1 1 SIF HDAT */ 
	#define BITFIELD_MFD_VC1_1_SIF_HDAT	 0x5818, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SIF_SDDAT	0x581c /* MFD VC1 1 SIF SDDAT */ 
	#define BITFIELD_MFD_VC1_1_SIF_SDDAT	 0x581c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SIF_SMP_RC	0x5820 /* MFD VC1 1 SIF SMP RC */ 
	#define BITFIELD_MFD_VC1_1_SIF_SMP_RC	 0x5820, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SIF_MSK_RC	0x5824 /* MFD VC1 1 SIF MSK RC */ 
	#define BITFIELD_MFD_VC1_1_SIF_MSK_RC	 0x5824, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SED	0x5900 /* MFD VC1 1 SED */ 
	#define BITFIELD_MFD_VC1_1_SED	 0x5900, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SDEMC	0x5904 /* MFD VC1 1 SDEMC */ 
	#define BITFIELD_MFD_VC1_1_SDEMC	 0x5904, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DMA_CB_BASE	0x5908 /* MFD VC1 1 DMA CB BASE */ 
	#define BITFIELD_MFD_VC1_1_DMA_CB_BASE	 0x5908, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DMA_SB_RDPTR	0x590c /* MFD VC1 1 DMA SB RDPTR */ 
	#define BITFIELD_MFD_VC1_1_DMA_SB_RDPTR	 0x590c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DMA_CB_SIZE	0x5910 /* MFD VC1 1 DMA CB SIZE */ 
	#define BITFIELD_MFD_VC1_1_DMA_CB_SIZE	 0x5910, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DMA_WTRMARK	0x5914 /* MFD VC1 1 DMA WTRMARK */ 
	#define BITFIELD_MFD_VC1_1_DMA_WTRMARK	 0x5914, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DMA_WDT	0x5918 /* MFD VC1 1 DMA WDT */ 
	#define BITFIELD_MFD_VC1_1_DMA_WDT	 0x5918, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DMA_CB_RDPTR	0x591c /* MFD VC1 1 DMA CB RDPTR */ 
	#define BITFIELD_MFD_VC1_1_DMA_CB_RDPTR	 0x591c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DMA_CB_WRPTR	0x5920 /* MFD VC1 1 DMA CB WRPTR */ 
	#define BITFIELD_MFD_VC1_1_DMA_CB_WRPTR	 0x5920, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DMA_SDLINK	0x5924 /* MFD VC1 1 DMA SDLINK */ 
	#define BITFIELD_MFD_VC1_1_DMA_SDLINK	 0x5924, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DMA_SDLLSA	0x5928 /* MFD VC1 1 DMA SDLLSA */ 
	#define BITFIELD_MFD_VC1_1_DMA_SDLLSA	 0x5928, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DMA_SDLNDA	0x592c /* MFD VC1 1 DMA SDLNDA */ 
	#define BITFIELD_MFD_VC1_1_DMA_SDLNDA	 0x592c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DMA_SDLDBC	0x5930 /* MFD VC1 1 DMA SDLDBC */ 
	#define BITFIELD_MFD_VC1_1_DMA_SDLDBC	 0x5930, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DMA_SDLCBC	0x5934 /* MFD VC1 1 DMA SDLCBC */ 
	#define BITFIELD_MFD_VC1_1_DMA_SDLCBC	 0x5934, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DMA_SDLDC	0x5938 /* MFD VC1 1 DMA SDLDC */ 
	#define BITFIELD_MFD_VC1_1_DMA_SDLDC	 0x5938, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DMA_FIFO	0x593c /* MFD VC1 1 DMA FIFO */ 
	#define BITFIELD_MFD_VC1_1_DMA_FIFO	 0x593c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DMA_FIFO_STAT	0x5940 /* MFD VC1 1 DMA FIFO STAT */ 
	#define BITFIELD_MFD_VC1_1_DMA_FIFO_STAT	 0x5940, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DMA_INT_EN	0x5944 /* MFD VC1 1 DMA INT EN */ 
	#define BITFIELD_MFD_VC1_1_DMA_INT_EN	 0x5944, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DMA_INT_STAT	0x5948 /* MFD VC1 1 DMA INT STAT */ 
	#define BITFIELD_MFD_VC1_1_DMA_INT_STAT	 0x5948, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_DMA_BS_CNTR	0x594c /* MFD VC1 1 DMA BS CNTR */ 
	#define BITFIELD_MFD_VC1_1_DMA_BS_CNTR	 0x594c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SCD_XCR	0x5a00 /* MFD VC1 1 SCD XCR */ 
	#define BITFIELD_MFD_VC1_1_SCD_XCR	 0x5a00, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_1_SCD_XCR */
	#define BLSB_MFD_VC1_1_SCD_XCR_SCDFWEN	24
	/* Register Bit Widths for MFD_VC1_1_SCD_XCR */
	#define BWID_MFD_VC1_1_SCD_XCR_SCDFWEN	1
	/* Register Bit MASKS for MFD_VC1_1_SCD_XCR */
	#define BMSK_MFD_VC1_1_SCD_XCR_SCDFWEN	(1<<24) /* == 0x01000000: SCD FW Mode Enable */
	/* Register BITFIELD for MFD_VC1_1_SCD_XCR - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_1_SCD_XCR_SCDFWEN	 0x5a00, 24, 1, 0x01000000
#define ROFF_MFD_VC1_1_SCD_XSCR1	0x5a04 /* MFD VC1 1 SCD XSCR1 */ 
	#define BITFIELD_MFD_VC1_1_SCD_XSCR1	 0x5a04, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SCD_XSCR2	0x5a08 /* MFD VC1 1 SCD XSCR2 */ 
	#define BITFIELD_MFD_VC1_1_SCD_XSCR2	 0x5a08, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SCD_FWPREAD	0x5a0c /* MFD VC1 1 SCD FWPREAD */ 
	#define BITFIELD_MFD_VC1_1_SCD_FWPREAD	 0x5a0c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SCD_FWCRTL	0x5a10 /* MFD VC1 1 SCD FWCRTL */ 
	#define BITFIELD_MFD_VC1_1_SCD_FWCRTL	 0x5a10, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_VC1_1_SCD_FWCRTL */
	#define BLSB_MFD_VC1_1_SCD_FWCRTL_GET_BYTE	31
	#define BLSB_MFD_VC1_1_SCD_FWCRTL_PYLD_REL	30
	#define BLSB_MFD_VC1_1_SCD_FWCRTL_PIPE_DFLUSH	29
	#define BLSB_MFD_VC1_1_SCD_FWCRTL_RESERVED2	28
	#define BLSB_MFD_VC1_1_SCD_FWCRTL_RESERVED1	18
	#define BLSB_MFD_VC1_1_SCD_FWCRTL_STREAM_MSK	17
	#define BLSB_MFD_VC1_1_SCD_FWCRTL_SC_DET_ALL	16
	#define BLSB_MFD_VC1_1_SCD_FWCRTL_RESERVED0	0
	/* Register Bit Widths for MFD_VC1_1_SCD_FWCRTL */
	#define BWID_MFD_VC1_1_SCD_FWCRTL_GET_BYTE	1
	#define BWID_MFD_VC1_1_SCD_FWCRTL_PYLD_REL	1
	#define BWID_MFD_VC1_1_SCD_FWCRTL_PIPE_DFLUSH	1
	#define BWID_MFD_VC1_1_SCD_FWCRTL_RESERVED2	1
	#define BWID_MFD_VC1_1_SCD_FWCRTL_RESERVED1	10
	#define BWID_MFD_VC1_1_SCD_FWCRTL_STREAM_MSK	1
	#define BWID_MFD_VC1_1_SCD_FWCRTL_SC_DET_ALL	1
	#define BWID_MFD_VC1_1_SCD_FWCRTL_RESERVED0	16
	/* Register Bit MASKS for MFD_VC1_1_SCD_FWCRTL */
	#define BMSK_MFD_VC1_1_SCD_FWCRTL_GET_BYTE	(1<<31) /* == 0x80000000: initiate single byte pop pf pipeline registers */
	#define BMSK_MFD_VC1_1_SCD_FWCRTL_PYLD_REL	(1<<30) /* == 0x40000000: Release payload bytes */
	#define BMSK_MFD_VC1_1_SCD_FWCRTL_PIPE_DFLUSH	(1<<29) /* == 0x20000000: Flush captured SC */
	#define BMSK_MFD_VC1_1_SCD_FWCRTL_RESERVED2	(1<<28) /* == 0x10000000: Reserved */
	#define BMSK_MFD_VC1_1_SCD_FWCRTL_RESERVED1	0x0ffc0000 /* Reserved */
	#define BMSK_MFD_VC1_1_SCD_FWCRTL_STREAM_MSK	(1<<17) /* == 0x00020000: mask byte stream data to the decoder */
	#define BMSK_MFD_VC1_1_SCD_FWCRTL_SC_DET_ALL	(1<<16) /* == 0x00010000: SCD detects all start codes */
	#define BMSK_MFD_VC1_1_SCD_FWCRTL_RESERVED0	0x0000ffff /* Reserved */
	/* Register BITFIELD for MFD_VC1_1_SCD_FWCRTL - roff, lsb, width, mask */
	#define BITFIELD_MFD_VC1_1_SCD_FWCRTL_GET_BYTE	 0x5a10, 31, 1, 0x80000000
	#define BITFIELD_MFD_VC1_1_SCD_FWCRTL_PYLD_REL	 0x5a10, 30, 1, 0x40000000
	#define BITFIELD_MFD_VC1_1_SCD_FWCRTL_PIPE_DFLUSH	 0x5a10, 29, 1, 0x20000000
	#define BITFIELD_MFD_VC1_1_SCD_FWCRTL_RESERVED2	 0x5a10, 28, 1, 0x10000000
	#define BITFIELD_MFD_VC1_1_SCD_FWCRTL_RESERVED1	 0x5a10, 18, 10, 0x0ffc0000
	#define BITFIELD_MFD_VC1_1_SCD_FWCRTL_STREAM_MSK	 0x5a10, 17, 1, 0x00020000
	#define BITFIELD_MFD_VC1_1_SCD_FWCRTL_SC_DET_ALL	 0x5a10, 16, 1, 0x00010000
	#define BITFIELD_MFD_VC1_1_SCD_FWCRTL_RESERVED0	 0x5a10, 0, 16, 0x0000ffff
#define ROFF_MFD_VC1_1_SCD_FWSTAT	0x5a14 /* MFD VC1 1 SCD FWSTAT */ 
	#define BITFIELD_MFD_VC1_1_SCD_FWSTAT	 0x5a14, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SCD_WRCTRL	0x5a18 /* MFD VC1 1 SCD WRCTRL */ 
	#define BITFIELD_MFD_VC1_1_SCD_WRCTRL	 0x5a18, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_SCD_WRDATA	0x5a1c /* MFD VC1 1 SCD WRDATA */ 
	#define BITFIELD_MFD_VC1_1_SCD_WRDATA	 0x5a1c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_PIP_CTRL	0x5b00 /* MFD VC1 1 PIP CTRL */ 
	#define BITFIELD_MFD_VC1_1_PIP_CTRL	 0x5b00, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_PIP_STAT	0x5b04 /* MFD VC1 1 PIP STAT */ 
	#define BITFIELD_MFD_VC1_1_PIP_STAT	 0x5b04, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_PIP_CDYB	0x5b08 /* MFD VC1 1 PIP CDYB */ 
	#define BITFIELD_MFD_VC1_1_PIP_CDYB	 0x5b08, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_PIP_CDUB	0x5b0c /* MFD VC1 1 PIP CDUB */ 
	#define BITFIELD_MFD_VC1_1_PIP_CDUB	 0x5b0c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_PIP_TST_CTRL	0x5b10 /* MFD VC1 1 PIP TST CTRL */ 
	#define BITFIELD_MFD_VC1_1_PIP_TST_CTRL	 0x5b10, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_PIP_TST_WR_DATA_LO	0x5b14 /* MFD VC1 1 PIP TST WR DATA LO */ 
	#define BITFIELD_MFD_VC1_1_PIP_TST_WR_DATA_LO	 0x5b14, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VC1_1_PIP_TST_WR_DATA_HI	0x5b18 /* MFD VC1 1 PIP TST WR DATA HI */ 
	#define BITFIELD_MFD_VC1_1_PIP_TST_WR_DATA_HI	 0x5b18, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_IMEM	0x6000 /* BSP RISC Instruction Memory */ 
	#define BITFIELD_MFD_MPG4VD_BSP_IMEM	 0x6000, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DMEM	0x6400 /* BSP RISC Data Memory */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DMEM	 0x6400, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_RISC_CTRL	0x6500 /* BSP RISC Control */ 
	#define BITFIELD_MFD_MPG4VD_BSP_RISC_CTRL	 0x6500, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_RISC_STATUS	0x6504 /* BSP RISC Status */ 
	#define BITFIELD_MFD_MPG4VD_BSP_RISC_STATUS	 0x6504, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_IRQ_STATUS	0x6508 /* BSP RISC IRQ Status */ 
	#define BITFIELD_MFD_MPG4VD_BSP_IRQ_STATUS	 0x6508, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_IRQ_MASK	0x650c /* BSP RISC IRQ Mask */ 
	#define BITFIELD_MFD_MPG4VD_BSP_IRQ_MASK	 0x650c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_IPC_STATUS	0x6510 /* BSP RISC IPC Status */ 
	#define BITFIELD_MFD_MPG4VD_BSP_IPC_STATUS	 0x6510, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_HOST_DB_CMD	0x6514 /* BSP RISC to Host Doorbell Command */ 
	#define BITFIELD_MFD_MPG4VD_BSP_HOST_DB_CMD	 0x6514, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_RISC_DB_CMD	0x6518 /* BSP Host to RISC Doorbell Command */ 
	#define BITFIELD_MFD_MPG4VD_BSP_RISC_DB_CMD	 0x6518, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_IMEM_PAGE	0x651c /* BSP RISC Instruction Memory Page */ 
	#define BITFIELD_MFD_MPG4VD_BSP_IMEM_PAGE	 0x651c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DMEM_PAGE	0x6520 /* BSP RISC Data Memory Page */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DMEM_PAGE	 0x6520, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_MMR_ADDR	0x6524 /* BSP Coprocessor MMR Address */ 
	#define BITFIELD_MFD_MPG4VD_BSP_MMR_ADDR	 0x6524, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_MMR_DATA	0x6528 /* BSP Coprocessor MMR Data */ 
	#define BITFIELD_MFD_MPG4VD_BSP_MMR_DATA	 0x6528, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_FRAME_INFO	0x652c /* BSP Coprocessor Frame Info */ 
	#define BITFIELD_MFD_MPG4VD_BSP_FRAME_INFO	 0x652c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_RF_ACC_ADDR	0x6538 /* BSP Debugger Register File Access Address */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_RF_ACC_ADDR	 0x6538, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_RF_ACC	0x653c /* BSP Debugger Register File Access */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_RF_ACC	 0x653c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_FETCH_PC	0x6540 /* BSP Debugger Fetch Stage Program Counter */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_FETCH_PC	 0x6540, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_FETCH_STATUS	0x6544 /* BSP Debugger Fetch Stage Status */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_FETCH_STATUS	 0x6544, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_DEC_PC	0x6548 /* BSP Debugger Decode Stage Program Counter */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_DEC_PC	 0x6548, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_DEC_INSTR	0x654c /* BSP Debugger Decode Stage Instruction */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_DEC_INSTR	 0x654c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_DEC_STATUS	0x6550 /* BSP Debugger Decode Stage Status */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_DEC_STATUS	 0x6550, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_EXEC_PC	0x6554 /* BSP Debugger Execute Stage Program Counter */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_EXEC_PC	 0x6554, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_EXEC_INSTR	0x6558 /* BSP Debugger Execute Stage Instruction */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_EXEC_INSTR	 0x6558, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_EXEC_STATUS	0x655c /* BSP Debugger execute Stage Status */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_EXEC_STATUS	 0x655c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_MEM_STATUS	0x6560 /* BSP debugger Memory Stage Status */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_MEM_STATUS	 0x6560, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_WR_STATUS	0x6564 /* BSP Debugger Write Stage Status */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_WR_STATUS	 0x6564, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_CTRL	0x6568 /* BSP Debugger Control */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_CTRL	 0x6568, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_STATUS	0x656c /* BSP Debugger Status */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_STATUS	 0x656c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_PC_BP0	0x6570 /* BSP Debugger Program Counter Breakpoint 0 */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_PC_BP0	 0x6570, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_PC_BP1	0x6574 /* BSP Debugger Program Counter Breakpoint 1 */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_PC_BP1	 0x6574, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_PC_BP2	0x6578 /* BSP Debugger Program Counter Breakpoint 2 */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_PC_BP2	 0x6578, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_PC_BP3	0x657c /* BSP Debugger Program Counter Breakpoint 3 */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_PC_BP3	 0x657c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_PC_BP0_MASK	0x6580 /* BSP Debugger Program Counter Breakpoint 0 Mask */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_PC_BP0_MASK	 0x6580, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_PC_BP1_MASK	0x6584 /* BSP Debugger Program Counter Breakpoint 1 Mask */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_PC_BP1_MASK	 0x6584, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_PC_BP2_MASK	0x6588 /* BSP Debugger Program Counter Breakpoint 2 Mask */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_PC_BP2_MASK	 0x6588, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_PC_BP3_MASK	0x658c /* BSP Debugger Program Counter Breakpoint 3 Mask */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_PC_BP3_MASK	 0x658c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_DATA_BP0	0x6590 /* BSP Debugger Data Breakpoint 0 */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_DATA_BP0	 0x6590, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_DATA_BP1	0x6594 /* BSP Debugger Data Breakpoint 1 */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_DATA_BP1	 0x6594, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_DATA_BP2	0x6598 /* BSP Debugger Data Breakpoint 2 */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_DATA_BP2	 0x6598, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_DATA_BP3	0x659c /* BSP Debugger Data Breakpoint 3 */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_DATA_BP3	 0x659c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_DATA_BP0_MASK	0x65a0 /* BSP Debugger Data Breakpoint 0 Mask */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_DATA_BP0_MASK	 0x65a0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_DATA_BP1_MASK	0x65a4 /* BSP Debugger Data Breakpoint 1 Mask */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_DATA_BP1_MASK	 0x65a4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_DATA_BP2_MASK	0x65a8 /* BSP Debugger Data Breakpoint 2 Mask */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_DATA_BP2_MASK	 0x65a8, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_BSP_DBG_DATA_BP3_MASK	0x65ac /* BSP Debugger Data Breakpoint 3 Mask */ 
	#define BITFIELD_MFD_MPG4VD_BSP_DBG_DATA_BP3_MASK	 0x65ac, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_INTR_STATUS	0x6604 /* Interrupt Status */ 
	#define BITFIELD_MFD_MPG4VD_INTR_STATUS	 0x6604, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_INTR_MASK	0x6608 /* Interrupt Mask */ 
	#define BITFIELD_MFD_MPG4VD_INTR_MASK	 0x6608, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_CFG	0x660c /* Configuration  */ 
	#define BITFIELD_MFD_MPG4VD_CFG	 0x660c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_MB_PER_ROW	0x6610 /* Number of Macroblocks Per Row */ 
	#define BITFIELD_MFD_MPG4VD_MB_PER_ROW	 0x6610, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_MB_ROWS	0x6614 /* Number of Macroblocks Rows */ 
	#define BITFIELD_MFD_MPG4VD_MB_ROWS	 0x6614, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_IQ_TABLE_WRDATA	0x6618 /* Inverse Quant Table Write Data */ 
	#define BITFIELD_MFD_MPG4VD_IQ_TABLE_WRDATA	 0x6618, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_Y0_BASE_ADDR	0x661c /* Luma Buffer 0 Base Address */ 
	#define BITFIELD_MFD_MPG4VD_Y0_BASE_ADDR	 0x661c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_Y1_BASE_ADDR	0x6620 /* Luma Buffer 1 Base Address */ 
	#define BITFIELD_MFD_MPG4VD_Y1_BASE_ADDR	 0x6620, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_Y2_BASE_ADDR	0x6624 /* Luma Buffer 2 Base Address */ 
	#define BITFIELD_MFD_MPG4VD_Y2_BASE_ADDR	 0x6624, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_Y3_BASE_ADDR	0x6628 /* Luma Buffer 3 Base Address */ 
	#define BITFIELD_MFD_MPG4VD_Y3_BASE_ADDR	 0x6628, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_C0_BASE_ADDR	0x662c /* Chroma Buffer 0 Base Address */ 
	#define BITFIELD_MFD_MPG4VD_C0_BASE_ADDR	 0x662c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_C1_BASE_ADDR	0x6630 /* Chroma Buffer 1 Base Address */ 
	#define BITFIELD_MFD_MPG4VD_C1_BASE_ADDR	 0x6630, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_C2_BASE_ADDR	0x6634 /* Chroma Buffer 2 Base Address */ 
	#define BITFIELD_MFD_MPG4VD_C2_BASE_ADDR	 0x6634, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_C3_BASE_ADDR	0x6638 /* Chroma Buffer 3 Base Address */ 
	#define BITFIELD_MFD_MPG4VD_C3_BASE_ADDR	 0x6638, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_MBI0_BASE_ADDR	0x663c /* MB Info Buffer 0 Base Address */ 
	#define BITFIELD_MFD_MPG4VD_MBI0_BASE_ADDR	 0x663c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_MBI1_BASE_ADDR	0x6640 /* MB Info Buffer 1 Base Address */ 
	#define BITFIELD_MFD_MPG4VD_MBI1_BASE_ADDR	 0x6640, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_MBI2_BASE_ADDR	0x6644 /* MB Info Buffer 2 Base Address */ 
	#define BITFIELD_MFD_MPG4VD_MBI2_BASE_ADDR	 0x6644, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_MBI3_BASE_ADDR	0x6648 /* MB Info Buffer 3 Base Address */ 
	#define BITFIELD_MFD_MPG4VD_MBI3_BASE_ADDR	 0x6648, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DBI0_BASE_ADDR	0x664c /* DB Info Buffer 0 Base Address */ 
	#define BITFIELD_MFD_MPG4VD_DBI0_BASE_ADDR	 0x664c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DBI1_BASE_ADDR	0x6650 /* DB Info Buffer 1 Base Address */ 
	#define BITFIELD_MFD_MPG4VD_DBI1_BASE_ADDR	 0x6650, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DBI2_BASE_ADDR	0x6654 /* DB Info Buffer 2 Base Address */ 
	#define BITFIELD_MFD_MPG4VD_DBI2_BASE_ADDR	 0x6654, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DBI3_BASE_ADDR	0x6658 /* DB Info Buffer 3 Base Address */ 
	#define BITFIELD_MFD_MPG4VD_DBI3_BASE_ADDR	 0x6658, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_IPB_BASE_ADDR	0x665c /* AC Intra-Prediction Buffer Base Address */ 
	#define BITFIELD_MFD_MPG4VD_IPB_BASE_ADDR	 0x665c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_PDMA_CFG	0x6660 /* Pixel DMA Configuration */ 
	#define BITFIELD_MFD_MPG4VD_PDMA_CFG	 0x6660, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_PDMA_STATUS	0x6664 /* Pixel DMA Status */ 
	#define BITFIELD_MFD_MPG4VD_PDMA_STATUS	 0x6664, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_FFLS0_PKTCNT	0x6680 /* FFLS0 Packet Count */ 
	#define BITFIELD_MFD_MPG4VD_FFLS0_PKTCNT	 0x6680, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_FFLS1_PKTCNT	0x6684 /* FFLS1 Packet Count */ 
	#define BITFIELD_MFD_MPG4VD_FFLS1_PKTCNT	 0x6684, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_FFLS2_PKTCNT	0x6688 /* FFLS2 Packet Count */ 
	#define BITFIELD_MFD_MPG4VD_FFLS2_PKTCNT	 0x6688, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_FFLS3_PKTCNT	0x668c /* FFLS3 Packet Count */ 
	#define BITFIELD_MFD_MPG4VD_FFLS3_PKTCNT	 0x668c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_FFLS4_PKTCNT	0x6690 /* FFLS4 Packet Count */ 
	#define BITFIELD_MFD_MPG4VD_FFLS4_PKTCNT	 0x6690, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_FFLS5_PKTCNT	0x6694 /* FFLS5 Packet Count */ 
	#define BITFIELD_MFD_MPG4VD_FFLS5_PKTCNT	 0x6694, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_FFLS6_PKTCNT	0x6698 /* FFLS6 Packet Count */ 
	#define BITFIELD_MFD_MPG4VD_FFLS6_PKTCNT	 0x6698, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_FFLS7_PKTCNT	0x669c /* FFLS7 Packet Count */ 
	#define BITFIELD_MFD_MPG4VD_FFLS7_PKTCNT	 0x669c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_SED	0x6900 /* Stream Enable/Disable */ 
	#define BITFIELD_MFD_MPG4VD_SED	 0x6900, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_SDEMC	0x6904 /* Stream DMA Engine Master Control */ 
	#define BITFIELD_MFD_MPG4VD_SDEMC	 0x6904, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DMA_CB_BASE	0x6908 /* Stream DMA Circular/Linear Buffer Base Address */ 
	#define BITFIELD_MFD_MPG4VD_DMA_CB_BASE	 0x6908, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DMA_SB_RDPTR	0x690c /* Stream DMA Source Block Register Address of Read Pointer */ 
	#define BITFIELD_MFD_MPG4VD_DMA_SB_RDPTR	 0x690c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DMA_CB_SIZE	0x6910 /* Stream DMA Circular/Linear Buffer Size */ 
	#define BITFIELD_MFD_MPG4VD_DMA_CB_SIZE	 0x6910, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DMA_WTRMARK	0x6914 /* Stream DMA Read/Write Pointer Watermark */ 
	#define BITFIELD_MFD_MPG4VD_DMA_WTRMARK	 0x6914, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DMA_WDT	0x6918 /* Stream DMA Watchdog Timer */ 
	#define BITFIELD_MFD_MPG4VD_DMA_WDT	 0x6918, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DMA_CB_RDPTR	0x691c /* Stream DMA Local Read Pointer */ 
	#define BITFIELD_MFD_MPG4VD_DMA_CB_RDPTR	 0x691c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DMA_CB_WRPTR	0x6920 /* Stream DMA Local Write Pointer  */ 
	#define BITFIELD_MFD_MPG4VD_DMA_CB_WRPTR	 0x6920, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DMA_SDLINK	0x6924 /* Stream DMA Link Address  */ 
	#define BITFIELD_MFD_MPG4VD_DMA_SDLINK	 0x6924, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DMA_SDLLSA	0x6928 /* Stream DMA Link List Source Address */ 
	#define BITFIELD_MFD_MPG4VD_DMA_SDLLSA	 0x6928, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DMA_SDLNDA	0x692c /* Stream DMA Link List Next Descriptor Address */ 
	#define BITFIELD_MFD_MPG4VD_DMA_SDLNDA	 0x692c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DMA_SDLDBC	0x6930 /* Stream DMA Link List Data Buffer Byte Count */ 
	#define BITFIELD_MFD_MPG4VD_DMA_SDLDBC	 0x6930, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DMA_SDLCBC	0x6934 /* Stream DMA Link List Current Data Buffer Byte Count */ 
	#define BITFIELD_MFD_MPG4VD_DMA_SDLCBC	 0x6934, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DMA_SDLDC	0x6938 /* Stream DMA Link List Descriptor Control */ 
	#define BITFIELD_MFD_MPG4VD_DMA_SDLDC	 0x6938, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DMA_FIFO	0x693c /* Stream DMA FIFO Write Data */ 
	#define BITFIELD_MFD_MPG4VD_DMA_FIFO	 0x693c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DMA_FIFO_STAT	0x6940 /* Stream DMA FIFO Status  */ 
	#define BITFIELD_MFD_MPG4VD_DMA_FIFO_STAT	 0x6940, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DMA_INT_EN	0x6944 /* Stream DMA Interrupt Enable */ 
	#define BITFIELD_MFD_MPG4VD_DMA_INT_EN	 0x6944, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DMA_INT_STAT	0x6948 /* Stream DMA Interrupt Status */ 
	#define BITFIELD_MFD_MPG4VD_DMA_INT_STAT	 0x6948, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_DMA_BS_CNTR	0x694c /* Stream DMA Byte Stream Counter */ 
	#define BITFIELD_MFD_MPG4VD_DMA_BS_CNTR	 0x694c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_SCD_XCR	0x6a00 /* Start Code Detector Control Register */ 
	#define BITFIELD_MFD_MPG4VD_SCD_XCR	 0x6a00, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
	/* Register Bit LSB Positions for MFD_MPG4VD_SCD_XCR */
	#define BLSB_MFD_MPG4VD_SCD_XCR_SCDFWEN	24
	/* Register Bit Widths for MFD_MPG4VD_SCD_XCR */
	#define BWID_MFD_MPG4VD_SCD_XCR_SCDFWEN	1
	/* Register Bit MASKS for MFD_MPG4VD_SCD_XCR */
	#define BMSK_MFD_MPG4VD_SCD_XCR_SCDFWEN	(1<<24) /* == 0x01000000: SCD FW Mode Enable */
	/* Register BITFIELD for MFD_MPG4VD_SCD_XCR - roff, lsb, width, mask */
	#define BITFIELD_MFD_MPG4VD_SCD_XCR_SCDFWEN	 0x6a00, 24, 1, 0x01000000
#define ROFF_MFD_MPG4VD_SCD_XSCR1	0x6a04 /* Start Code Detector Programmable Start Codes 1 */ 
	#define BITFIELD_MFD_MPG4VD_SCD_XSCR1	 0x6a04, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_SCD_XSCR2	0x6a08 /* Start Code Detector Programmable Start Codes 2 */ 
	#define BITFIELD_MFD_MPG4VD_SCD_XSCR2	 0x6a08, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_SCD_FWPREAD	0x6a0c /* Start Code Detector Firmware Mode Peek Read */ 
	#define BITFIELD_MFD_MPG4VD_SCD_FWPREAD	 0x6a0c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_SCD_FWCTRL	0x6a10 /* Start Code Detector Firmware Mode Control */ 
	#define BITFIELD_MFD_MPG4VD_SCD_FWCTRL	 0x6a10, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_SCD_FWSTAT	0x6a14 /* Start Code Detector Firmware Mode Status */ 
	#define BITFIELD_MFD_MPG4VD_SCD_FWSTAT	 0x6a14, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_SCD_WRCTRL	0x6a18 /* Start Code Detector Write Data Control */ 
	#define BITFIELD_MFD_MPG4VD_SCD_WRCTRL	 0x6a18, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_SCD_WRDATA	0x6a1c /* Start Code Detector Write Data */ 
	#define BITFIELD_MFD_MPG4VD_SCD_WRDATA	 0x6a1c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_PIP_CTRL	0x6b00 /* PiP Control Register */ 
	#define BITFIELD_MFD_MPG4VD_PIP_CTRL	 0x6b00, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_PIP_STAT	0x6b04 /* PiP Status Register */ 
	#define BITFIELD_MFD_MPG4VD_PIP_STAT	 0x6b04, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_PIP_CDYB	0x6b08 /* PiP Current Decode Y Buffer Address */ 
	#define BITFIELD_MFD_MPG4VD_PIP_CDYB	 0x6b08, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_PIP_CDUB	0x6b0c /* PiP Current Decode UV Buffer Address */ 
	#define BITFIELD_MFD_MPG4VD_PIP_CDUB	 0x6b0c, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_PIP_TST_CTRL	0x6b10 /* PiP Test Control Register */ 
	#define BITFIELD_MFD_MPG4VD_PIP_TST_CTRL	 0x6b10, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_PIP_TST_WR_DATA_LO	0x6b14 /* PiP Test Data [31:0] Register */ 
	#define BITFIELD_MFD_MPG4VD_PIP_TST_WR_DATA_LO	 0x6b14, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_MPG4VD_PIP_TST_WR_DATA_HI	0x6b18 /* PiP Test Data [63:0] Register */ 
	#define BITFIELD_MFD_MPG4VD_PIP_TST_WR_DATA_HI	 0x6b18, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_FPC	0x7500 /* MFD VSPARC FPC */ 
	#define BITFIELD_MFD_VSPARC_FPC	 0x7500, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_FSTATUS	0x7508 /* MFD VSPARC FSTATUS */ 
	#define BITFIELD_MFD_VSPARC_FSTATUS	 0x7508, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_DPC	0x7510 /* MFD VSPARC DPC */ 
	#define BITFIELD_MFD_VSPARC_DPC	 0x7510, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_D_INST	0x7514 /* MFD VSPARC D INST */ 
	#define BITFIELD_MFD_VSPARC_D_INST	 0x7514, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_DSTATUS	0x7518 /* MFD VSPARC DSTATUS */ 
	#define BITFIELD_MFD_VSPARC_DSTATUS	 0x7518, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_EPC	0x7520 /* MFD VSPARC EPC */ 
	#define BITFIELD_MFD_VSPARC_EPC	 0x7520, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_E_INST	0x7524 /* MFD VSPARC E INST */ 
	#define BITFIELD_MFD_VSPARC_E_INST	 0x7524, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_ESTATUS	0x7528 /* MFD VSPARC ESTATUS */ 
	#define BITFIELD_MFD_VSPARC_ESTATUS	 0x7528, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_MSTATUS	0x7538 /* MFD VSPARC MSTATUS */ 
	#define BITFIELD_MFD_VSPARC_MSTATUS	 0x7538, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_WSTATUS	0x7548 /* MFD VSPARC WSTATUS */ 
	#define BITFIELD_MFD_VSPARC_WSTATUS	 0x7548, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_DCTRL	0x7600 /* MFD VSPARC DCTRL */ 
	#define BITFIELD_MFD_VSPARC_DCTRL	 0x7600, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_DSTAT	0x7604 /* MFD VSPARC DSTAT */ 
	#define BITFIELD_MFD_VSPARC_DSTAT	 0x7604, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_PCBREAK0	0x7680 /* MFD VSPARC PCBREAK0 */ 
	#define BITFIELD_MFD_VSPARC_PCBREAK0	 0x7680, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_PCBREAKMASK0	0x7684 /* MFD VSPARC PCBREAKMASK0 */ 
	#define BITFIELD_MFD_VSPARC_PCBREAKMASK0	 0x7684, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_PCBREAK1	0x7690 /* MFD VSPARC PCBREAK1 */ 
	#define BITFIELD_MFD_VSPARC_PCBREAK1	 0x7690, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_PCBREAKMASK1	0x7694 /* MFD VSPARC PCBREAKMASK1 */ 
	#define BITFIELD_MFD_VSPARC_PCBREAKMASK1	 0x7694, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_PCBREAK2	0x76a0 /* MFD VSPARC PCBREAK2 */ 
	#define BITFIELD_MFD_VSPARC_PCBREAK2	 0x76a0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_PCBREAKMASK2	0x76a4 /* MFD VSPARC PCBREAKMASK2 */ 
	#define BITFIELD_MFD_VSPARC_PCBREAKMASK2	 0x76a4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_PCBREAK3	0x76b0 /* MFD VSPARC PCBREAK3 */ 
	#define BITFIELD_MFD_VSPARC_PCBREAK3	 0x76b0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_PCBREAKMASK3	0x76b4 /* MFD VSPARC PCBREAKMASK3 */ 
	#define BITFIELD_MFD_VSPARC_PCBREAKMASK3	 0x76b4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_DATABREAK0	0x76c0 /* MFD VSPARC DATABREAK0 */ 
	#define BITFIELD_MFD_VSPARC_DATABREAK0	 0x76c0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_DATABREAKMASK0	0x76c4 /* MFD VSPARC DATABREAKMASK0 */ 
	#define BITFIELD_MFD_VSPARC_DATABREAKMASK0	 0x76c4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_DATABREAK1	0x76d0 /* MFD VSPARC DATABREAK1 */ 
	#define BITFIELD_MFD_VSPARC_DATABREAK1	 0x76d0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_DATABREAKMASK1	0x76d4 /* MFD VSPARC DATABREAKMASK1 */ 
	#define BITFIELD_MFD_VSPARC_DATABREAKMASK1	 0x76d4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_DATABREAK2	0x76e0 /* MFD VSPARC DATABREAK2 */ 
	#define BITFIELD_MFD_VSPARC_DATABREAK2	 0x76e0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_DATABREAKMASK2	0x76e4 /* MFD VSPARC DATABREAKMASK2 */ 
	#define BITFIELD_MFD_VSPARC_DATABREAKMASK2	 0x76e4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_DATABREAK3	0x76f0 /* MFD VSPARC DATABREAK3 */ 
	#define BITFIELD_MFD_VSPARC_DATABREAK3	 0x76f0, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_DATABREAKMASK3	0x76f4 /* MFD VSPARC DATABREAKMASK3 */ 
	#define BITFIELD_MFD_VSPARC_DATABREAKMASK3	 0x76f4, 0, 32, 0xffffffff  /* roff, lsb, width, mask */
#define ROFF_MFD_VSPARC_CODERAM	0x8000 /* MFD VSPARC CODERAM      */ 
	#define BITFIELD_MFD_VSPARC_CODERAM	 0x8000, 0, 32, 0xffffffff  /* roff, lsb, width, mask */


/* Module MFD SPECIFIC SVEN Events */


#define SVEN_MODULE_EVENT_MFD_IN_DEQUEUE	0x64
#define SVEN_MODULE_EVENT_MFD_OUT_ENQUEUE	0x65
#define SVEN_MODULE_EVENT_MFD_CONTENT_TIME_GAP	0x66
#define SVEN_MODULE_EVENT_MFD_CLOSE	0x68
#define SVEN_MODULE_EVENT_MFD_STATE_CHANGE	0x6b
#define SVEN_MODULE_EVENT_MFD_FLUSH_START	0x6c
#define SVEN_MODULE_EVENT_MFD_FLUSH_COMPLETE	0x6d
#define SVEN_MODULE_EVENT_MFD_NEW_SEG_IN	0x6e
#define SVEN_MODULE_EVENT_MFD_NEW_SEG_OUT	0x6f
#define SVEN_MODULE_EVENT_MFD_MESSAGE_TX_TO_FW	0x1
#define SVEN_MODULE_EVENT_MFD_MESSAGE_RX_FROM_FW	0x2
#define SVEN_MODULE_EVENT_MFD_BOTTOM_HALF_HANDLER	0x3
#define SVEN_MODULE_EVENT_MFD_INPUT_PORT_BUFFER	0x4
#define SVEN_MODULE_EVENT_MFD_ENQUEUE_ES_BUFFER	0x5
#define SVEN_MODULE_EVENT_MFD_RELEASE_ES_BUFFER	0x6
#define SVEN_MODULE_EVENT_MFD_DECODE_ORDER_FRAME	0x7
#define SVEN_MODULE_EVENT_MFD_DISPLAY_ORDER_FRAME	0x8
#define SVEN_MODULE_EVENT_MFD_OUTPUT_PORT_BUFFER	0x9
#define SVEN_MODULE_EVENT_MFD_RELEASE_FRAME_BUFFER	0xa
#define SVEN_MODULE_EVENT_MFD_INPUT_PORT_EMPTY	0xb
#define SVEN_MODULE_EVENT_MFD_FB_ALLOCATED	0xc
#define SVEN_MODULE_EVENT_MFD_FB_RELEASED	0xd
#define SVEN_MODULE_EVENT_MFD_INPUT_INFO	0xe
#define SVEN_MODULE_EVENT_MFD_ES_ATTR_FOUND	0xf
#define SVEN_MODULE_EVENT_MFD_IP_DEPTH_CHANGED	0x10
#define SVEN_MODULE_EVENT_MFD_OPEN	0x11
#define SVEN_MODULE_EVENT_MFD_CLIENT_ID_PROCESSED	0x12
#define SVEN_MODULE_EVENT_MFD_EOS_TRIGGERED	0x13
#define SVEN_MODULE_EVENT_MFD_DROP_ERR_FRAME	0x14
#define SVEN_MODULE_EVENT_MFD_DISCONT_ON_INPUT	0x15
#define SVEN_MODULE_EVENT_MFD_SET_STATE	0x16
#define SVEN_MODULE_EVENT_MFD_HAL_GET_FW_VER	0x40
#define SVEN_MODULE_EVENT_MFD_HAL_WKLD_ITEM	0x41
#define SVEN_MODULE_EVENT_MFD_HAL_WM_FR_INC	0x42
#define SVEN_MODULE_EVENT_MFD_HAL_WM_FR_DEC	0x43
#define SVEN_MODULE_EVENT_MFD_HAL_WM_ES_INC	0x44
#define SVEN_MODULE_EVENT_MFD_HAL_WM_ES_DEC	0x45
#define SVEN_MODULE_EVENT_MFD_HAL_WITEM_TAG	0x46
#define SVEN_MODULE_EVENT_MFD_HAL_WITEM_DONE	0x47
#define SVEN_MODULE_EVENT_MFD_HAL_WITEM_CONT	0x48
#define SVEN_MODULE_EVENT_MFD_HAL_WITEM_REORD	0x49
#define SVEN_MODULE_EVENT_MFD_HAL_WITEM_FREF	0x4a
#define SVEN_MODULE_EVENT_MFD_HAL_WITEM_FREL	0x4b
#define SVEN_MODULE_EVENT_MFD_HAL_WITEM_FDISP	0x4c
#define SVEN_MODULE_EVENT_MFD_HAL_WITEM_ESBUF	0x4d
#define SVEN_MODULE_EVENT_MFD_HAL_TX_ES_TO_FW	0x4e
#define SVEN_MODULE_EVENT_MFD_HAL_WKLD_TX_P	0x50
#define SVEN_MODULE_EVENT_MFD_HAL_WKLD_RX_P	0x51
#define SVEN_MODULE_EVENT_MFD_HAL_WKLD_TX_D	0x52
#define SVEN_MODULE_EVENT_MFD_HAL_WKLD_RX_D	0x53
#define SVEN_MODULE_EVENT_MFD_HAL_WKLD_FOUT	0x54
#define SVEN_MODULE_EVENT_MFD_HAL_FBA_ALLOC	0x60
#define SVEN_MODULE_EVENT_MFD_HAL_FBA_RELEASE	0x61
#define SVEN_MODULE_EVENT_MFD_HAL_OPEN	0x62
#define SVEN_MODULE_EVENT_MFD_HAL_CLOSE_STAGE1	0x63
#define SVEN_MODULE_EVENT_MFD_HAL_CLOSE_STAGE2	0x70
#define SVEN_MODULE_EVENT_MFD_HAL_FB_IS_RELEASED	0x71
#define SVEN_MODULE_EVENT_MFD_HAL_FB_IS_DISPLAYED	0x72
#define SVEN_MODULE_EVENT_MFD_HAL_FB_IS_WRITTEN	0x73
#define SVEN_MODULE_EVENT_MFD_HAL_FB_ARRAY	0x74
#define SVEN_MODULE_EVENT_MFD_HAL_DISCONT_ON_WKLD	0x75
#define SVEN_MODULE_EVENT_MFD_HAL_GET_DESCR_ERR	0x76
#define SVEN_MODULE_EVENT_MFD_HAL_UNSUPPORTED_3D_AVC_STREAM_FORMAT_DETECTED	0x77
#define SVEN_MODULE_EVENT_MFD_FW_PICOSVEN	0x80
#define SVEN_MODULE_EVENT_MFD_FW_DK_STM_QUERY	0x81
#define SVEN_MODULE_EVENT_MFD_FW_DK_PIPE_OPEN	0x82
#define SVEN_MODULE_EVENT_MFD_FW_DK_PIPE_FREE	0x83
#define SVEN_MODULE_EVENT_MFD_FW_DK_STM_OPEN	0x84
#define SVEN_MODULE_EVENT_MFD_FW_DK_STM_PIPE	0x85
#define SVEN_MODULE_EVENT_MFD_FW_DK_STM_FLUSH	0x86
#define SVEN_MODULE_EVENT_MFD_FW_DK_STM_CLOSE	0x87
#define SVEN_MODULE_EVENT_MFD_FW_DK_WL_START	0x88
#define SVEN_MODULE_EVENT_MFD_FW_DK_ISR	0x89
#define SVEN_MODULE_EVENT_MFD_FW_DK_WL_DONE	0x8a
#define SVEN_MODULE_EVENT_MFD_FW_DM_CTX_LOAD	0x8b
#define SVEN_MODULE_EVENT_MFD_FW_DM_CTX_SAVE	0x8c
#define SVEN_MODULE_EVENT_MFD_FW_AUTOAPI_CMD	0x8d
#define SVEN_MODULE_EVENT_MFD_FW_AUTOAPI_DEFER	0x8e
#define SVEN_MODULE_EVENT_MFD_FW_AUTOAPI_CMPLT	0x8f
#define SVEN_MODULE_EVENT_MFD_FW_MP2_HW_INIT	0x90
#define SVEN_MODULE_EVENT_MFD_FW_MP2_REG_RESET	0x91
#define SVEN_MODULE_EVENT_MFD_FW_MP2_REG_WRITE	0x92
#define SVEN_MODULE_EVENT_MFD_FW_MP2_WL_FIELD	0x93
#define SVEN_MODULE_EVENT_MFD_FW_MP2_DMA_APPEND	0x94
#define SVEN_MODULE_EVENT_MFD_FW_MP2_FRM_OUT	0x95
#define SVEN_MODULE_EVENT_MFD_FW_MP2_FRM_REF	0x96
#define SVEN_MODULE_EVENT_MFD_FW_MP2_PIP_SCALE	0x97
#define SVEN_MODULE_EVENT_MFD_FW_MP2_WL_FRAME	0x98
#define SVEN_MODULE_EVENT_MFD_FW_MP2_FRAME_DONE	0x99
#define SVEN_MODULE_EVENT_MFD_FW_MP2_INTR_STAT	0x9a
#define SVEN_MODULE_EVENT_MFD_FW_MP2_NUM_ERR_MB	0x9b
#define SVEN_MODULE_EVENT_MFD_FW_CODEC_FRAME_POLL	0x9c
#define SVEN_MODULE_EVENT_MFD_FW_MP2_INSUFF_MEM	0x9d
#define SVEN_MODULE_EVENT_MFD_FW_MP4_RESET	0xa0
#define SVEN_MODULE_EVENT_MFD_FW_MP4_BSP_NORMAL	0xa1
#define SVEN_MODULE_EVENT_MFD_FW_MP4_BSP_DP	0xa2
#define SVEN_MODULE_EVENT_MFD_FW_MP4_BSP_LOAD_START	0xa3
#define SVEN_MODULE_EVENT_MFD_FW_MP4_BSP_LOAD_DONE	0xa4
#define SVEN_MODULE_EVENT_MFD_FW_MP4_BSP_IMEM_WRITE	0xa5
#define SVEN_MODULE_EVENT_MFD_FW_MP4_BSP_DMEM_WRITE	0xa6
#define SVEN_MODULE_EVENT_MFD_FW_MP4_REG_WRITE	0xa7
#define SVEN_MODULE_EVENT_MFD_FW_MP4_FRAME	0xa8
#define SVEN_MODULE_EVENT_MFD_FW_MP4_POLL	0xa9
#define SVEN_MODULE_EVENT_MFD_FW_MP4_DMEM_DATA	0xaa
#define SVEN_MODULE_EVENT_MFD_FW_WL_START_BEGIN	0xb0
#define SVEN_MODULE_EVENT_MFD_FW_WL_START_END	0xb1
#define SVEN_MODULE_EVENT_MFD_FW_WL_POLL_BEGIN	0xb2
#define SVEN_MODULE_EVENT_MFD_FW_WL_POLL_END	0xb3
#define SVEN_MODULE_EVENT_MFD_FW_WL_DONE	0xb4
#define SVEN_MODULE_EVENT_MFD_FW_WL_DONE_CL_START	0xb5
#define SVEN_MODULE_EVENT_MFD_FW_WL_DONE_CL_END	0xb6
#define SVEN_MODULE_EVENT_MFD_FW_WL_SLICE_BEGIN	0xb7
#define SVEN_MODULE_EVENT_MFD_FW_WL_SLICE_END	0xb8
#define SVEN_MODULE_EVENT_MFD_FW_WL_SLICE_HW_BEGIN	0xb9
#define SVEN_MODULE_EVENT_MFD_FW_PRCS_WL_BEGIN	0xba
#define SVEN_MODULE_EVENT_MFD_FW_PRCS_WL_END	0xbb
#define SVEN_MODULE_EVENT_MFD_FW_WL_ERROR	0xbc
#define SVEN_MODULE_EVENT_MFD_FW_ST_DMA_STATS	0xf0


#endif /* MFD_REGOFFS_H */
