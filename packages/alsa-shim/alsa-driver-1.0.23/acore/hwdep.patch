--- ../alsa-kernel/core/hwdep.c	2011-07-20 23:59:05.001383647 +0800
+++ hwdep.c	2011-07-21 01:10:31.861371268 +0800
@@ -1,3 +1,4 @@
+#include "adriver.h"
 /*
  *  Hardware dependent layer
  *  Copyright (c) by Jaroslav Kysela <perex@perex.cz>
@@ -21,6 +22,9 @@
 
 #include <linux/major.h>
 #include <linux/init.h>
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 39)
+#include <linux/smp_lock.h>
+#endif
 #include <linux/slab.h>
 #include <linux/time.h>
 #include <linux/mutex.h>
@@ -306,27 +310,46 @@
 	return -ENOIOCTLCMD;
 }
 
-#ifdef CONFIG_COMPAT
+#if defined(CONFIG_COMPAT) && defined(CONFIG_SND_HAVE_NEW_IOCTL)
 #include "hwdep_compat.c"
 #else
 #define snd_hwdep_ioctl_compat	NULL
 #endif
 
+#ifndef CONFIG_SND_HAVE_NEW_IOCTL
+/* need to unlock BKL to allow preemption */
+static int snd_hwdep_ioctl_old(struct inode *inode, struct file * file,
+			       unsigned int cmd, unsigned long arg)
+{
+	int err;
+	unlock_kernel();
+	err = snd_hwdep_ioctl(file, cmd, arg);
+	lock_kernel();
+	return err;
+}
+#endif
+
 /*
 
  */
 
 static const struct file_operations snd_hwdep_f_ops =
 {
+#ifndef LINUX_2_2
 	.owner = 	THIS_MODULE,
+#endif
 	.llseek =	snd_hwdep_llseek,
 	.read = 	snd_hwdep_read,
 	.write =	snd_hwdep_write,
 	.open =		snd_hwdep_open,
 	.release =	snd_hwdep_release,
 	.poll =		snd_hwdep_poll,
+#ifdef CONFIG_SND_HAVE_NEW_IOCTL
 	.unlocked_ioctl =	snd_hwdep_ioctl,
 	.compat_ioctl =	snd_hwdep_ioctl_compat,
+#else
+	.ioctl =	snd_hwdep_ioctl_old,
+#endif
 	.mmap =		snd_hwdep_mmap,
 };
 
