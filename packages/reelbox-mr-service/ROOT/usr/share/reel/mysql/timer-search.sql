USE vdr;
CREATE TABLE timer_search (id INT NOT NULL, search VARCHAR(256), useTime TINYINT, startTime VARCHAR(4), stopTime VARCHAR(4), useChannel TINYINT, ChannelGroup VARCHAR(256), useCase TINYINT, mode TINYINT, useTitle TINYINT, useSubtitle TINYINT, useDescription TINYINT, useDuration TINYINT, minDuration VARCHAR(4), maxDuration VARCHAR(4), useAsSearchTimer TINYINT, useDayOfWeek TINYINT, DayOfWeek TINYINT, useEpisode TINYINT, directory VARCHAR(512), Priority TINYINT UNSIGNED, Lifetime TINYINT UNSIGNED, MarginStart SMALLINT, MarginStop SMALLINT, useVPS TINYINT, action TINYINT, useExtEPGInfo TINYINT, ExtEPGInfo VARCHAR(512), avoidRepeats TINYINT, allowedRepeats TINYINT, compareTitle TINYINT, compareSubtitle TINYINT, compareSummary TINYINT, catvaluesAvoidRepeat INT UNSIGNED, repeatsWithinDays TINYINT, delAfterDays TINYINT, recordingsKeep TINYINT, switchMinsBefore TINYINT, pauseOnNrRecordings TINYINT, blacklistMode TINYINT, blacklists VARCHAR(512), fuzzyTolerance TINYINT, useInFavorites TINYINT, menuTemplate TINYINT, delMode TINYINT, delAfterCountRecs SMALLINT, delAfterDaysOfFirstRec SMALLINT, useAsSearchTimerFrom INT, useAsSearchTimerTil INT, ignoreMissingEPGCats TINYINT, unmuteSoundOnSwitch TINYINT, PRIMARY KEY(id));
CREATE TRIGGER insert_timer_search AFTER INSERT ON timer_search FOR EACH ROW INSERT INTO vdr_event (object_id, table_name, action) VALUES (NEW.id, 'timer_search', 'insert');
CREATE TRIGGER update_timer_search AFTER UPDATE ON timer_search FOR EACH ROW INSERT INTO vdr_event (object_id, table_name, action) VALUES (OLD.id, 'timer_search', 'update');
CREATE TRIGGER delete_timer_search AFTER DELETE ON timer_search FOR EACH ROW INSERT INTO vdr_event (object_id, table_name, action) VALUES (OLD.id, 'timer_search', 'delete');
GRANT SELECT,INSERT,UPDATE,DELETE on vdr.timer_search to 'reeluser'@'%' IDENTIFIED BY 'reeluser';
GRANT SELECT,INSERT,UPDATE,DELETE on vdr.timer_search to 'reeluser'@'localhost' IDENTIFIED BY 'reeluser';
