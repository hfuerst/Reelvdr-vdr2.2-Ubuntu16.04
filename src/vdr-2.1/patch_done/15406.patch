Index: submenu.h
===================================================================
--- submenu.h	(revision 15405)
+++ submenu.h	(revision 15406)
@@ -17,9 +17,8 @@
 
 #include "thread.h"
 #include "tools.h"
-#define TIXML_USE_STL
-#include <tinystr.h>
-#include <tinyxml.h>
+#include <tinyxml/tinystr.h>
+#include <tinyxml/tinyxml.h>
 
 class cSubMenuNode;
 class cSubMenuNodes;
Index: Makefile
===================================================================
--- Makefile	(revision 15405)
+++ Makefile	(revision 15406)
@@ -65,6 +65,7 @@
 
 ifdef USE_TINYXML
 	LIBS += -Ltinyxml -ltinyxml
+	INCLUDES += -I.
 
 TINYXMLLIB = tinyxml/libtinyxml.a
 $(TINYXMLLIB):
Index: help.c
===================================================================
--- help.c	(revision 15405)
+++ help.c	(revision 15406)
@@ -375,380 +375,120 @@
   return HelpMenus.First();
 }
 
+// --- cMenuHelp --------------------------------------------------------
 
-#include <string>
-#include <vector>
+cMenuHelp::cMenuHelp(cHelpSection *Section, const char *Title)
+:cOsdMenu(Title)
+{
 
-#include <string.h>
-#include <stdlib.h>
-#include <stdio.h>
-#include <sys/types.h>
-#include <sys/stat.h>
-#include <unistd.h>
+  text = NULL;
+  helpPage = NULL;
+  section = Section;
+  char buffer[128];
+  snprintf(buffer,128, "%s - %s",tr("Help"), Title);
+  SetTitle(buffer);
 
-#include "debug.h"
-#include "i18n.h"
-#include "submenu.h" // dynamicmenuEnt
-#include "tinyxml/tinyxml.h"
-#include "help.h"
-#include "skins.h"
+  if (Section)
+     helpPage = Section->GetHelpByTitle(Title);
 
+  if (helpPage)
+    SetText(helpPage->Text());
 
-using std::string;
+  Display();
+}
 
-cHelp::cHelp()
+cMenuHelp::~cMenuHelp()
 {
-  editableWidth_ = cSkinDisplay::Current()->EditableWidth();
-  // dsyslog(DBG_PREFIX "   edw: %d", editableWidth_);
-  std::string helpDocument = setup::FileNameFactory("help");
-  //node_
+  if (text) free(text);
 }
 
-cHelp::~cHelp()
+void cMenuHelp::SetText(const char *Text)
 {
-
+  if (text) free(text);
+  text = Text ? strdup(Text) : NULL;
 }
-
-
-void cHelp::Load(std::string HelpFile)
+void cMenuHelp::SetNextHelp()
 {
-  //load with cMenuMain() && cMenuSetupOSD (if lang changed)
-  dsyslog(" SUBMENU cHelp::Load (parse help.de.xml)  %s ",HelpFile.c_str());
 
-
-
-//http://www.grinninglizard.com/tinyxmldocs/tutorial0.html
-
-
-#if 0
-  text_.clear();
-
-  dsyslog (" TR test: tr(eng)  %s  \n", I18nLanguageCode(::Setup.OSDLanguage));   // const char *s = I18nLanguageCode(Values[i]);
-  string helpfileEnding  = I18nLanguageCode(::Setup.OSDLanguage);   // const char *s = I18nLanguageCode(Values[i]);
-  helpfileEnding = helpfileEnding.substr(0, 3);
-
-  string baseName = setup::FileNameFactory("help");
-  baseName += HelpFile;
-  string trHelpFile = baseName;
-  trHelpFile += '.';
-  trHelpFile += helpfileEnding;
-
-  std::ifstream inFile(trHelpFile.c_str());
-
-  if (!inFile.is_open())
+  SetStatus(NULL);
+  cHelpPage *h =  static_cast<cHelpPage *>(helpPage->cListObject::Next());
+  if (h) // aviod malloc/free!
   {
-    esyslog ("Setup Erorr: Can`t open  help file %s ", trHelpFile.c_str());
-    inFile.close();
-    inFile.clear();
-
-    inFile.open(baseName.c_str());
-    if (!inFile.is_open())
-       esyslog ("Setup Erorr: Can`t open  default help file  %s. Please check xmlConfig file ",baseName.c_str());
-
+    helpPage = h;
+    const char *myTitle = helpPage->Title();
+    SetText(helpPage->Text());
+    char buffer[128];
+    snprintf(buffer,128,"%s - %s",tr("Help"), myTitle);
+    SetTitle(buffer);
+    Display();
   }
-
-  char line[255];
-
-  while (inFile)
+  else
   {
-    inFile.getline(line,255);
-     // skip comments
-    const char *res = NULL;
-    res = strchr(line, '#');
-    title_ = tr("Help");  //XX TODO
-    if (res != &line[0])
-    {
-       for (unsigned int i = 0; i < strlen(&line[0]); i++)
-           text_.push_back(line[i]);
-
-       text_.push_back('\n');
-    }
+     SetStatus(tr("Already first help item"));
   }
-
-  text_.push_back('\0');
-  inFile.close();
-
-  /*
-  std::cout << " Dump Help Text \n";
-  for(vector<char>::const_iterator iter = text_.begin(); iter != text_.end(); ++iter)
-  std::cout << *iter;
-  */
-#endif
-
 }
 
-cHelpPages HelpMenus;
-
-// --- class cHelpSection -----------------------------------------------------
-
-cHelpPage *cHelpSection::GetHelpByTitle(const char *Title) const
+void cMenuHelp::SetPrevHelp()
 {
-  for (cHelpPage *hp = this->First();hp; hp=this->cList<cHelpPage>::Next(hp))
+  SetStatus(NULL);
+  cHelpPage *h = static_cast<cHelpPage *>(helpPage->cListObject::Prev());
+  if (h)
   {
-    if (strcmp(Title,hp->Title()) == 0)
-    {
-       return hp;
-    }
-  } 
-  // if nothing found we give first dummy page back
-  return this->First();
-}
+    helpPage = h;
+    const char *myTitle = helpPage->Title();
+    SetText(helpPage->Text());
 
-// --- class cHelpPages -----------------------------------------------------
-
-void cHelpPages::DumpHelp()
-{
-  /*
-  DLOG (" Dump HelpMenus \n");
-  for (cHelpSection *hs = HelpMenus.First();hs; hs=HelpMenus.Next(hs))
- {
-    DLOG ("\t +++ Section %s +++\n", hs->Section());
-    for (cHelpPage *hp = hs->First();hp; hp=hs->cList<cHelpPage>::Next(hp))
-    {
-       DLOG ("\t\t -- Title %s\n", hp->Title());
-    } 
+    char buffer[1024];
+    snprintf(buffer,1024, "%s - %s",tr("Help"), myTitle);
+    SetTitle(buffer);
+    Display();
   }
-  DLOG (" Dump HelpMenus End \n\n\n\n");
-  */
-}
-
-
-bool cHelpPages::Load()
-{
-  bool ok = false;
-
-  std::string fileName =  setup::FileNameFactory("help");
-  int fd = open(fileName.c_str(), O_RDONLY);
-  if(fd != -1) {
-     struct stat stat_;
-     if(fstat(fd, &stat_) == 0) {
-        if((lastModified_ != 0) && (lastModified_ == stat_.st_mtime)) {
-           return true;
-        } else {
-           lastModified_ = stat_.st_mtime;
-        }
-     }
-  }
-     
-  HelpMenus.Clear();
-  const char *notAvailable = tr("No help available");
-  cHelpSection *s = new cHelpSection(notAvailable);
-  cHelpPage *help = new cHelpPage(notAvailable, notAvailable); 
-  s->Add(help);
-  HelpMenus.Add(s);
-  
-  DLOG (" Parse file %s", fileName.c_str());
-  TiXmlDocument doc(fileName.c_str());
-  ok = doc.LoadFile(); // args encoding
-  
-  if (ok)
+  else
   {
-    DLOG (" Load OK");
-
-    TiXmlHandle docHandle( &doc);
-    TiXmlHandle handleSection = docHandle.FirstChild("help").FirstChild("section");
-    ParseSection(handleSection);
+     SetStatus(tr("Already last help item"));
   }
-  else 
-  {
-    ok = false;
-
-    DERR (" Error parsing %s : %s", fileName.c_str(), doc.ErrorDesc());
-    DLOG (" \t Col=%d Row=%d\n",doc.ErrorCol(), doc.ErrorRow());
-    esyslog(" Error parsing %s : %s ", fileName.c_str(), doc.ErrorDesc());
-    esyslog(" Col=%d Row=%d\n",doc.ErrorCol(), doc.ErrorRow());
-  }
-
-  //DumpHelp();
-
-  return ok;
 }
-    
-void cHelpPages::ParseSection(TiXmlHandle HandleSection, int Level) 
-{
-  
-  TiXmlElement *elemSection = HandleSection.ToElement();
-  if (!elemSection) 
-  { 
-      //DLOG (" \t get Out ");
-      return; 
-  }
 
-  int sec=1;
-  int t=1; 
-  
-  for(; elemSection; elemSection=elemSection->NextSiblingElement("section"))
-  {
-       //DLOG (" ping 1\n");
-       try 
-       {
-          const char *text =  NULL;
-          const char *section = NULL;
-          TiXmlAttribute *attr = elemSection->FirstAttribute();
-          if (attr) 
-          {
-             section = attr->Value();
-             text = elemSection->GetText();
-             //DLOG ("  %2d.) Get section: <%s> \n",Level, section);
-          }
-
-          // we have to parse each line for <br> resp. <br />
-          std::vector<string>vText;
-          if (text)
-          { 
-             string tmp = text;
-             tmp.append("\n");
-             vText.push_back(tmp);
-             text = NULL;
-             //TiXmlNode* paragraph = elemSection->FirstChild("p");
-             TiXmlNode* nextLine = elemSection->FirstChild("br");
-             //DLOG ("Text: [%s] \n", nextLine?"has <br />":"");
-             for (; nextLine; nextLine = nextLine->NextSibling()) 
-			 {
-                if (nextLine->Type() == TiXmlNode::TINYXML_TEXT)
-                {
-                   text = NULL;
-                   TiXmlText *pText = nextLine->ToText();
-                   text = pText->Value(); 
-                   //DLOG( "Text: [%s] \n", text);
-                   //vText.push_back(string(text) +"\n");
-                   vText.push_back(text);
-                }
-                else if (nextLine->Type() ==TiXmlNode::TINYXML_ELEMENT)
-                {
-                    //DLOG (" is Element Node Val: %s \n", nextLine->Value());
-                    if (strstr(nextLine->Value(), "br") ==  nextLine->Value())
-                        vText.push_back("\n");
-                    else if (strstr(nextLine->Value(), "p") ==  nextLine->Value())
-                        vText.push_back("\n\n  ");
-
-                    else if (strstr(nextLine->Value(), "li") ==  nextLine->Value())
-                    {
-                      if (nextLine->Type() == TiXmlNode::TINYXML_ELEMENT)
-                      {
-                        TiXmlElement *e = nextLine->ToElement();
-                        TiXmlAttribute *attr = e->FirstAttribute();
-
-                        string tmp("\n");
-                        const char *symbol = attr->Value();
-                        if (!symbol)
-                            string tmp("\n ");
-                        else 
-                        tmp += symbol;
-                        vText.push_back(tmp);
-                      }
-                   }
-                }
-			 }
-             /*
-             TiXmlNode* paragraph = elemSection->FirstChild("p");
-             //DLOG ("Text: [%s] \n", paragraph?"has <br />":"");
-             for (; paragraph; paragraph = paragraph->NextSibling()) 
-			 {
-                if (paragraph->Type() == TiXmlNode::TINYXML_TEXT)
-                {
-                   text = NULL;
-                   TiXmlText *pText = paragraph->ToText();
-                   text = pText->Value(); 
-                   //DLOG( "Text: [%s] \n", text);
-                   vText.push_back(string(text) +"\n");
-                }
-			 } */
-          }
-
-          cHelpSection *s = new cHelpSection(section);
-          if (!vText.empty())
-          {
-             cHelpPage *h = new cHelpPage(section, vStringToString(vText)); 
-             s->Add(h);
-             vText.clear();
-          }
-
-          TiXmlNode* nodePage= elemSection->FirstChild("page");
-
-          for (; nodePage; nodePage = nodePage->NextSibling("page"))
-          {
-            try 
-            {
-              vText.clear();
-              text = NULL;
-              const char *title = nodePage->ToElement()->Attribute("title");
-              const char *text = nodePage->ToElement()->GetText();
-              //DLOG ("\t  %2d.) page title: <%s>  \n",t, title);
-              if (text) vText.push_back(string(text) +"\n");
-              TiXmlNode* nextLine = nodePage->FirstChild("br");
-              for (; nextLine; nextLine = nextLine->NextSibling()) 
-              {
-                if (nextLine->Type() == TiXmlNode::TINYXML_TEXT)
-                {
-                   text = NULL;
-                   TiXmlText *pText = nextLine->ToText();
-                   text = pText->Value(); 
-                   //DLOG( "Text: [%s] \n", text);
-                   vText.push_back(string(text) +"\n");
-                }
-              }
-              cHelpPage *help = new cHelpPage(title, vStringToString(vText)); 
-              s->Add(help);
-              t++; 
-            }
-            catch (char *message)
-            {
-              esyslog("ERROR: while decoding XML Node. msg: \"%s\"",message);
-              //ok=false;
-            }
-         }
-         HelpMenus.Add(s);
-
-       }
-       catch (char *message)
-       {
-          esyslog("ERROR: while decoding XML Node. msg: \"%s\"",message);
-          //ok=false;
-       }
-       sec++;
-       //ok = true;
-   }
-
-   ParseSection(HandleSection.FirstChild("section"), Level+1);
-}
-   
-
-cHelpPage *cHelpPages::GetByTitle(const char *Title) const
+void cMenuHelp::Display(void)
 {
-  //DLOG (" GetByTitle:  Title %s +++\n", Title);
-  for (cHelpSection *hs = HelpMenus.First();hs; hs=HelpMenus.Next(hs))
-  {
-    //DLOG ("\t parse HelpMenus:  Section %s +++\n", hs->Section());
-    for (cHelpPage *hp = hs->First();hp; hp=hs->cList<cHelpPage>::Next(hp))
-    {
-       if (strcmp(Title,hp->Title()) == 0)
-       {
-           //DLOG("\t\t -- Title %s\n", hp->Title());
-           return hp;
-       }
-    } 
-  }
-  return HelpMenus.First()->First();
+  cOsdMenu::Display();
+  DisplayMenu()->SetText(text, font == fontFix); //XXX define control character in text to choose the font???
+  if (text)
+     cStatus::MsgOsdTextItem(text);
 }
 
-cHelpSection *cHelpPages::GetSectionByTitle(const char *Title) const
+eOSState cMenuHelp::ProcessKey(eKeys Key)
 {
+  switch (Key) {
+    case kUp|k_Repeat:
+    case kUp:
 
-  //DLOG (" GetSectioniByTitle:  Title %s +++\n", Title);
-  for (cHelpSection *hs = HelpMenus.First();hs; hs=HelpMenus.Next(hs))
-  {
-     // DLOG ("\t parse HelpMenus:  Section %s +++\n", hs->Section());
+                  SetNextHelp();
+                  break;
+    case kDown|k_Repeat:
+    case kDown:
+                  SetPrevHelp();
+                  break;
+    case kLeft|k_Repeat:
+    case kLeft:
+    case kRight|k_Repeat:
+    case kRight:
+                  DisplayMenu()->Scroll(NORMALKEY(Key) == kUp || NORMALKEY(Key) == kLeft, NORMALKEY(Key) == kLeft || NORMALKEY(Key) == kRight);
+                  cStatus::MsgOsdTextItem(NULL, NORMALKEY(Key) == kUp);
+                  return osContinue;
+    case kInfo: return osBack; // XXX TOTEST
+    default: break;
+    }
 
-    for (cHelpPage *hp = hs->First();hp; hp=hs->cList<cHelpPage>::Next(hp))
-    {
-       if (strcmp(Title,hp->Title()) == 0)
-       {
-           //DLOG("\t\t -- Title %s\n", hp->Title());
-           return hs;
+  eOSState state = cOsdMenu::ProcessKey(Key);
+
+  if (state == osUnknown) {
+     switch (Key) {
+       case kInfo: return osBack;
+       case kOk: return osBack;
+       default:  state = osContinue;
        }
-    } 
-  }
-  return HelpMenus.First();
+     }
+  return state;
 }
 
Index: help.h
===================================================================
--- help.h	(revision 15405)
+++ help.h	(revision 15406)
@@ -131,138 +131,20 @@
 extern cHelpPages HelpMenus;
 ///< unfortunately "HelpPages" is reserved in svdrp already 
 
-#endif //__SOURCES_H
-/*
- * sources.h: Source handling
- *
- * See the main source file 'vdr.c' for copyright information and
- * how to reach the author.
- *
- * $Id: sources.h 1.4 2005/05/14 09:30:41 kls Exp $
- */
-
-#ifndef __HELP_H
-#define __HELP_H
-
-
-#include <string>
-#include <sstream>
-#include "tools.h"
-#include <tinyxml.h>
-
-typedef std::vector<std::string>::const_iterator  iterString;
-
-inline std::string vStringToString(std::vector<std::string>& s)
-{
-  std::ostringstream o(std::ostringstream::out);
-  for (iterString iter = s.begin(); iter != s.end(); ++iter)
-  {
-      o << *iter;
-  }
-  std::string tmp = o.str();
-  //printf (" vStringToString ret %s ", tmp.c_str());
-  return o.str();
-}
-
-class cHelp
-{
-public:
-  cHelp();
-  ~cHelp();
-  void Load(std::string Filename);
-  const char *Text();
-  const char *Title();
+class cMenuHelp : public cOsdMenu {
 private:
-  int editableWidth_;
-  std::vector<char> text_;
-  std::vector<std::string> strText_;
-  std::string title_;
-};
-
-inline const char *cHelp::Text()
-{
-  return &text_[0];
-}
-
-inline const char *cHelp::Title()
-{
-   return title_.c_str();
-}
-
-// --- class cHelpPage 
-class cHelpPage : public cListObject
-{
+  char *text;
+  cHelpSection *section;
+  cHelpPage *helpPage;
+  eDvbFont font;
 public:
-
-cHelpPage(std::string Title, std::string Text)
-  :title_(Title),text_(Text)
-{
-  section_ = "";
-};
-  const char *Title() const;
-  const char *Text() const;
-private:
-  std::string title_;
-  std::string text_;
-  std::string section_;
-};
-
-inline const char *cHelpPage::Title() const
-{
-   return strdup(title_.c_str());
-}
-inline const char *cHelpPage::Text() const
-{
-   return strdup(text_.c_str());
-}
-/*
-inline const char *cHelpPage::Section() const
-{
-   return strdup(section_.c_str());
-}
-*/
-
-// --- class cHelpSection  ------
-
-class cHelpSection : public cList<cHelpPage>, public cListObject
-{
-public:
-  cHelpSection(const char *Section)
-    :section_(Section)
-  {
+  cMenuHelp(cHelpSection *Section, const char *Title);
+  virtual ~cMenuHelp();
+  void SetText(const char *Text);
+  void SetNextHelp();
+  void SetPrevHelp();
+  virtual void Display(void);
+  virtual eOSState ProcessKey(eKeys Key);
   };
-  const char *Section() const;
-  cHelpPage *GetHelpByTitle(const char *Title) const;
-private:
- std::string section_;
-    
-};
 
-inline const char *cHelpSection::Section() const
-{
-  return strdup(section_.c_str());
-}
-
-// --- class cHelpPages   ------
-class cHelpPages : public cList<cHelpSection> 
-{
-public:
-  cHelpPage *GetByTitle(const char *Title) const;
-  cHelpPage *GetBySection(const char *Section) const;
-  cHelpSection *GetSectionByTitle(const char *Title) const;
-  ///< returns first help page of section
-  bool Load();
-  cHelpPages() { lastModified_ = 0; };
-private:
-  void ParseSection(TiXmlHandle HandleSection, int Level = 0);
-  ///< recursiv parsing of xmlNodes "section" 
-  void DumpHelp();
-  ///< for debug purposes 
-  time_t lastModified_; /** the time of the last modification on the file */
-};
-
-
-extern cHelpPages HelpMenus;
-///< unfortunately "HelpPages" is reserved in svdrp already 
-
-#endif //__SOURCES_H
+#endif //__HELP_H
