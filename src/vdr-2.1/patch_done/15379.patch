Index: vdr.c
===================================================================
--- vdr.c	(revision 15378)
+++ vdr.c	(revision 15379)
@@ -87,6 +87,156 @@
 
 static int LastSignal = 0;
 
+#ifdef USE_CRASHLOG
+#include <execinfo.h>
+
+#define BACKTRACE_BUFFER_SIZE 128
+#define CRASH_DATE_SIZE       32
+#define CRASH_MSG_SIZE        (CRASH_DATE_SIZE+32)
+
+#define SIGNAL_STR(x) (\
+	(SIGHUP   ==x)?"SIGHUP":\
+	(SIGINT   ==x)?"SIGINT":\
+	(SIGQUIT  ==x)?"SIGQUIT":\
+	(SIGILL   ==x)?"SIGILL":\
+	(SIGTRAP  ==x)?"SIGTRAP":\
+	(SIGABRT  ==x)?"SIGABRT":\
+	(SIGIOT   ==x)?"SIGIOT":\
+	(SIGBUS   ==x)?"SIGBUS":\
+	(SIGFPE   ==x)?"SIGFPE":\
+	(SIGKILL  ==x)?"SIGKILL":\
+	(SIGUSR1  ==x)?"SIGUSR1":\
+	(SIGSEGV  ==x)?"SIGSEGV":\
+	(SIGUSR2  ==x)?"SIGUSR2":\
+	(SIGPIPE  ==x)?"SIGPIPE":\
+	(SIGALRM  ==x)?"SIGALRM":\
+	(SIGTERM  ==x)?"SIGTERM":\
+	(SIGSTKFLT==x)?"SIGSTKFLT":\
+	(SIGCHLD  ==x)?"SIGCHLD":\
+	(SIGCONT  ==x)?"SIGCONT":\
+	(SIGSTOP  ==x)?"SIGSTOP":\
+	(SIGTSTP  ==x)?"SIGTSTP":\
+	(SIGTTIN  ==x)?"SIGTTIN":\
+	(SIGTTOU  ==x)?"SIGTTOU":\
+	(SIGURG   ==x)?"SIGURG":\
+	(SIGXCPU  ==x)?"SIGXCPU":\
+	(SIGXFSZ  ==x)?"SIGXFSZ":\
+	(SIGVTALRM==x)?"SIGVTALRM":\
+	(SIGPROF  ==x)?"SIGPROF":\
+	(SIGWINCH ==x)?"SIGWINCH":\
+	(SIGIO    ==x)?"SIGIO":\
+	(SIGPOLL  ==x)?"SIGPOLL":\
+	(SIGPWR   ==x)?"SIGPWR":\
+	(SIGSYS   ==x)?"SIGSYS":\
+	(SIGUNUSED==x)?"SIGUNUSED":\
+	(SIGRTMIN ==x)?"SIGRTMIN":\
+	(SIGRTMAX ==x)?"SIGRTMAX":\
+	"UNKNOWN")
+
+static char crash_dtstr[CRASH_DATE_SIZE]={0};
+
+static void SetSignalHandlerCrashTime() {
+  time_t t=time(NULL);
+  struct tm lt;
+  localtime_r(&t, &lt);
+  asctime_r(&lt, crash_dtstr);
+  int len=strlen(crash_dtstr);
+  if(len>0)
+    crash_dtstr[len-1] =0; // remove \n
+} // SetSignalHandlerCrashTime
+
+#ifdef RBMINI
+#include <unwind.h>
+struct trace_arg
+{
+  void **array;
+  int cnt, size;
+};
+#ifdef SHARED
+static _Unwind_Reason_Code (*unwind_backtrace) (_Unwind_Trace_Fn, void *);
+static _Unwind_Ptr (*unwind_getip) (struct _Unwind_Context *);
+static void *libgcc_handle;
+
+static void
+init (void)
+{
+  libgcc_handle = __libc_dlopen ("libgcc_s.so.1");
+
+  if (libgcc_handle == NULL)
+    return;
+
+  unwind_backtrace = __libc_dlsym (libgcc_handle, "_Unwind_Backtrace");
+  unwind_getip = __libc_dlsym (libgcc_handle, "_Unwind_GetIP");
+  if (unwind_getip == NULL)
+    unwind_backtrace = NULL;
+}
+#else
+# define unwind_backtrace _Unwind_Backtrace
+# define unwind_getip _Unwind_GetIP
+#endif
+static _Unwind_Reason_Code backtrace_helper (struct _Unwind_Context *ctx, void *a) {
+  struct trace_arg *arg = (trace_arg *)a;
+
+  /* We are first called with address in the __backtrace function.
+     Skip it.  */
+  if (arg->cnt != -1)
+    {
+      arg->array[arg->cnt] = (void *) unwind_getip (ctx);
+
+      /* Check whether we make any progress.  */
+      if (arg->cnt > 0 && arg->array[arg->cnt - 1] == arg->array[arg->cnt])
+    return _URC_END_OF_STACK;
+    }
+  if (++arg->cnt == arg->size)
+    return _URC_END_OF_STACK;
+  return _URC_NO_REASON;
+}
+
+int __backtrace (void **array, int size) {
+  struct trace_arg arg;
+  arg.array = array;
+  arg.size = size;
+  arg.cnt = -1;
+#ifdef SHARED
+  __libc_once_define (static, once);
+
+  __libc_once (once, init);
+  if (unwind_backtrace == NULL)
+    return 0;
+#endif
+  if (size >= 1)
+    unwind_backtrace (backtrace_helper, &arg);
+  /* _Unwind_Backtrace on IA-64 seems to put NULL address above
+     _start.  Fix it up here.  */
+  if (arg.cnt > 1 && arg.array[arg.cnt - 1] == NULL)
+    --arg.cnt;
+  return arg.cnt != -1 ? arg.cnt : 0;
+}
+#endif
+
+static void SignalHandlerCrash(int signum) {
+  void *array[BACKTRACE_BUFFER_SIZE]={0};
+  size_t size=0;
+  int fd=-1;
+  char buf[CRASH_MSG_SIZE]={0};
+  signal(signum,SIG_DFL); // Allow core dump
+
+  fd=open("/var/log/vdr.crashlog", O_CREAT|O_APPEND|O_WRONLY, S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH);
+  if (fd != -1) {
+#ifdef RBMINI
+    size = __backtrace (array, BACKTRACE_BUFFER_SIZE);
+#else
+    size = backtrace (array, BACKTRACE_BUFFER_SIZE);
+#endif
+    int ret = snprintf(buf, sizeof(buf), "%s ### Crash signal %i %s ###\n", crash_dtstr, signum, SIGNAL_STR(signum));
+    write(fd, buf, ret+1);
+    backtrace_symbols_fd(array, size, fd);
+    close(fd);
+  }
+} // SignalHandlerCrash
+
+#endif /* USE_CRASHLOG */
+
 static bool SetUser(const char *UserName, bool UserDump)//XXX name?
 {
   if (UserName) {
@@ -399,6 +549,45 @@
         }
      }
 
+#ifdef USE_CRASHLOG
+  signal(SIGILL, SignalHandlerCrash);
+  signal(SIGFPE, SignalHandlerCrash);
+  signal(SIGSEGV, SignalHandlerCrash);
+  signal(SIGBUS, SignalHandlerCrash);
+  signal(SIGABRT, SignalHandlerCrash);
+
+  signal(SIGHUP, SignalHandlerCrash);
+  signal(SIGINT, SignalHandlerCrash);
+  signal(SIGQUIT, SignalHandlerCrash);
+//  signal(SIGTRAP, SignalHandlerCrash);
+  signal(SIGIOT, SignalHandlerCrash);
+  signal(SIGKILL, SignalHandlerCrash);
+//  signal(SIGUSR1, SignalHandlerCrash);
+//  signal(SIGUSR2, SignalHandlerCrash);
+//  signal(SIGPIPE, SignalHandlerCrash);
+//  signal(SIGALRM, SignalHandlerCrash);
+  signal(SIGTERM, SignalHandlerCrash);
+  signal(SIGSTKFLT, SignalHandlerCrash);
+//  signal(SIGCHLD, SignalHandlerCrash);
+  signal(SIGCONT, SignalHandlerCrash);
+  signal(SIGSTOP, SignalHandlerCrash);
+  signal(SIGTSTP, SignalHandlerCrash);
+//  signal(SIGTTIN, SignalHandlerCrash);
+//  signal(SIGTTOU, SignalHandlerCrash);
+//  signal(SIGURG, SignalHandlerCrash);
+//  signal(SIGXCPU, SignalHandlerCrash);
+//  signal(SIGXFSZ, SignalHandlerCrash);
+//  signal(SIGVTALRM, SignalHandlerCrash);
+//  signal(SIGPROF, SignalHandlerCrash);
+//  signal(SIGWINCH, SignalHandlerCrash);
+//  signal(SIGIO, SignalHandlerCrash);
+//  signal(SIGPOLL, SignalHandlerCrash);
+  signal(SIGPWR, SignalHandlerCrash);
+  signal(SIGSYS, SignalHandlerCrash);
+
+  SetSignalHandlerCrashTime();
+#endif /* USE_CRASHLOG */
+
   // Help and version info:
 
   if (DisplayHelp || DisplayVersion) {
@@ -735,6 +924,9 @@
 #define DELETE_MENU ((IsInfoMenu &= (Menu == NULL)), delete Menu, Menu = NULL)
 
   while (!ShutdownHandler.DoExit()) {
+#ifdef USE_CRASHLOG
+        SetSignalHandlerCrashTime();
+#endif /* USE_CRASHLOG */
 #ifdef DEBUGRINGBUFFERS
         cRingBufferLinear::PrintDebugRBL();
 #endif
