Index: themes.c
===================================================================
--- themes.c	(revision 15374)
+++ themes.c	(revision 15375)
@@ -203,6 +203,20 @@
   return (Subject >= 0 && Subject < MaxThemeColors) ? colorValues[Subject] : 0;
 }
 
+#ifdef REELVDR
+tColor cTheme::Color(const char* Name)
+{
+  for (int i = 0; i < MaxThemeColors; i++) {
+      if (colorNames[i]) {
+         if (strcmp(Name, colorNames[i]) == 0) {
+            return colorValues[i];
+            }
+         }
+      }
+  return 0;
+}
+#endif /* REELVDR */
+
 // --- cThemes ---------------------------------------------------------------
 
 char *cThemes::themesDirectory = NULL;
Index: themes.h
===================================================================
--- themes.h	(revision 15374)
+++ themes.h	(revision 15375)
@@ -53,6 +53,10 @@
   tColor Color(int Subject);
        ///< Returns the color for the given Subject. Subject must be one of
        ///< the values returned by a previous call to AddColor().
+#ifdef REELVDR
+  tColor Color(const char* Name);
+       ///< Returns the color with the subject "Name" or 0 if Name doesn't exist
+#endif /* REELVDR */
   };
 
 // A helper macro that simplifies defining theme colors.
@@ -76,6 +80,7 @@
   const char * const *Descriptions(void) { return descriptions; }
   int GetThemeIndex(const char *Description);
   static void SetThemesDirectory(const char *ThemesDirectory);
+  static char *GetThemesDirectory(void) { return themesDirectory; }
   static void Load(const char *SkinName, const char *ThemeName, cTheme *Theme);
   static void Save(const char *SkinName, cTheme *Theme);
   };
