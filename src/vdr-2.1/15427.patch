Index: s2reel_compat.h
===================================================================
--- s2reel_compat.h	(revision 0)
+++ s2reel_compat.h	(revision 15427)
@@ -0,0 +1,22 @@
+/*
+   provide compatibility between S2API (DVB API V5) and older Reel S2 API
+   RC, 24.08.2010
+*/
+
+#ifdef DVBAPI_V5
+//FIXME: really ugly hack to extend enum fe_type
+#define FE_DVBS2 (FE_ATSC+1)
+
+//DVB V5: PSK_8+4 = DQPSK+1 = one more than last modulation
+#define QPSK_S2 (PSK_8+4)
+
+#else // for API V3 + Reel S2 extensions
+
+//      API V5     Reel
+#define ROLLOFF_20 FE_ROLLOFF_20
+#define ROLLOFF_25 FE_ROLLOFF_25
+#define ROLLOFF_35 FE_ROLLOFF_35
+
+#define PSK_8 PSK8
+
+#endif
Index: config.h
===================================================================
--- config.h	(revision 15426)
+++ config.h	(revision 15427)
@@ -251,7 +251,13 @@
   void StoreLanguages(const char *Name, int *Values);
   bool ParseLanguages(const char *Value, int *Values);
   bool Parse(const char *Name, const char *Value);
+#ifdef REELVDR
+public:
   cSetupLine *Get(const char *Name, const char *Plugin = NULL);
+private:
+#else
+  cSetupLine *Get(const char *Name, const char *Plugin = NULL);
+#endif
   void Store(const char *Name, const char *Value, const char *Plugin = NULL, bool AllowMultiple = false);
   void Store(const char *Name, int Value, const char *Plugin = NULL);
   void Store(const char *Name, double &Value, const char *Plugin = NULL);
Index: resumeDvd.c
===================================================================
--- resumeDvd.c	(revision 0)
+++ resumeDvd.c	(revision 15427)
@@ -0,0 +1,257 @@
+#ifdef REELVDR
+// resume DB
+
+#include "resumeDvd.h"
+#include "tools.h"
+#include <stdio.h>
+
+const time_t cResumeInfo::ExpireTime = 604800; //7*24*3600; // 1 week in seconds
+
+/// class cResumeInfo -----------------------------------------------------------------
+cResumeInfo::cResumeInfo()
+{
+	Init();
+}
+		
+cResumeInfo::cResumeInfo(std::string line)
+{
+	if (!FromString(line))
+		Init();
+}
+		
+void cResumeInfo::Init()
+{
+	lastSeen = time(NULL); // now
+	titleChapter.clear();
+}
+		
+std::string cResumeInfo::ToString()
+{
+	std::stringstream os;
+	os <<titleChapter<<" "<<lastSeen;
+			
+	return os.str();
+}
+		
+bool cResumeInfo::FromString(std::string line)
+{
+			//1.33 1236347970
+	size_t idx = line.find(" ");
+	if (idx == std::string::npos) return false;
+			
+	titleChapter = line.substr(0,idx);
+			
+			// parse for time
+	line = line.substr(idx+1);
+	if (line.length()>0)
+		lastSeen = atol(line.c_str());
+	else
+		lastSeen = time(NULL);
+	return true;
+}
+		
+bool cResumeInfo::Expired()
+{
+	return time(NULL) > (lastSeen + ExpireTime);
+}
+
+
+/// class cResumeDvd --------------------------------------------------------------------
+cResumeDvd::cResumeDvd (std::string fileName)
+{
+    DvdList_.clear ();
+    currDvdId_.clear ();
+    fileName_ = fileName;
+    //Read ();
+}
+
+cResumeDvd::~cResumeDvd ()
+{
+    DvdList_.clear ();
+}
+
+//makes no entry in the list
+
+bool cResumeDvd::SetCurrentDvd (std::string dvdId)
+{
+    currDvdId_ = dvdId;
+    return DvdList_.find (dvdId) != DvdList_.end (); // is it present in the list ?
+}
+
+// sets title chapter of current DVD
+
+bool cResumeDvd::SetTitleChapter (std::string titleChapter)
+{
+    if (currDvdId_.length () > 0)
+    {
+            DvdList_[currDvdId_].titleChapter = titleChapter;
+	    DvdList_[currDvdId_].lastSeen = time(NULL);
+            Save ();
+            return true;
+    }
+
+    return false;
+}
+
+// get title and chapter of current DVD
+
+std::string cResumeDvd::TitleChapter ()
+{
+    return DvdList_[currDvdId_].titleChapter;
+}
+
+bool cResumeDvd::Read ()
+{
+    // discard current list and reload from file
+    // loose all unsave information
+    esyslog(*cString::sprintf("'%s': reading '%s'", __PRETTY_FUNCTION__, fileName_.c_str()));
+    FILE *fp = fopen (fileName_.c_str (), "r");
+    if (!fp) return false;
+    // clear list
+    DvdList_.clear ();
+    char* line = NULL;
+    cReadLine ReadLine;
+    char *p = NULL;
+
+    while ((line = ReadLine.Read (fp)) != NULL)
+    {
+            p = strchr (line, '=');
+            if (p)
+            {
+                    *p = 0;
+		    cResumeInfo resumeInfo(std::string (p + 1 ? p + 1 : ""));
+		    if (!resumeInfo.Expired())
+		    {
+		    	DvdList_[line] = resumeInfo;
+                    	printf ("'%s' '%s'\n", line, p + 1 ? p + 1 : "");
+		    } 
+		    else
+			esyslog(*cString::sprintf("'%s':Expired : '%s' '%s'\n", __PRETTY_FUNCTION__, line, p + 1 ? p + 1 : ""));
+            }
+    }
+
+
+    fclose (fp);
+    return true;
+}
+
+bool cResumeDvd::Save ()
+{
+    //(over)write list to a file
+    FILE *fp = fopen (fileName_.c_str (), "w");
+    if (!fp) return false;
+
+    std::map<std::string, cResumeInfo>::iterator it;
+    for (it = DvdList_.begin (); it != DvdList_.end (); it++)
+	    if (!it->second.Expired()) // save only if resume data has not expired; ie. 1 week
+            	fprintf (fp, "%s=%s\n",
+                	     it->first.c_str (), it->second.ToString().c_str());
+    fclose (fp);
+    return true;
+}
+
+cResumeDvd ResumeDvd ("/etc/vdr/plugins/resumeDVD.list");
+
+
+
+// Get DVD Id of the dvd in /dev/dvd
+// dvd id is made by "dvdname+dvdserialnumber"
+#include <stdio.h>
+#include <fcntl.h>
+#include <stdint.h>
+#include <string.h>
+#include <stdlib.h>
+
+#ifndef DVD_VIDEO_LB_LEN
+#define DVD_VIDEO_LB_LEN 2048
+#endif
+
+#define MSG_OUT stdout
+
+// taken from function of the same name in 
+// xine-lib-1.1.8/src/input/libdvdnav/vm.c
+
+int dvd_read_name (char *name, const char *device)
+{
+    /* Because we are compiling with _FILE_OFFSET_BITS=64
+     * all off_t are 64bit.
+     */
+    off_t off;
+    int fd, i, idx = 0;
+    uint8_t data[DVD_VIDEO_LB_LEN];
+
+    /* Read DVD name */
+    fd = open (device, O_RDONLY);
+    if (fd > 0)
+    {
+            off = lseek (fd, 32 * (off_t) DVD_VIDEO_LB_LEN, SEEK_SET);
+            if (off == (32 * (off_t) DVD_VIDEO_LB_LEN))
+            {
+                    off = read (fd, data, DVD_VIDEO_LB_LEN);
+                    close (fd);
+                    if (off == ((off_t) DVD_VIDEO_LB_LEN))
+                    {
+
+                            /*title*/
+                            for (i = 25; i < 73; i++)
+                            {
+                                    if ((data[i] == 0)) break;
+                                    name[idx++] = ((data[i] > 32) && (data[i] < 127)) ? data[i] : ' ';
+                            }
+
+
+                            /*serial number*/
+                            for (i = 73; i < 89; i++)
+                            {
+                                    if ((data[i] == 0)) break;
+                                    name[idx++] = ((data[i] > 32) && (data[i] < 127)) ? data[i] : ' ';
+                            }
+
+                            /* Alternate title
+                            for(i=89; i < 128; i++ )
+                                 {
+                              if((data[i] == 0)) break;
+                              name[idx++] = ((data[i] > 32) && (data[i] < 127))?data[i]:' ';
+                                }
+                             */
+
+                    }
+                    else
+                    {
+                            fprintf (MSG_OUT, "libdvdnav: Can't read name block. Probably not a DVD-ROM device.\n");
+                            return 0;
+                    }
+            }
+            else
+            {
+                    fprintf (MSG_OUT, "libdvdnav: Can't seek to block %u\n", 32);
+                    return 0;
+            }
+            close (fd);
+    }
+    else
+    {
+            fprintf (MSG_OUT, "Opening dvd device FAILED\n");
+            return 0;
+    }
+    name[idx] = 0;
+    return 1;
+}
+
+std::string DvdId ()
+{
+    std::string id;
+    char *name = (char*) malloc (128 * sizeof (char));
+    if (dvd_read_name (name, "/dev/dvd"))
+    {
+            id = name;
+            //PRINTF ("\033[1:92m DVD id: '%s'\033[0m\n", name);
+    }
+    else id.clear ();
+
+    free (name);
+    return id;
+}
+
+#endif /*REELVDR*/
+
Index: resumeDvd.h
===================================================================
--- resumeDvd.h	(revision 0)
+++ resumeDvd.h	(revision 15427)
@@ -0,0 +1,61 @@
+#ifdef REELVDR
+#ifndef _RESUMEDVD_H
+#define _RESUMEDVD_H
+
+#include <map>
+#include <string>
+#include <sstream>
+#include <stdlib.h>
+#include <time.h>
+
+class cResumeInfo
+{
+	public:
+		
+		time_t lastSeen;
+		std::string titleChapter;
+
+		static const time_t ExpireTime;// = 604800; //7*24*3600; // 1 week in seconds
+
+		cResumeInfo();
+		cResumeInfo(std::string line);
+		void Init();
+		std::string ToString();
+		bool FromString(std::string);
+		bool Expired();
+		
+};
+
+class cResumeDvd
+{
+private:
+    std::string fileName_;
+    std::string currDvdId_;
+    std::map<std::string, cResumeInfo> DvdList_;
+
+public:
+    cResumeDvd (std::string);
+    ~cResumeDvd ();
+    // loose all unsave information
+    bool Read ();
+
+    //(over)write list to a file
+    bool Save ();
+
+    //makes no entry in the list, just sets currDvdId_
+    bool SetCurrentDvd (std::string id);
+
+    // sets title chapter of current DVD
+    bool SetTitleChapter (std::string tc);
+
+    // get title and chapter of current DVD
+    std::string TitleChapter ();
+};
+
+extern cResumeDvd ResumeDvd;
+
+std::string DvdId ();
+
+#endif
+#endif /*REELVDR*/
+
Index: reelboxbase.c
===================================================================
--- reelboxbase.c	(revision 0)
+++ reelboxbase.c	(revision 15427)
@@ -0,0 +1,29 @@
+#ifdef REELVDR
+/***************************************************************************
+ *   Copyright (C) 2005 by Reel Multimedia                                 *
+ *                                                                         *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   You should have received a copy of the GNU General Public License     *
+ *   along with this program; if not, write to the                         *
+ *   Free Software Foundation, Inc.,                                       *
+ *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
+ ***************************************************************************/
+
+// ReelboxBase.c
+
+#include "reelboxbase.h"
+
+
+cReelBoxBase *cReelBoxBase::reelbox = 0;  
+   
+#endif /*REELVDR*/
Index: reelboxbase.h
===================================================================
--- reelboxbase.h	(revision 0)
+++ reelboxbase.h	(revision 15427)
@@ -0,0 +1,63 @@
+#ifdef REELVDR
+/***************************************************************************
+ *   Copyright (C) 2005 by Reel Multimedia                                 *
+ *                                                                         *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   You should have received a copy of the GNU General Public License     *
+ *   along with this program; if not, write to the                         *
+ *   Free Software Foundation, Inc.,                                       *
+ *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
+ ***************************************************************************/
+
+// ReelboxBase.h
+
+#ifndef REEL_BOX_BASE_H
+#define REEL_BOX_BASE_H
+#include "debug.h"
+#include "tools.h"
+#include <stdio.h>
+
+class cReelBoxBase 
+{   
+private:
+    static cReelBoxBase *reelbox;  
+    cReelBoxBase(const cReelBoxBase &ReelBoxBase);
+    cReelBoxBase &operator=(const cReelBoxBase &ReelBoxBase);
+
+public:    
+    virtual void PlayPipVideo(const unsigned char *Data, int Length){
+    PRINTF("-------------cReelBoxBase::PlayPipVideo-----------------\n");
+    };
+    virtual void StartPip(bool start){ PRINTF("virtual void StartPip"); };
+    virtual void SetPipDimensions(const uint x, const uint y, const uint width, const uint height){};
+    virtual void ChannelSwitchInLiveMode(){ PRINTF("virtual void ChannelSwitchInLiveMode"); };
+    static cReelBoxBase* Instance();
+    virtual ~cReelBoxBase() {};
+    
+protected: 
+    cReelBoxBase();
+};
+
+inline cReelBoxBase::cReelBoxBase()
+{
+    reelbox = this;
+}
+
+inline cReelBoxBase* cReelBoxBase::Instance()
+{
+    return reelbox;
+}    
+
+#endif // P__REEL_BOX_BASE_H
+#endif /*REELVDR*/
+
Index: help.c
===================================================================
--- help.c	(revision 15426)
+++ help.c	(revision 15427)
@@ -1,4 +1,4 @@
-
+#ifdef REELVDR
 #include <string>
 #include <vector>
 
@@ -491,4 +491,4 @@
      }
   return state;
 }
-
+#endif /*REELVDR*/
Index: help.h
===================================================================
--- help.h	(revision 15426)
+++ help.h	(revision 15427)
@@ -1,3 +1,4 @@
+#ifdef REELVDR
 /*
  * sources.h: Source handling
  *
@@ -151,3 +152,4 @@
   };
 
 #endif //__HELP_H
+#endif /*REELVDR*/
